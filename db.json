{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/background.jpg","path":"img/background.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"5c01be68fe917d4c3648c6cbb00bf9938a6d8d82","modified":1728637897906},{"_id":"source/_posts/2021-08-29-php设计模式之单例模式.md","hash":"689b9435e21525d18278c1a296c001843cc911a5","modified":1728637897906},{"_id":"source/_posts/2021-09-01-PHP设计模式之工厂模式.md","hash":"82ff5329fefa1a8ab3fb8bc300023bec33669f7b","modified":1728637897907},{"_id":"source/_posts/2021-09-01-PHP设计模式之策略模式.md","hash":"9fd0de3c930a858bfc286b130453754756164ce2","modified":1728637897907},{"_id":"source/_posts/2021-09-01-PHP设计模式之观察者模式.md","hash":"111dec45f5cfdf360ad7c496c23bd44203425371","modified":1728637897907},{"_id":"source/_posts/2021-09-03-PHP设计模式之代理模式.md","hash":"66bef36402a46c9b12000d66139aa349b21c159a","modified":1728637897907},{"_id":"source/_posts/2021-09-03-PHP设计模式之适配器模式.md","hash":"019e94073c159a1434c7296eb207a97a4eb589e2","modified":1728637897907},{"_id":"source/_posts/2021-09-05-PHP设计模式之装饰器模式.md","hash":"9c11341bede4847556c1f1ecc138779ace862d12","modified":1728637897908},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1728637897908},{"_id":"source/_posts/hello.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1728637897908},{"_id":"source/link/index.md","hash":"8383dc2862ee4deb53fa9a962378de5c994deef3","modified":1728637897909},{"_id":"source/categories/index.md","hash":"704560dd8651f6829502403c1481d0923e715bf5","modified":1728637897908},{"_id":"source/tags/index.md","hash":"56a2a088aa3ab981023fb4f3b704ce5a0f315d2e","modified":1728637897909},{"_id":"source/_posts/2023-05-24-dynamic-tp源码分析-.md","hash":"763aef3a13b773c0f9ed35499107e64a3498d46c","modified":1728637897908},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1728638997394},{"_id":"themes/butterfly/README.md","hash":"d8a47bb12a9b3ecef92682d058502e0df762ebf0","modified":1728638997394},{"_id":"themes/butterfly/_config.yml","hash":"b30da2a807f8a0167d9c9574c82180023fb90e9a","modified":1728980708802},{"_id":"themes/butterfly/README_CN.md","hash":"017614c255febe79b4c9d29dd287cac316a6cfd2","modified":1728638997394},{"_id":"themes/butterfly/package.json","hash":"a107f31928ae5031e766b0cbe833f4d9c0f5d831","modified":1728638997417},{"_id":"themes/butterfly/plugins.yml","hash":"42d9b233be0b677a3147795fb81cbf819c90d5fc","modified":1728638997417},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1728638997393},{"_id":"themes/butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1728638997395},{"_id":"themes/butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1728638997395},{"_id":"themes/butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1728638997396},{"_id":"themes/butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1728638997396},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1728638997396},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1728638997396},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1728638997396},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1728638997397},{"_id":"themes/butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1728638997397},{"_id":"themes/butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1728638997416},{"_id":"themes/butterfly/layout/page.pug","hash":"a59b90dd3f845ef6bac18091c55e8e019f4fe7a3","modified":1728638997416},{"_id":"themes/butterfly/layout/post.pug","hash":"e30923c2ec7deca7b2f64d0a099ee727f7069a52","modified":1728638997416},{"_id":"themes/butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1728638997417},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1728638997393},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1728638997393},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1728638997393},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1728638997394},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1728638997394},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1728638997397},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"cd2e0141d7bbd2bd348703ead52c8060904ab338","modified":1728638997397},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"02ed94f1077b84fec59d6256e71112643fd11206","modified":1728638997403},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"82548510310fb44587371fcc9afd7f0bbdb673b1","modified":1728638997397},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"345cb07213cdf66cfef7d9699c60f5f3297e9585","modified":1728638997400},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"7d3581a446285b0cd9362266d54b59fe8768af9e","modified":1728638997403},{"_id":"themes/butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1728638997417},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"170770ae35915167f6a800f11f89d54fcf71e67e","modified":1728638997403},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1728638997418},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1728638997418},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"c69112519cdd9257ca4e57a093c24e067b2cb8c8","modified":1728638997418},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"d1ec0ec2b4ce739ec144d606dcbf46408bbd8b40","modified":1728638997418},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1728638997418},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1728638997419},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1728638997419},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1728638997419},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"24a88d138ccabf29698a6cfe399b2e10f126367f","modified":1728638997419},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1728638997419},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1728638997420},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"378241344a196b84f97ea45023408d05a78e09b4","modified":1728638997420},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"fce35e708d04cb3f2794d46eef5ddfd38b4a1ad1","modified":1728638997420},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"bab1d6322924aa2cc4268f1540464958bc8415c2","modified":1728638997420},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1728638997420},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1728638997421},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1728638997421},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"1d435ea5d0a8c2c062d42bad1747ed7d1d7c73ae","modified":1728638997421},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1728638997421},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1728638997421},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1728638997422},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"67c1aad5ddfe56deae672146c2774379aa65af95","modified":1728638997422},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1728638997432},{"_id":"themes/butterfly/source/css/var.styl","hash":"8cc7b245da61e35cfcc80cafb4e553b5fa968111","modified":1728638997432},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1728638997432},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1728638997434},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1728638997434},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1728638997435},{"_id":"themes/butterfly/source/js/main.js","hash":"1b68ec08f740bb1706ad50e307d59471b3ac90c3","modified":1728638997436},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1728638997436},{"_id":"themes/butterfly/source/js/utils.js","hash":"c93d1833add96e2d26c9272bd443a5f35ae5b6b4","modified":1728638997437},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"2beb68bdd43b09a539c8f4ed0cb7c0838c03409a","modified":1728638997398},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e5a26d2e2ca789dffc6bd9cfc13ff9e530c9911c","modified":1728638997398},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"93c78d39526cb883fa20f02bec9d99b0da52b4f3","modified":1728638997398},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1728638997398},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"96673dadd545cf5e0fa19bff279ab68da61ec30a","modified":1728638997398},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"cd507e58852dc59a72e624fc1b22dc9b138c2575","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"f4f590102c1937d63da5edf35f2ff37f5932ccc1","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1728638997399},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"07a0903e1c82629594d617976ea23e5e5c3d3ba9","modified":1728638997400},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1728638997400},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1728638997400},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1728638997400},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1728638997401},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1728638997401},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"c4489d19df509fe467100eb9834e6f9b6af6c082","modified":1728638997401},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1728638997401},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1728638997402},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1728638997402},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1728638997402},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"2d43ea26e3e0d4866373aa0802fd461c3499076c","modified":1728638997402},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"b62bda168bde8fc44ed4302020a371b96bf49c54","modified":1728638997402},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1728638997403},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1728638997403},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1728638997404},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0c1affa498b28e79e5a465f3f8f18035993bcb88","modified":1728638997412},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1728638997412},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1728638997412},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1728638997413},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"e2fa3804c0fef70bb6fa884f1055c978725ccef2","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"23f30b712cb9aa0c1387ce7174ba11c827c93dcb","modified":1728638997414},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1728638997415},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1728638997416},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"5da5f11a0f7f0fc06732df412bb77a7dddc41429","modified":1728638997416},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1728638997416},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"79bd0208698fbcf8c59e9680af75401650a34f2f","modified":1728638997423},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"3a3939ed4362c07993b64f0869ea638dc4ad7e26","modified":1728638997423},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"d9cb3972c1f567c3dfb2b6865695bfa4a0466342","modified":1728638997423},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1728638997425},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ec22c7f2bb15f1e6ba3fceacaa61d1be979e6e3c","modified":1728638997425},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1728638997425},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1728638997425},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1728638997425},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8705ebf2ab1230cd1cf49248ce19a6742a37e96f","modified":1728638997426},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1728638997426},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"befebfc7878fffed0f421d24a3279633a236a8af","modified":1728638997426},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a894c46c4f9fb0da7f90fad489a12022a4e71eac","modified":1728638997426},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"3fadcebaadab7939d913b052efc0124790fa731e","modified":1728638997426},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1728638997427},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1728638997427},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1728638997427},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"d14886ca18f0dcfbb642abd4ed7131a32d81ba0e","modified":1728638997427},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"aea8a25b8f5738ac1a3d7498a0302f14c30e86e0","modified":1728638997427},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c416d58fb98a2b7a0eedfee9842c6db866288cdb","modified":1728638997427},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1728638997428},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1728638997428},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1728638997428},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1728638997428},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"6c17877d4178809365627eada155da9cacaafca8","modified":1728638997428},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1728638997429},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"6db1d9d0e69a26c46e3b7131e0436f5f1802cb7d","modified":1728638997429},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1728638997429},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"23199b1552f11fb921c7996ee7c139491c3b0ba7","modified":1728638997429},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"dd005cf1bc12d5116d714a11099a528a64eb3613","modified":1728638997429},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1728638997429},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"2cf298c6a767473c7c7cc2cb9e0366308a2af335","modified":1728638997430},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3ea61b806eea440b274d39f3e607e0ad3ddb4492","modified":1728638997430},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1728638997430},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1728638997430},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1728638997431},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1728638997430},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1728638997431},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"31f9bdd21cf8ea29f1c334a9505240ee37085c48","modified":1728638997431},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"a14fb5ec8a40f8c50f6e8277ca4d25d0887796a3","modified":1728638997431},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"9be799d09f5e73da06dc435df6e125a3a8764ecf","modified":1728638997431},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1728638997431},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"37200cd9fb535bd0f99ea495498dcb56400d9262","modified":1728638997436},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e10563c5d11c655e8621e872ec4b58341c6d6013","modified":1728638997436},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0e593c73e0dc7f07f10546092da981a7d8d771f2","modified":1728638997404},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1728638997404},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1728638997404},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1728638997404},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1728638997405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1728638997405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1728638997405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1728638997405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1728638997405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"8b21906b1b3f3faa19bdc16f4167b0b5d487c9ac","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2c6eb1b0b3586ce6a92228f809be37642a2010b0","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"655768ac300db2a18737df51ec21e48c3b53bd3b","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"9ed621742714de6de6593490e3d4aaa3f30a4791","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"153bd348d1e3377b8ea748277c60d4cfdfb019b6","modified":1728638997406},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"80afbae18167ef9e65b63988d3d4e9afdd265610","modified":1728638997407},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1728638997407},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"086086db39e623a4b6e89f38e44121f9b4cc9e94","modified":1728638997407},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"da5cb9e4676b4b1b7b51c39863d2a3b3995d563d","modified":1728638997407},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"b3846b6d50bd4abce0ba41299a2be454774d3e19","modified":1728638997407},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"6731e96d2e35b3d93fa4760186aeefe5c94050ba","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"fef9f8c31e4dfa14313bc6aed3bad4264011da8d","modified":1728638997408},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"3939adafed13d4da166c2879ad4d32a5c1b71eef","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"95c9608b31c284170b5cdb1f942c6dff278ce490","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"1fbd4ac669a9699ae32f3909c1749c882a19e7f1","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"123cc1ee3c75aeda7d0958a64ced516ae8b2bfaa","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1728638997409},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"49aece5be2a0a8e414257ecbfc2abd7d0d5f8c64","modified":1728638997410},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1728638997410},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"86cf7ba9cae6eb8bee0ca792df7a82f58c8451ff","modified":1728638997410},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"7e3b4e1124c9917b820e96bd0c915c08da68aecd","modified":1728638997410},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"619c41729691a54871b49da54ea27657d1b58e7e","modified":1728638997410},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b82c936cb73c325fcac69832a3e475ed732e06f9","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"170cd4e8d190c85de87517ab26baadf29f45ae80","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"16796729df739a47508999b5467a57037ee6e9df","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"988f75833dcb18d4a02c34cdea51e39434ea5723","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"393a327a7f41de070abd53cd95149d3e7e1bbf61","modified":1728638997411},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1728638997412},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1728638997412},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1728638997413},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"b1be0e8095576d00f0022946c9f569378c5626e4","modified":1728638997413},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1728638997413},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1728638997413},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1728638997413},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1728638997424},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1728638997424},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1728638997424},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e76b08f3e72a25c91eff30cbdfc95a2c24f59d83","modified":1728638997424},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ced5fbccabd89ca19dddf6c41b685aea5edaede0","modified":1728638997424},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1728638997434},{"_id":"themes/butterfly/source/img/background.png","hash":"d1e255cd2e9a359b8ba6bbd7b908220292459210","modified":1728983640297},{"_id":"public/link/index.html","hash":"ad1d40fe06244da249185e0feceae907342cea2d","modified":1728985201324},{"_id":"public/categories/index.html","hash":"59de8a6c577eff267a57adbda3ebf918193daebd","modified":1728985201324},{"_id":"public/tags/index.html","hash":"60d0f540e0d4a77a8b37c22520ab2dfb5c1cbbe2","modified":1728985201324},{"_id":"public/2024/10/15/hello/index.html","hash":"b52b32819abbe48ea155a74ddff99aebe2ba18c5","modified":1728985201324},{"_id":"public/2024/10/11/hello-world/index.html","hash":"d1be528e9c295d3fca560d42d519fedaaf5c6f6c","modified":1728985201324},{"_id":"public/2021/09/05/2021-09-05-PHP设计模式之装饰器模式/index.html","hash":"466781783705b7f20bb8bc6a90d352a2db0e17d4","modified":1728985201324},{"_id":"public/2021/09/03/2021-09-03-PHP设计模式之代理模式/index.html","hash":"311da23862b53f3155e1c46120856a58531610d2","modified":1728985201324},{"_id":"public/2021/09/03/2021-09-03-PHP设计模式之适配器模式/index.html","hash":"40260cfafc10cd7649300b98b12bc3ab629029fa","modified":1728985201324},{"_id":"public/2021/09/01/2021-09-01-PHP设计模式之工厂模式/index.html","hash":"ca8505cba1ac1026961331580c226a6f71ba870d","modified":1728985201324},{"_id":"public/2021/09/01/2021-09-01-PHP设计模式之策略模式/index.html","hash":"2384923228a909ae31524fed69e609b35836c8c1","modified":1728985201324},{"_id":"public/2021/09/01/2021-09-01-PHP设计模式之观察者模式/index.html","hash":"8b78509d4b3f8fa9ff53b1e3987d6cf547cbae7d","modified":1728985201324},{"_id":"public/2021/08/29/2021-08-29-php设计模式之单例模式/index.html","hash":"69cd83bdac7df7b44a7f2cfb8bbe3386e679f57a","modified":1728985201324},{"_id":"public/2017/07/30/2023-05-24-dynamic-tp源码分析-/index.html","hash":"4bf5dfeb313310764ab024c649056dd631798420","modified":1728985201324},{"_id":"public/archives/index.html","hash":"a8e2c46dd20ee43929ca310c7f53e997061caa8f","modified":1728985201324},{"_id":"public/archives/2017/index.html","hash":"8f6f8182ab2564d2823358c1d6e916a7b7b867d9","modified":1728985201324},{"_id":"public/archives/2017/07/index.html","hash":"8397868b17d4bda3fc2b207ea8979956b5ace700","modified":1728985201324},{"_id":"public/archives/2021/index.html","hash":"74891c0f405f0f6fdc67c04d79802b87680eee01","modified":1728985201324},{"_id":"public/archives/2021/08/index.html","hash":"2a1fd8c736cd42d5e84fec570978e388c9267804","modified":1728985201324},{"_id":"public/archives/2021/09/index.html","hash":"11d598dc9546064baa48104b7ebc4778a586c5b4","modified":1728985201324},{"_id":"public/archives/2024/index.html","hash":"a1a27a19034318e5051f0b26b0239d0bfcc9b249","modified":1728985201324},{"_id":"public/archives/2024/10/index.html","hash":"3d4cd0117051f3471c72355f5e0350e218be12f4","modified":1728985201324},{"_id":"public/index.html","hash":"70a3a4a51077e3998886f2ff6779bee2dff7c4dd","modified":1728985201324},{"_id":"public/categories/JAVA/index.html","hash":"8eacf77b7302b0d13f03aed2b96e895c932c7016","modified":1728985201324},{"_id":"public/tags/php/index.html","hash":"83b0c0aa0bd7edd0e5c2a9ada18076182ee2c842","modified":1728985201324},{"_id":"public/tags/mathjax/index.html","hash":"3324cb6845052731cecf3304e912abbc3111db1f","modified":1728985201324},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1728985201324},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1728985201324},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1728985201324},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1728985201324},{"_id":"public/css/index.css","hash":"8a8c0f8fd49e96e905ae7f1a7326fa6c76c34792","modified":1728985201324},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1728985201324},{"_id":"public/js/main.js","hash":"1b68ec08f740bb1706ad50e307d59471b3ac90c3","modified":1728985201324},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1728985201324},{"_id":"public/js/utils.js","hash":"c93d1833add96e2d26c9272bd443a5f35ae5b6b4","modified":1728985201324},{"_id":"public/js/search/algolia.js","hash":"37200cd9fb535bd0f99ea495498dcb56400d9262","modified":1728985201324},{"_id":"public/js/search/local-search.js","hash":"e10563c5d11c655e8621e872ec4b58341c6d6013","modified":1728985201324},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1728985201324},{"_id":"public/img/background.png","hash":"d1e255cd2e9a359b8ba6bbd7b908220292459210","modified":1728985201324},{"_id":"themes/butterfly/source/img/background.jpg","hash":"94d7b81ce0c672fe09cd9e97268c94f22296ccc4","modified":1728985816000}],"Category":[{"name":"JAVA","_id":"cm2a95bsc000mucq52i4ncncb"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"link","date":"2023-06-26T10:23:44.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-06-26 18:23:44\ntype: \"link\"\n---\n","updated":"2024-10-11T09:11:37.909Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm2a95bs00000ucq52lzwgm30","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"categories","date":"2023-06-26T08:10:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-06-26 16:10:45\ntype: \"categories\"\n---\n","updated":"2024-10-11T09:11:37.908Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm2a95bs40002ucq59oq50cf4","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""},{"title":"tags","date":"2022-05-29T13:42:56.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-29 21:42:56\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2024-10-11T09:11:37.909Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm2a95bs60005ucq58rvnfzmq","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":""}],"Post":[{"layout":"post","title":"PHP设计模式之单例模式","date":"2021-08-28T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n### 单例模式（Singleton Pattern）\n\n单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例（根据需要也有可能一个线程中属于单例）\n\n![singleton](http://hi.csdn.net/attachment/201112/20/0_1324361827jKWG.gif \"单例\")\n\n### PHP实现单例模式\n\n```\n<?php \n\n\nclass Singleton\n{\n\t//定义一个静态变量保存对象\n\tstatic private $instance;\n\t//防止通过new直接创建对象\n\tprivate function __construct()\n\t{\n\t}\n\t//防止通过clone直接创建对象\n\tprivate function __clone()\n\t{\n\n\t}\n\t//判断$instance是不是Singleton的对象，不是则创建\n\tstatic public function getInstance(){\n\t\tif(!self::$instance instanceof self){\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\t\n\tpublic function say(){\n\t\techo '我是一个单例';\n\t}\n}\n \t$instance = Singleton::getInstance();\n\t$instance->say();\n\n ?>\n  ``` \n\n\n### 单例模式在PHP中的应用场景\n（1）应用程序与数据库交互\n  一个应用中会存在大量的数据库操作，比如过数据库句柄来连接数据库这一行为，使用单例模式可以避免大量的new操作，因为每一次new操作都会消耗内存资源和系统资源。\n  ```\n<?php\n  class DB\n{\n\t//定义一个db变量保存数据库句柄对象\n\tprivate $db;\n\t//创建一个静态变量保存对象\n\tprivate static $instance;\n\t//在构造方法中实例化$db\n\tprivate function __construct()\n\t{\n\t\t$this->db = mysqli_connect();\n\t}\n\tprivate function __clone()\n\t{\n\n\t}\n\tpublic static function getInstance(){\n\t\tif(!self::$instance instanceof self){\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\tpublic function getUserInfo()\n\t{\n\n\t}\n\n}\n\t$_db = Db::getInstance();\n\t$_db->getUserInfo();\n\n ?>\n   ```\n（2）控制配置信息\n 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现,如日志文件、应用配置\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-08-29-php设计模式之单例模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之单例模式'\ndate: 2021-08-29\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n### 单例模式（Singleton Pattern）\n\n单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例（根据需要也有可能一个线程中属于单例）\n\n![singleton](http://hi.csdn.net/attachment/201112/20/0_1324361827jKWG.gif \"单例\")\n\n### PHP实现单例模式\n\n```\n<?php \n\n\nclass Singleton\n{\n\t//定义一个静态变量保存对象\n\tstatic private $instance;\n\t//防止通过new直接创建对象\n\tprivate function __construct()\n\t{\n\t}\n\t//防止通过clone直接创建对象\n\tprivate function __clone()\n\t{\n\n\t}\n\t//判断$instance是不是Singleton的对象，不是则创建\n\tstatic public function getInstance(){\n\t\tif(!self::$instance instanceof self){\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\t\n\tpublic function say(){\n\t\techo '我是一个单例';\n\t}\n}\n \t$instance = Singleton::getInstance();\n\t$instance->say();\n\n ?>\n  ``` \n\n\n### 单例模式在PHP中的应用场景\n（1）应用程序与数据库交互\n  一个应用中会存在大量的数据库操作，比如过数据库句柄来连接数据库这一行为，使用单例模式可以避免大量的new操作，因为每一次new操作都会消耗内存资源和系统资源。\n  ```\n<?php\n  class DB\n{\n\t//定义一个db变量保存数据库句柄对象\n\tprivate $db;\n\t//创建一个静态变量保存对象\n\tprivate static $instance;\n\t//在构造方法中实例化$db\n\tprivate function __construct()\n\t{\n\t\t$this->db = mysqli_connect();\n\t}\n\tprivate function __clone()\n\t{\n\n\t}\n\tpublic static function getInstance(){\n\t\tif(!self::$instance instanceof self){\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\tpublic function getUserInfo()\n\t{\n\n\t}\n\n}\n\t$_db = Db::getInstance();\n\t$_db->getUserInfo();\n\n ?>\n   ```\n（2）控制配置信息\n 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现,如日志文件、应用配置\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-08-29-php设计模式之单例模式","published":1,"updated":"2024-10-11T09:11:37.906Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs20001ucq5e9c4e4if","content":"<h3 id=\"单例模式（Singleton-Pattern）\"><a href=\"#单例模式（Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（Singleton Pattern）\"></a>单例模式（Singleton Pattern）</h3><p>单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例（根据需要也有可能一个线程中属于单例）</p>\n<p><img src=\"http://hi.csdn.net/attachment/201112/20/0_1324361827jKWG.gif\" alt=\"singleton\" title=\"单例\"></p>\n<h3 id=\"PHP实现单例模式\"><a href=\"#PHP实现单例模式\" class=\"headerlink\" title=\"PHP实现单例模式\"></a>PHP实现单例模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//定义一个静态变量保存对象</span><br><span class=\"line\">\tstatic private $instance;</span><br><span class=\"line\">\t//防止通过new直接创建对象</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//防止通过clone直接创建对象</span><br><span class=\"line\">\tprivate function __clone()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//判断$instance是不是Singleton的对象，不是则创建</span><br><span class=\"line\">\tstatic public function getInstance()&#123;</span><br><span class=\"line\">\t\tif(!self::$instance instanceof self)&#123;</span><br><span class=\"line\">\t\t\tself::$instance = new self();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic function say()&#123;</span><br><span class=\"line\">\t\techo &#x27;我是一个单例&#x27;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> \t$instance = Singleton::getInstance();</span><br><span class=\"line\">\t$instance-&gt;say();</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"单例模式在PHP中的应用场景\"><a href=\"#单例模式在PHP中的应用场景\" class=\"headerlink\" title=\"单例模式在PHP中的应用场景\"></a>单例模式在PHP中的应用场景</h3><p>（1）应用程序与数据库交互<br>  一个应用中会存在大量的数据库操作，比如过数据库句柄来连接数据库这一行为，使用单例模式可以避免大量的new操作，因为每一次new操作都会消耗内存资源和系统资源。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  class DB</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//定义一个db变量保存数据库句柄对象</span><br><span class=\"line\">\tprivate $db;</span><br><span class=\"line\">\t//创建一个静态变量保存对象</span><br><span class=\"line\">\tprivate static $instance;</span><br><span class=\"line\">\t//在构造方法中实例化$db</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;db = mysqli_connect();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate function __clone()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()&#123;</span><br><span class=\"line\">\t\tif(!self::$instance instanceof self)&#123;</span><br><span class=\"line\">\t\t\tself::$instance = new self();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getUserInfo()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t$_db = Db::getInstance();</span><br><span class=\"line\">\t$_db-&gt;getUserInfo();</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure><br>（2）控制配置信息<br> 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现,如日志文件、应用配置</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"单例模式（Singleton-Pattern）\"><a href=\"#单例模式（Singleton-Pattern）\" class=\"headerlink\" title=\"单例模式（Singleton Pattern）\"></a>单例模式（Singleton Pattern）</h3><p>单例模式，属于创建类型的一种常用的软件设计模式。通过单例模式的方法创建的类在当前进程中只有一个实例（根据需要也有可能一个线程中属于单例）</p>\n<p><img src=\"http://hi.csdn.net/attachment/201112/20/0_1324361827jKWG.gif\" alt=\"singleton\" title=\"单例\"></p>\n<h3 id=\"PHP实现单例模式\"><a href=\"#PHP实现单例模式\" class=\"headerlink\" title=\"PHP实现单例模式\"></a>PHP实现单例模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Singleton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//定义一个静态变量保存对象</span><br><span class=\"line\">\tstatic private $instance;</span><br><span class=\"line\">\t//防止通过new直接创建对象</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//防止通过clone直接创建对象</span><br><span class=\"line\">\tprivate function __clone()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//判断$instance是不是Singleton的对象，不是则创建</span><br><span class=\"line\">\tstatic public function getInstance()&#123;</span><br><span class=\"line\">\t\tif(!self::$instance instanceof self)&#123;</span><br><span class=\"line\">\t\t\tself::$instance = new self();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic function say()&#123;</span><br><span class=\"line\">\t\techo &#x27;我是一个单例&#x27;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> \t$instance = Singleton::getInstance();</span><br><span class=\"line\">\t$instance-&gt;say();</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"单例模式在PHP中的应用场景\"><a href=\"#单例模式在PHP中的应用场景\" class=\"headerlink\" title=\"单例模式在PHP中的应用场景\"></a>单例模式在PHP中的应用场景</h3><p>（1）应用程序与数据库交互<br>  一个应用中会存在大量的数据库操作，比如过数据库句柄来连接数据库这一行为，使用单例模式可以避免大量的new操作，因为每一次new操作都会消耗内存资源和系统资源。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">  class DB</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//定义一个db变量保存数据库句柄对象</span><br><span class=\"line\">\tprivate $db;</span><br><span class=\"line\">\t//创建一个静态变量保存对象</span><br><span class=\"line\">\tprivate static $instance;</span><br><span class=\"line\">\t//在构造方法中实例化$db</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;db = mysqli_connect();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprivate function __clone()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()&#123;</span><br><span class=\"line\">\t\tif(!self::$instance instanceof self)&#123;</span><br><span class=\"line\">\t\t\tself::$instance = new self();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getUserInfo()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t$_db = Db::getInstance();</span><br><span class=\"line\">\t$_db-&gt;getUserInfo();</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure><br>（2）控制配置信息<br> 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现,如日志文件、应用配置</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"layout":"post","title":"PHP设计模式之工厂模式","date":"2021-08-31T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n### 工厂模式的定义\n工厂模式（Factory Pattern）是 软件开发中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n\n\n### 抽象工厂模式的结构与实现\n抽象工厂模式由抽象工厂、具体工厂、抽象产品和具体产品等4要素组成。\n\n**1.模式结构**\n抽象工厂模式的主要角色如下\n1. 抽象工厂（Abstract Factory）：提供了创建了产品的接口，调用者通过访问具体工厂的工厂方法来创建产品\n2. 具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建\n3. 抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能\n4. 具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。\n\n**2.模式实现**\n\n使用抽象工厂方法模式\n\n![抽象工厂模式](https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg \"抽象工厂\")\n\n```\n<?php\n\n\nabstract class AbstractFactory\n{\n    abstract function getShape(String $shapeType);\n    abstract function getColor(String $color);\n}\nclass ShapeFactory extends  AbstractFactory {\n     function getShape(String $shapeType)\n    {\n       if(is_null($shapeType)){\n           return null;\n       }\n        if($shapeType == 'Circle'){\n            return new Circle();\n        }\n        if($shapeType == 'Rectangle'){\n            return new Rectangle();\n        }\n    }\n\n    function getColor(String $color)\n    {\n        return null;\n    }\n}\nclass ColorFactory extends AbstractFactory\n{\n    function getShape(String $shapeType)\n    {\n        return null;\n    }\n\n    function getColor(String $color)\n    {\n        if(is_null($color)){\n            return null;\n        }\n        if($color == 'Red') {\n\n            return new Red();\n        }\n        if($color == 'Green'){\n\n            return new Green();\n        }\n    }\n\n}\ninterface Shape\n{\n    function  draw();\n\n}\ninterface Color\n{\n    function fille();\n}\nclass Circle implements Shape\n{\n    function  draw()\n    {\n       echo '我是一个圆';\n    }\n\n}\nclass Rectangle implements Shape\n{\n    function  draw()\n    {\n        echo '我是一个正方形';\n    }\n\n}\nclass Red implements Color\n{\n    function fille()\n    {\n        echo '我是红色';\n    }\n}\nclass Green implements Color\n{\n    function fille()\n    {\n        echo '我是绿色';\n    }\n\n}\nclass FactoryProducer\n{\n    public static function getFactory(String $factory)\n    {\n        if($factory == 'Shape'){\n            return new ShapeFactory();\n        }\n        if($factory == 'Color')\n        {\n            return new ColorFactory();\n\n        }\n\n    }\n}\nclass AbstractFactoryPatternDemo\n{\n    public function index()\n    {\n        $shapeFactory = FactoryProducer::getFactory('Shape');\n         $circle = $shapeFactory->getShape('Circle');\n         echo $circle->draw();\n\n         $rect = $shapeFactory->getShape('Rectangle');\n         echo $rect->draw();\n\n        $colorFactory = FactoryProducer::getFactory('Color');\n        $red = $colorFactory->getColor('Red');\n        echo $red->fille();\n\n        $green = $colorFactory->getColor('Green');\n        echo $green->fille();\n\n    }\n\n}\n  \n\n?>\n```\n### 简单工厂模式的结构与实现\n简单工厂模式由工厂、抽象产品和具体产品等3要素实现\n\n**1.模式结构**\n简单工厂方法模式的主要角色如下\n1. 具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建\n2. 抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能\n3. 具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。\n\n**2.模式实现**\n\n使用简单工厂方法模式实现简单计算器\n\n![简单工厂模式现实计算器](https://img0.baidu.com/it/u=2604506897,1950603821&fm=26&fmt=auto&gp=0.jpg \"简单工厂\")\n```\n<?php\n/**\n * Created by PhpStorm.\n * User: Administrator\n * Date: 2021/9/4\n * Time: 15:47\n */\n\nabstract class Operation\n{\n    abstract public function getValue($param1,$param2);\n}\n\nclass OperationMul extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return  $param1 * $param2;\n    }\n}\nclass OperationAdd extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return $param1 + $param2;\n    }\n}\nclass OperationDiv extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        try{\n            if($param2 == 0)\n                throw new Exception(\"除数不能为0\");\n            else\n                return $param1 / $param2;\n        }catch(Exception $e){\n                $e->getMessage();\n    }\n    }\n\n}\nclass OperationSub extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return $param1 - $param2;\n    }\n\n}\nclass Factory\n{\n    public static  function getMethodFactory($factoryName)\n    {\n        switch($factoryName){\n            case 'add':\n                return new OperationAdd();\n                break;\n            case 'sub':\n                return new OperationSub();\n                break;\n            case 'mul':\n                return new OperationMul();\n                break;\n            case 'div';\n                return new OperationDiv();\n                break;\n        }\n    }\n}\n    $addFactory = Factory::getMethodFactory('add');\n    $sum = $addFactory->getValue(20,50);\n    echo  '20 + 50 = '.$sum;\n    $subFactory = Factory::getMethodFactory('sub');\n    $sub = $subFactory->getValue(10,5);\n    echo '10 - 5 = '.$sub;\n    $mulFactory = Factory::getMethodFactory('mul');\n    $mul = $mulFactory->getValue(30,5);\n    echo '30 * 5 = '.$mul;\n    $divFactory = Factory::getMethodFactory('div');\n    $div = $divFactory->getValue(10,2);\n    echo '10 / 2 = '.$div;\n    \n?>\n```\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-01-PHP设计模式之工厂模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之工厂模式'\ndate: 2021-09-01\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n### 工厂模式的定义\n工厂模式（Factory Pattern）是 软件开发中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n\n\n### 抽象工厂模式的结构与实现\n抽象工厂模式由抽象工厂、具体工厂、抽象产品和具体产品等4要素组成。\n\n**1.模式结构**\n抽象工厂模式的主要角色如下\n1. 抽象工厂（Abstract Factory）：提供了创建了产品的接口，调用者通过访问具体工厂的工厂方法来创建产品\n2. 具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建\n3. 抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能\n4. 具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。\n\n**2.模式实现**\n\n使用抽象工厂方法模式\n\n![抽象工厂模式](https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg \"抽象工厂\")\n\n```\n<?php\n\n\nabstract class AbstractFactory\n{\n    abstract function getShape(String $shapeType);\n    abstract function getColor(String $color);\n}\nclass ShapeFactory extends  AbstractFactory {\n     function getShape(String $shapeType)\n    {\n       if(is_null($shapeType)){\n           return null;\n       }\n        if($shapeType == 'Circle'){\n            return new Circle();\n        }\n        if($shapeType == 'Rectangle'){\n            return new Rectangle();\n        }\n    }\n\n    function getColor(String $color)\n    {\n        return null;\n    }\n}\nclass ColorFactory extends AbstractFactory\n{\n    function getShape(String $shapeType)\n    {\n        return null;\n    }\n\n    function getColor(String $color)\n    {\n        if(is_null($color)){\n            return null;\n        }\n        if($color == 'Red') {\n\n            return new Red();\n        }\n        if($color == 'Green'){\n\n            return new Green();\n        }\n    }\n\n}\ninterface Shape\n{\n    function  draw();\n\n}\ninterface Color\n{\n    function fille();\n}\nclass Circle implements Shape\n{\n    function  draw()\n    {\n       echo '我是一个圆';\n    }\n\n}\nclass Rectangle implements Shape\n{\n    function  draw()\n    {\n        echo '我是一个正方形';\n    }\n\n}\nclass Red implements Color\n{\n    function fille()\n    {\n        echo '我是红色';\n    }\n}\nclass Green implements Color\n{\n    function fille()\n    {\n        echo '我是绿色';\n    }\n\n}\nclass FactoryProducer\n{\n    public static function getFactory(String $factory)\n    {\n        if($factory == 'Shape'){\n            return new ShapeFactory();\n        }\n        if($factory == 'Color')\n        {\n            return new ColorFactory();\n\n        }\n\n    }\n}\nclass AbstractFactoryPatternDemo\n{\n    public function index()\n    {\n        $shapeFactory = FactoryProducer::getFactory('Shape');\n         $circle = $shapeFactory->getShape('Circle');\n         echo $circle->draw();\n\n         $rect = $shapeFactory->getShape('Rectangle');\n         echo $rect->draw();\n\n        $colorFactory = FactoryProducer::getFactory('Color');\n        $red = $colorFactory->getColor('Red');\n        echo $red->fille();\n\n        $green = $colorFactory->getColor('Green');\n        echo $green->fille();\n\n    }\n\n}\n  \n\n?>\n```\n### 简单工厂模式的结构与实现\n简单工厂模式由工厂、抽象产品和具体产品等3要素实现\n\n**1.模式结构**\n简单工厂方法模式的主要角色如下\n1. 具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建\n2. 抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能\n3. 具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。\n\n**2.模式实现**\n\n使用简单工厂方法模式实现简单计算器\n\n![简单工厂模式现实计算器](https://img0.baidu.com/it/u=2604506897,1950603821&fm=26&fmt=auto&gp=0.jpg \"简单工厂\")\n```\n<?php\n/**\n * Created by PhpStorm.\n * User: Administrator\n * Date: 2021/9/4\n * Time: 15:47\n */\n\nabstract class Operation\n{\n    abstract public function getValue($param1,$param2);\n}\n\nclass OperationMul extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return  $param1 * $param2;\n    }\n}\nclass OperationAdd extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return $param1 + $param2;\n    }\n}\nclass OperationDiv extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        try{\n            if($param2 == 0)\n                throw new Exception(\"除数不能为0\");\n            else\n                return $param1 / $param2;\n        }catch(Exception $e){\n                $e->getMessage();\n    }\n    }\n\n}\nclass OperationSub extends Operation\n{\n    public function getValue($param1, $param2)\n    {\n        return $param1 - $param2;\n    }\n\n}\nclass Factory\n{\n    public static  function getMethodFactory($factoryName)\n    {\n        switch($factoryName){\n            case 'add':\n                return new OperationAdd();\n                break;\n            case 'sub':\n                return new OperationSub();\n                break;\n            case 'mul':\n                return new OperationMul();\n                break;\n            case 'div';\n                return new OperationDiv();\n                break;\n        }\n    }\n}\n    $addFactory = Factory::getMethodFactory('add');\n    $sum = $addFactory->getValue(20,50);\n    echo  '20 + 50 = '.$sum;\n    $subFactory = Factory::getMethodFactory('sub');\n    $sub = $subFactory->getValue(10,5);\n    echo '10 - 5 = '.$sub;\n    $mulFactory = Factory::getMethodFactory('mul');\n    $mul = $mulFactory->getValue(30,5);\n    echo '30 * 5 = '.$mul;\n    $divFactory = Factory::getMethodFactory('div');\n    $div = $divFactory->getValue(10,2);\n    echo '10 / 2 = '.$div;\n    \n?>\n```\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-01-PHP设计模式之工厂模式","published":1,"updated":"2024-10-11T09:11:37.907Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs40003ucq5gdgo8ybs","content":"<h3 id=\"工厂模式的定义\"><a href=\"#工厂模式的定义\" class=\"headerlink\" title=\"工厂模式的定义\"></a>工厂模式的定义</h3><p>工厂模式（Factory Pattern）是 软件开发中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h3 id=\"抽象工厂模式的结构与实现\"><a href=\"#抽象工厂模式的结构与实现\" class=\"headerlink\" title=\"抽象工厂模式的结构与实现\"></a>抽象工厂模式的结构与实现</h3><p>抽象工厂模式由抽象工厂、具体工厂、抽象产品和具体产品等4要素组成。</p>\n<p><strong>1.模式结构</strong><br>抽象工厂模式的主要角色如下</p>\n<ol>\n<li>抽象工厂（Abstract Factory）：提供了创建了产品的接口，调用者通过访问具体工厂的工厂方法来创建产品</li>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建</li>\n<li>抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能</li>\n<li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。</li>\n</ol>\n<p><strong>2.模式实现</strong></p>\n<p>使用抽象工厂方法模式</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式\" title=\"抽象工厂\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">abstract class AbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    abstract function getShape(String $shapeType);</span><br><span class=\"line\">    abstract function getColor(String $color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ShapeFactory extends  AbstractFactory &#123;</span><br><span class=\"line\">     function getShape(String $shapeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       if(is_null($shapeType))&#123;</span><br><span class=\"line\">           return null;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        if($shapeType == &#x27;Circle&#x27;)&#123;</span><br><span class=\"line\">            return new Circle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($shapeType == &#x27;Rectangle&#x27;)&#123;</span><br><span class=\"line\">            return new Rectangle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getColor(String $color)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ColorFactory extends AbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function getShape(String $shapeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getColor(String $color)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(is_null($color))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($color == &#x27;Red&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return new Red();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($color == &#x27;Green&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return new Green();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Circle implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       echo &#x27;我是一个圆&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Rectangle implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是一个正方形&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Red implements Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是红色&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Green implements Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是绿色&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class FactoryProducer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function getFactory(String $factory)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if($factory == &#x27;Shape&#x27;)&#123;</span><br><span class=\"line\">            return new ShapeFactory();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($factory == &#x27;Color&#x27;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new ColorFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class AbstractFactoryPatternDemo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $shapeFactory = FactoryProducer::getFactory(&#x27;Shape&#x27;);</span><br><span class=\"line\">         $circle = $shapeFactory-&gt;getShape(&#x27;Circle&#x27;);</span><br><span class=\"line\">         echo $circle-&gt;draw();</span><br><span class=\"line\"></span><br><span class=\"line\">         $rect = $shapeFactory-&gt;getShape(&#x27;Rectangle&#x27;);</span><br><span class=\"line\">         echo $rect-&gt;draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        $colorFactory = FactoryProducer::getFactory(&#x27;Color&#x27;);</span><br><span class=\"line\">        $red = $colorFactory-&gt;getColor(&#x27;Red&#x27;);</span><br><span class=\"line\">        echo $red-&gt;fille();</span><br><span class=\"line\"></span><br><span class=\"line\">        $green = $colorFactory-&gt;getColor(&#x27;Green&#x27;);</span><br><span class=\"line\">        echo $green-&gt;fille();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单工厂模式的结构与实现\"><a href=\"#简单工厂模式的结构与实现\" class=\"headerlink\" title=\"简单工厂模式的结构与实现\"></a>简单工厂模式的结构与实现</h3><p>简单工厂模式由工厂、抽象产品和具体产品等3要素实现</p>\n<p><strong>1.模式结构</strong><br>简单工厂方法模式的主要角色如下</p>\n<ol>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建</li>\n<li>抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能</li>\n<li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。</li>\n</ol>\n<p><strong>2.模式实现</strong></p>\n<p>使用简单工厂方法模式实现简单计算器</p>\n<p><img src=\"https://img0.baidu.com/it/u=2604506897,1950603821&fm=26&fmt=auto&gp=0.jpg\" alt=\"简单工厂模式现实计算器\" title=\"简单工厂\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by PhpStorm.</span><br><span class=\"line\"> * User: Administrator</span><br><span class=\"line\"> * Date: 2021/9/4</span><br><span class=\"line\"> * Time: 15:47</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    abstract public function getValue($param1,$param2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OperationMul extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return  $param1 * $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationAdd extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $param1 + $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationDiv extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            if($param2 == 0)</span><br><span class=\"line\">                throw new Exception(&quot;除数不能为0&quot;);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                return $param1 / $param2;</span><br><span class=\"line\">        &#125;catch(Exception $e)&#123;</span><br><span class=\"line\">                $e-&gt;getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationSub extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $param1 - $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Factory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static  function getMethodFactory($factoryName)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch($factoryName)&#123;</span><br><span class=\"line\">            case &#x27;add&#x27;:</span><br><span class=\"line\">                return new OperationAdd();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;sub&#x27;:</span><br><span class=\"line\">                return new OperationSub();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;mul&#x27;:</span><br><span class=\"line\">                return new OperationMul();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;div&#x27;;</span><br><span class=\"line\">                return new OperationDiv();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    $addFactory = Factory::getMethodFactory(&#x27;add&#x27;);</span><br><span class=\"line\">    $sum = $addFactory-&gt;getValue(20,50);</span><br><span class=\"line\">    echo  &#x27;20 + 50 = &#x27;.$sum;</span><br><span class=\"line\">    $subFactory = Factory::getMethodFactory(&#x27;sub&#x27;);</span><br><span class=\"line\">    $sub = $subFactory-&gt;getValue(10,5);</span><br><span class=\"line\">    echo &#x27;10 - 5 = &#x27;.$sub;</span><br><span class=\"line\">    $mulFactory = Factory::getMethodFactory(&#x27;mul&#x27;);</span><br><span class=\"line\">    $mul = $mulFactory-&gt;getValue(30,5);</span><br><span class=\"line\">    echo &#x27;30 * 5 = &#x27;.$mul;</span><br><span class=\"line\">    $divFactory = Factory::getMethodFactory(&#x27;div&#x27;);</span><br><span class=\"line\">    $div = $divFactory-&gt;getValue(10,2);</span><br><span class=\"line\">    echo &#x27;10 / 2 = &#x27;.$div;</span><br><span class=\"line\">    </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"工厂模式的定义\"><a href=\"#工厂模式的定义\" class=\"headerlink\" title=\"工厂模式的定义\"></a>工厂模式的定义</h3><p>工厂模式（Factory Pattern）是 软件开发中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h3 id=\"抽象工厂模式的结构与实现\"><a href=\"#抽象工厂模式的结构与实现\" class=\"headerlink\" title=\"抽象工厂模式的结构与实现\"></a>抽象工厂模式的结构与实现</h3><p>抽象工厂模式由抽象工厂、具体工厂、抽象产品和具体产品等4要素组成。</p>\n<p><strong>1.模式结构</strong><br>抽象工厂模式的主要角色如下</p>\n<ol>\n<li>抽象工厂（Abstract Factory）：提供了创建了产品的接口，调用者通过访问具体工厂的工厂方法来创建产品</li>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建</li>\n<li>抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能</li>\n<li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。</li>\n</ol>\n<p><strong>2.模式实现</strong></p>\n<p>使用抽象工厂方法模式</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/08/3E13CDD1-2CD2-4C66-BD33-DECBF172AE03.jpg\" alt=\"抽象工厂模式\" title=\"抽象工厂\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">abstract class AbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    abstract function getShape(String $shapeType);</span><br><span class=\"line\">    abstract function getColor(String $color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ShapeFactory extends  AbstractFactory &#123;</span><br><span class=\"line\">     function getShape(String $shapeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       if(is_null($shapeType))&#123;</span><br><span class=\"line\">           return null;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">        if($shapeType == &#x27;Circle&#x27;)&#123;</span><br><span class=\"line\">            return new Circle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($shapeType == &#x27;Rectangle&#x27;)&#123;</span><br><span class=\"line\">            return new Rectangle();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getColor(String $color)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ColorFactory extends AbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function getShape(String $shapeType)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function getColor(String $color)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(is_null($color))&#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($color == &#x27;Red&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return new Red();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($color == &#x27;Green&#x27;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            return new Green();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Circle implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       echo &#x27;我是一个圆&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Rectangle implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function  draw()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是一个正方形&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Red implements Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是红色&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Green implements Color</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function fille()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是绿色&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class FactoryProducer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static function getFactory(String $factory)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if($factory == &#x27;Shape&#x27;)&#123;</span><br><span class=\"line\">            return new ShapeFactory();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if($factory == &#x27;Color&#x27;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return new ColorFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class AbstractFactoryPatternDemo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function index()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $shapeFactory = FactoryProducer::getFactory(&#x27;Shape&#x27;);</span><br><span class=\"line\">         $circle = $shapeFactory-&gt;getShape(&#x27;Circle&#x27;);</span><br><span class=\"line\">         echo $circle-&gt;draw();</span><br><span class=\"line\"></span><br><span class=\"line\">         $rect = $shapeFactory-&gt;getShape(&#x27;Rectangle&#x27;);</span><br><span class=\"line\">         echo $rect-&gt;draw();</span><br><span class=\"line\"></span><br><span class=\"line\">        $colorFactory = FactoryProducer::getFactory(&#x27;Color&#x27;);</span><br><span class=\"line\">        $red = $colorFactory-&gt;getColor(&#x27;Red&#x27;);</span><br><span class=\"line\">        echo $red-&gt;fille();</span><br><span class=\"line\"></span><br><span class=\"line\">        $green = $colorFactory-&gt;getColor(&#x27;Green&#x27;);</span><br><span class=\"line\">        echo $green-&gt;fille();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单工厂模式的结构与实现\"><a href=\"#简单工厂模式的结构与实现\" class=\"headerlink\" title=\"简单工厂模式的结构与实现\"></a>简单工厂模式的结构与实现</h3><p>简单工厂模式由工厂、抽象产品和具体产品等3要素实现</p>\n<p><strong>1.模式结构</strong><br>简单工厂方法模式的主要角色如下</p>\n<ol>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建</li>\n<li>抽象产品（Product）\t\t   ：定义了产品的规范，描述了产品的主要特性和功能</li>\n<li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂一一对应。</li>\n</ol>\n<p><strong>2.模式实现</strong></p>\n<p>使用简单工厂方法模式实现简单计算器</p>\n<p><img src=\"https://img0.baidu.com/it/u=2604506897,1950603821&fm=26&fmt=auto&gp=0.jpg\" alt=\"简单工厂模式现实计算器\" title=\"简单工厂\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by PhpStorm.</span><br><span class=\"line\"> * User: Administrator</span><br><span class=\"line\"> * Date: 2021/9/4</span><br><span class=\"line\"> * Time: 15:47</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    abstract public function getValue($param1,$param2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class OperationMul extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return  $param1 * $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationAdd extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $param1 + $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationDiv extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            if($param2 == 0)</span><br><span class=\"line\">                throw new Exception(&quot;除数不能为0&quot;);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                return $param1 / $param2;</span><br><span class=\"line\">        &#125;catch(Exception $e)&#123;</span><br><span class=\"line\">                $e-&gt;getMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OperationSub extends Operation</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function getValue($param1, $param2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $param1 - $param2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Factory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static  function getMethodFactory($factoryName)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch($factoryName)&#123;</span><br><span class=\"line\">            case &#x27;add&#x27;:</span><br><span class=\"line\">                return new OperationAdd();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;sub&#x27;:</span><br><span class=\"line\">                return new OperationSub();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;mul&#x27;:</span><br><span class=\"line\">                return new OperationMul();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            case &#x27;div&#x27;;</span><br><span class=\"line\">                return new OperationDiv();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    $addFactory = Factory::getMethodFactory(&#x27;add&#x27;);</span><br><span class=\"line\">    $sum = $addFactory-&gt;getValue(20,50);</span><br><span class=\"line\">    echo  &#x27;20 + 50 = &#x27;.$sum;</span><br><span class=\"line\">    $subFactory = Factory::getMethodFactory(&#x27;sub&#x27;);</span><br><span class=\"line\">    $sub = $subFactory-&gt;getValue(10,5);</span><br><span class=\"line\">    echo &#x27;10 - 5 = &#x27;.$sub;</span><br><span class=\"line\">    $mulFactory = Factory::getMethodFactory(&#x27;mul&#x27;);</span><br><span class=\"line\">    $mul = $mulFactory-&gt;getValue(30,5);</span><br><span class=\"line\">    echo &#x27;30 * 5 = &#x27;.$mul;</span><br><span class=\"line\">    $divFactory = Factory::getMethodFactory(&#x27;div&#x27;);</span><br><span class=\"line\">    $div = $divFactory-&gt;getValue(10,2);</span><br><span class=\"line\">    echo &#x27;10 / 2 = &#x27;.$div;</span><br><span class=\"line\">    </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"layout":"post","title":"PHP设计模式之策略模式","date":"2021-08-31T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n### PHP设计模式之策略模式\n\n策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是“在美国交个人所得税”和“在中国交个人所得税”就有不同的算税方法。\n\n![策略模式图](https://img0.baidu.com/it/u=2268511659,2006978202&fm=26&fmt=auto&gp=0.jpg \"策略\")\n\n\n**策略模式:**\n\n* 定义了一组算法（业务规则）；\n* 封装了每个算法；\n* 这族的算法可互换代替（interchangeable）。\n\n### 组成\n\n—抽象策略角色： 策略类，通常由一个接口或者抽象类实现。\n—具体策略角色：包装了相关的算法和行为。\n—环境角色：持有一个策略类的引用，最终给客户端调用。\n\n### PHP实现策略模式\n\n```\n<?php\n\n// 抽象活动算法类\nabstract class  StrategyAbstract\n{\n    public abstract function discount($price);\n}\n\n//满减活动算法类\nclass   FullReductionStrategy extends StrategyAbstract\n{\n\n    public function discount($price)\n    {\n        echo '我是满减算法';\n}\n    }\n\n//满折活动算法类\nclass FullDiscountStrategy extends StrategyAbstract\n{\n    public function discount($price)\n    {\n        echo '我是满折算法';\n    }\n\n}\n\n//满赠活动算法类\nclass FullGrantStrategy extends StrategyAbstract\n{\n    public function discount($price)\n    {\n        echo '我是满赠算法';\n    }\n\n}\n//策略工厂\nclass StrategyFactory\n{\n    private $strategy;\n\n    public function __construct($strategy)\n    {\n        $this->strategy =  $strategy;\n    }\n    public function getDiscount($money)\n    {\n        $this->strategy->discount($money);\n    }\n}\n    $strategy1 = new StrategyFactory(new FullReductionStrategy());\n    $strategy1->getDiscount(1000);\n    $strategy2 = new StrategyFactory(new FullDiscountStrategy());\n    $strategy2->getDiscount(2000);\n    $strategy3 = new StrategyFactory(new FullGrantStrategy());\n    $strategy3->getDiscount(1500);\n```\n\n\n### 使用场景\n1. 如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。\n2. 一个系统需要动态地在几种算法中选择一种。 \n3. 如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\n**注意事项：**如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-01-PHP设计模式之策略模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之策略模式'\ndate: 2021-09-01\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n### PHP设计模式之策略模式\n\n策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是“在美国交个人所得税”和“在中国交个人所得税”就有不同的算税方法。\n\n![策略模式图](https://img0.baidu.com/it/u=2268511659,2006978202&fm=26&fmt=auto&gp=0.jpg \"策略\")\n\n\n**策略模式:**\n\n* 定义了一组算法（业务规则）；\n* 封装了每个算法；\n* 这族的算法可互换代替（interchangeable）。\n\n### 组成\n\n—抽象策略角色： 策略类，通常由一个接口或者抽象类实现。\n—具体策略角色：包装了相关的算法和行为。\n—环境角色：持有一个策略类的引用，最终给客户端调用。\n\n### PHP实现策略模式\n\n```\n<?php\n\n// 抽象活动算法类\nabstract class  StrategyAbstract\n{\n    public abstract function discount($price);\n}\n\n//满减活动算法类\nclass   FullReductionStrategy extends StrategyAbstract\n{\n\n    public function discount($price)\n    {\n        echo '我是满减算法';\n}\n    }\n\n//满折活动算法类\nclass FullDiscountStrategy extends StrategyAbstract\n{\n    public function discount($price)\n    {\n        echo '我是满折算法';\n    }\n\n}\n\n//满赠活动算法类\nclass FullGrantStrategy extends StrategyAbstract\n{\n    public function discount($price)\n    {\n        echo '我是满赠算法';\n    }\n\n}\n//策略工厂\nclass StrategyFactory\n{\n    private $strategy;\n\n    public function __construct($strategy)\n    {\n        $this->strategy =  $strategy;\n    }\n    public function getDiscount($money)\n    {\n        $this->strategy->discount($money);\n    }\n}\n    $strategy1 = new StrategyFactory(new FullReductionStrategy());\n    $strategy1->getDiscount(1000);\n    $strategy2 = new StrategyFactory(new FullDiscountStrategy());\n    $strategy2->getDiscount(2000);\n    $strategy3 = new StrategyFactory(new FullGrantStrategy());\n    $strategy3->getDiscount(1500);\n```\n\n\n### 使用场景\n1. 如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。\n2. 一个系统需要动态地在几种算法中选择一种。 \n3. 如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。\n**注意事项：**如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-01-PHP设计模式之策略模式","published":1,"updated":"2024-10-11T09:11:37.907Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs70006ucq57kj82lgp","content":"<h3 id=\"PHP设计模式之策略模式\"><a href=\"#PHP设计模式之策略模式\" class=\"headerlink\" title=\"PHP设计模式之策略模式\"></a>PHP设计模式之策略模式</h3><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是“在美国交个人所得税”和“在中国交个人所得税”就有不同的算税方法。</p>\n<p><img src=\"https://img0.baidu.com/it/u=2268511659,2006978202&fm=26&fmt=auto&gp=0.jpg\" alt=\"策略模式图\" title=\"策略\"></p>\n<p><strong>策略模式:</strong></p>\n<ul>\n<li>定义了一组算法（业务规则）；</li>\n<li>封装了每个算法；</li>\n<li>这族的算法可互换代替（interchangeable）。</li>\n</ul>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><p>—抽象策略角色： 策略类，通常由一个接口或者抽象类实现。<br>—具体策略角色：包装了相关的算法和行为。<br>—环境角色：持有一个策略类的引用，最终给客户端调用。</p>\n<h3 id=\"PHP实现策略模式\"><a href=\"#PHP实现策略模式\" class=\"headerlink\" title=\"PHP实现策略模式\"></a>PHP实现策略模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// 抽象活动算法类</span><br><span class=\"line\">abstract class  StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public abstract function discount($price);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满减活动算法类</span><br><span class=\"line\">class   FullReductionStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满减算法&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满折活动算法类</span><br><span class=\"line\">class FullDiscountStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满折算法&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满赠活动算法类</span><br><span class=\"line\">class FullGrantStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满赠算法&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//策略工厂</span><br><span class=\"line\">class StrategyFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($strategy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;strategy =  $strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getDiscount($money)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;strategy-&gt;discount($money);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    $strategy1 = new StrategyFactory(new FullReductionStrategy());</span><br><span class=\"line\">    $strategy1-&gt;getDiscount(1000);</span><br><span class=\"line\">    $strategy2 = new StrategyFactory(new FullDiscountStrategy());</span><br><span class=\"line\">    $strategy2-&gt;getDiscount(2000);</span><br><span class=\"line\">    $strategy3 = new StrategyFactory(new FullGrantStrategy());</span><br><span class=\"line\">    $strategy3-&gt;getDiscount(1500);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>\n<li>一个系统需要动态地在几种算法中选择一种。 </li>\n<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe></li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"PHP设计模式之策略模式\"><a href=\"#PHP设计模式之策略模式\" class=\"headerlink\" title=\"PHP设计模式之策略模式\"></a>PHP设计模式之策略模式</h3><p>策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是“在美国交个人所得税”和“在中国交个人所得税”就有不同的算税方法。</p>\n<p><img src=\"https://img0.baidu.com/it/u=2268511659,2006978202&fm=26&fmt=auto&gp=0.jpg\" alt=\"策略模式图\" title=\"策略\"></p>\n<p><strong>策略模式:</strong></p>\n<ul>\n<li>定义了一组算法（业务规则）；</li>\n<li>封装了每个算法；</li>\n<li>这族的算法可互换代替（interchangeable）。</li>\n</ul>\n<h3 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h3><p>—抽象策略角色： 策略类，通常由一个接口或者抽象类实现。<br>—具体策略角色：包装了相关的算法和行为。<br>—环境角色：持有一个策略类的引用，最终给客户端调用。</p>\n<h3 id=\"PHP实现策略模式\"><a href=\"#PHP实现策略模式\" class=\"headerlink\" title=\"PHP实现策略模式\"></a>PHP实现策略模式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// 抽象活动算法类</span><br><span class=\"line\">abstract class  StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public abstract function discount($price);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满减活动算法类</span><br><span class=\"line\">class   FullReductionStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满减算法&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满折活动算法类</span><br><span class=\"line\">class FullDiscountStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满折算法&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//满赠活动算法类</span><br><span class=\"line\">class FullGrantStrategy extends StrategyAbstract</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function discount($price)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &#x27;我是满赠算法&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//策略工厂</span><br><span class=\"line\">class StrategyFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $strategy;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($strategy)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;strategy =  $strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getDiscount($money)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;strategy-&gt;discount($money);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    $strategy1 = new StrategyFactory(new FullReductionStrategy());</span><br><span class=\"line\">    $strategy1-&gt;getDiscount(1000);</span><br><span class=\"line\">    $strategy2 = new StrategyFactory(new FullDiscountStrategy());</span><br><span class=\"line\">    $strategy2-&gt;getDiscount(2000);</span><br><span class=\"line\">    $strategy3 = new StrategyFactory(new FullGrantStrategy());</span><br><span class=\"line\">    $strategy3-&gt;getDiscount(1500);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>\n<li>一个系统需要动态地在几种算法中选择一种。 </li>\n<li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。<br><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe></li>\n</ol>\n"},{"layout":"post","title":"PHP设计模式之代理模式","date":"2021-09-02T16:00:00.000Z","author":"php","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n\n\n# PHP设计模式之代理模式\n\n代理模式。。。。。。。。。。。。。。。。。。。。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-03-PHP设计模式之代理模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之代理模式'\ndate: 2021-09-03\nauthor: php\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n\n\n# PHP设计模式之代理模式\n\n代理模式。。。。。。。。。。。。。。。。。。。。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-03-PHP设计模式之代理模式","published":1,"updated":"2024-10-11T09:11:37.907Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs70007ucq515dmd06l","content":"<h1 id=\"PHP设计模式之代理模式\"><a href=\"#PHP设计模式之代理模式\" class=\"headerlink\" title=\"PHP设计模式之代理模式\"></a>PHP设计模式之代理模式</h1><p>代理模式。。。。。。。。。。。。。。。。。。。。</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"PHP设计模式之代理模式\"><a href=\"#PHP设计模式之代理模式\" class=\"headerlink\" title=\"PHP设计模式之代理模式\"></a>PHP设计模式之代理模式</h1><p>代理模式。。。。。。。。。。。。。。。。。。。。</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"layout":"post","title":"PHP设计模式之适配器模式","date":"2021-09-02T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n\n\n### PHP设计模式之适配器模式\n工厂模式。。。。。。。。。。。。。。。。。。。。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-03-PHP设计模式之适配器模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之适配器模式'\ndate: 2021-09-03\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n\n\n### PHP设计模式之适配器模式\n工厂模式。。。。。。。。。。。。。。。。。。。。\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-03-PHP设计模式之适配器模式","published":1,"updated":"2024-10-11T09:11:37.907Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs80008ucq5c7tddq04","content":"<h3 id=\"PHP设计模式之适配器模式\"><a href=\"#PHP设计模式之适配器模式\" class=\"headerlink\" title=\"PHP设计模式之适配器模式\"></a>PHP设计模式之适配器模式</h3><p>工厂模式。。。。。。。。。。。。。。。。。。。。</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"PHP设计模式之适配器模式\"><a href=\"#PHP设计模式之适配器模式\" class=\"headerlink\" title=\"PHP设计模式之适配器模式\"></a>PHP设计模式之适配器模式</h3><p>工厂模式。。。。。。。。。。。。。。。。。。。。</p>\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"layout":"post","title":"PHP设计模式之装饰器模式","date":"2021-09-04T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n\n\n### 装饰器模式的定义\n\n\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-05-PHP设计模式之装饰器模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之装饰器模式'\ndate: 2021-09-05\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n\n\n### 装饰器模式的定义\n\n\n\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-05-PHP设计模式之装饰器模式","published":1,"updated":"2024-10-11T09:11:37.908Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs9000bucq56xrn6m25","content":"<h3 id=\"装饰器模式的定义\"><a href=\"#装饰器模式的定义\" class=\"headerlink\" title=\"装饰器模式的定义\"></a>装饰器模式的定义</h3><iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"装饰器模式的定义\"><a href=\"#装饰器模式的定义\" class=\"headerlink\" title=\"装饰器模式的定义\"></a>装饰器模式的定义</h3><iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"layout":"post","title":"PHP设计模式之观察者模式","date":"2021-08-31T16:00:00.000Z","author":"hohxil","cover":"http://on2171g4d.bkt.clouddn.com/jekyll-banner.png","_content":"\n\n\n# PHP设计模式之观察者模式\n\n观察者模式（有时又被称为模型（Model）-视图（View）模式、源-收听者(Listener)模式或从属者模式）是软件设计模式的一种。在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。\n\n## 实现方式\n\n观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者和被观察对象。在刚才的例子中，业务数据是被观察对象，用户界面是观察者。观察者和被观察者之间存在“观察”的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。如果在用户界面、业务数据之间使用这样的观察过程，可以确保界面和数据之间划清界限，假定应用程序的需求发生变化，需要修改界面的表现，只需要重新构建一个用户界面，业务数据不需要发生变化。\n\n## 使用场景\n\n1. 当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。\n\n2. 当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象需要被改变。\n\n3. 当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，不希望这些对象是紧密耦合的。\n\n## 角色\n\n**1. 抽象主题（Subject）：**\n\n它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。\n\n**2. 具体主题（Concrete Subject）：**\n\n将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。\n\n**3. 抽象观察者（Observer）：**\n\n为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n\n**4. 具体观察者（Concrete Observer）：**\n\n实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。\n\n\n\n## 优缺点\n\n观察者模式的主要的作用就是对对象解耦，将观察者和被观察者完全隔离。\n\n1. 观察者模式的优点\n\n观察者模式解除了主题和具体观察者的耦合让耦合的双方都依赖于抽象，而不是依赖具体。\n\n2. 观察者模式的缺点\n\n在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。 \n\n## 示例\n\n```\n<?php \n\ninterface Subject\n{\n\tpublic function attach(Observer $observer);\n\tpublic function dettach(Observer $observer);\n\tpublic function notify();\n}\n\ninterface Observer\n{\n\tpublic function update(Subject $subject);\n}\n\nclass User implements Subject\n{\n\tpublic $login;\n\tpublic $logout;\n\n\tprotected $observers = [];\n\tpublic function  hash_update($login = false, $logout = false)\n\t{\n\t\t$this->login = $login;\n\t\t$this->logout = $logout;\n\t\t$this->notify();\n\t}\n\tpublic function attach(Observer $observer)\n\t{\n\t\t$this->observers[] = $observer;\n\n\t}\n\tpublic function dettach(Observer $observer)\n\t{\n\n\t}\n\tpublic function notify()\n\t{\n\t\tforeach ($this->observers as $observer) {\n\t\t\t$observer->update($this);\n\t\t}\n\t}\n\n}\n\nclass LoginUpdateSubsrcibe implements Observer\n{\n\tpublic function update(Subject $subject)\n\t{\n\t\tif ($subject->login) {\n\t\t\techo \"你已登陆，xxx... <br/>\";\n\t\t}\n\t}\n}\n\nclass LogoutUpdateSubsrcibe implements Observer\n{\n\tpublic function update(Subject $subject)\n\t{\n\t\tif ($subject->logout) {\n\t\t\techo \"你已退出，xxx... <br/>\";\n\t\t}\n\t}\n}\n $user = new User();\n $user->attach(new LoginUpdateSubsrcibe());\n $user->attach(new LogoutUpdateSubsrcibe());\n $user->hash_update(true,true);\n\n ?>\n```\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","source":"_posts/2021-09-01-PHP设计模式之观察者模式.md","raw":"---\nlayout: post\ntitle: 'PHP设计模式之观察者模式'\ndate: 2021-09-01\nauthor: hohxil\ncover: 'http://on2171g4d.bkt.clouddn.com/jekyll-banner.png'\ntags: php\n---\n\n\n\n# PHP设计模式之观察者模式\n\n观察者模式（有时又被称为模型（Model）-视图（View）模式、源-收听者(Listener)模式或从属者模式）是软件设计模式的一种。在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。\n\n## 实现方式\n\n观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者和被观察对象。在刚才的例子中，业务数据是被观察对象，用户界面是观察者。观察者和被观察者之间存在“观察”的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。如果在用户界面、业务数据之间使用这样的观察过程，可以确保界面和数据之间划清界限，假定应用程序的需求发生变化，需要修改界面的表现，只需要重新构建一个用户界面，业务数据不需要发生变化。\n\n## 使用场景\n\n1. 当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。\n\n2. 当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象需要被改变。\n\n3. 当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，不希望这些对象是紧密耦合的。\n\n## 角色\n\n**1. 抽象主题（Subject）：**\n\n它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。\n\n**2. 具体主题（Concrete Subject）：**\n\n将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。\n\n**3. 抽象观察者（Observer）：**\n\n为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n\n**4. 具体观察者（Concrete Observer）：**\n\n实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。\n\n\n\n## 优缺点\n\n观察者模式的主要的作用就是对对象解耦，将观察者和被观察者完全隔离。\n\n1. 观察者模式的优点\n\n观察者模式解除了主题和具体观察者的耦合让耦合的双方都依赖于抽象，而不是依赖具体。\n\n2. 观察者模式的缺点\n\n在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。 \n\n## 示例\n\n```\n<?php \n\ninterface Subject\n{\n\tpublic function attach(Observer $observer);\n\tpublic function dettach(Observer $observer);\n\tpublic function notify();\n}\n\ninterface Observer\n{\n\tpublic function update(Subject $subject);\n}\n\nclass User implements Subject\n{\n\tpublic $login;\n\tpublic $logout;\n\n\tprotected $observers = [];\n\tpublic function  hash_update($login = false, $logout = false)\n\t{\n\t\t$this->login = $login;\n\t\t$this->logout = $logout;\n\t\t$this->notify();\n\t}\n\tpublic function attach(Observer $observer)\n\t{\n\t\t$this->observers[] = $observer;\n\n\t}\n\tpublic function dettach(Observer $observer)\n\t{\n\n\t}\n\tpublic function notify()\n\t{\n\t\tforeach ($this->observers as $observer) {\n\t\t\t$observer->update($this);\n\t\t}\n\t}\n\n}\n\nclass LoginUpdateSubsrcibe implements Observer\n{\n\tpublic function update(Subject $subject)\n\t{\n\t\tif ($subject->login) {\n\t\t\techo \"你已登陆，xxx... <br/>\";\n\t\t}\n\t}\n}\n\nclass LogoutUpdateSubsrcibe implements Observer\n{\n\tpublic function update(Subject $subject)\n\t{\n\t\tif ($subject->logout) {\n\t\t\techo \"你已退出，xxx... <br/>\";\n\t\t}\n\t}\n}\n $user = new User();\n $user->attach(new LoginUpdateSubsrcibe());\n $user->attach(new LogoutUpdateSubsrcibe());\n $user->hash_update(true,true);\n\n ?>\n```\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","slug":"2021-09-01-PHP设计模式之观察者模式","published":1,"updated":"2024-10-11T09:11:37.907Z","comments":1,"photos":[],"link":"","_id":"cm2a95bs9000ducq58mo74ohg","content":"<h1 id=\"PHP设计模式之观察者模式\"><a href=\"#PHP设计模式之观察者模式\" class=\"headerlink\" title=\"PHP设计模式之观察者模式\"></a>PHP设计模式之观察者模式</h1><p>观察者模式（有时又被称为模型（Model）-视图（View）模式、源-收听者(Listener)模式或从属者模式）是软件设计模式的一种。在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者和被观察对象。在刚才的例子中，业务数据是被观察对象，用户界面是观察者。观察者和被观察者之间存在“观察”的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。如果在用户界面、业务数据之间使用这样的观察过程，可以确保界面和数据之间划清界限，假定应用程序的需求发生变化，需要修改界面的表现，只需要重新构建一个用户界面，业务数据不需要发生变化。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li><p>当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</p>\n</li>\n<li><p>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象需要被改变。</p>\n</li>\n<li><p>当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，不希望这些对象是紧密耦合的。</p>\n</li>\n</ol>\n<h2 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h2><p><strong>1. 抽象主题（Subject）：</strong></p>\n<p>它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p>\n<p><strong>2. 具体主题（Concrete Subject）：</strong></p>\n<p>将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p>\n<p><strong>3. 抽象观察者（Observer）：</strong></p>\n<p>为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p>\n<p><strong>4. 具体观察者（Concrete Observer）：</strong></p>\n<p>实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>观察者模式的主要的作用就是对对象解耦，将观察者和被观察者完全隔离。</p>\n<ol>\n<li>观察者模式的优点</li>\n</ol>\n<p>观察者模式解除了主题和具体观察者的耦合让耦合的双方都依赖于抽象，而不是依赖具体。</p>\n<ol start=\"2\">\n<li>观察者模式的缺点</li>\n</ol>\n<p>在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。 </p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\"></span><br><span class=\"line\">interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function attach(Observer $observer);</span><br><span class=\"line\">\tpublic function dettach(Observer $observer);</span><br><span class=\"line\">\tpublic function notify();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User implements Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic $login;</span><br><span class=\"line\">\tpublic $logout;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected $observers = [];</span><br><span class=\"line\">\tpublic function  hash_update($login = false, $logout = false)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;login = $login;</span><br><span class=\"line\">\t\t$this-&gt;logout = $logout;</span><br><span class=\"line\">\t\t$this-&gt;notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function attach(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;observers[] = $observer;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function dettach(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function notify()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach ($this-&gt;observers as $observer) &#123;</span><br><span class=\"line\">\t\t\t$observer-&gt;update($this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginUpdateSubsrcibe implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ($subject-&gt;login) &#123;</span><br><span class=\"line\">\t\t\techo &quot;你已登陆，xxx... &lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class LogoutUpdateSubsrcibe implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ($subject-&gt;logout) &#123;</span><br><span class=\"line\">\t\t\techo &quot;你已退出，xxx... &lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> $user = new User();</span><br><span class=\"line\"> $user-&gt;attach(new LoginUpdateSubsrcibe());</span><br><span class=\"line\"> $user-&gt;attach(new LogoutUpdateSubsrcibe());</span><br><span class=\"line\"> $user-&gt;hash_update(true,true);</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure>\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h1 id=\"PHP设计模式之观察者模式\"><a href=\"#PHP设计模式之观察者模式\" class=\"headerlink\" title=\"PHP设计模式之观察者模式\"></a>PHP设计模式之观察者模式</h1><p>观察者模式（有时又被称为模型（Model）-视图（View）模式、源-收听者(Listener)模式或从属者模式）是软件设计模式的一种。在此种模式中，一个目标物件管理所有相依于它的观察者物件，并且在它本身的状态改变时主动发出通知。这通常透过呼叫各观察者所提供的方法来实现。此种模式通常被用来实现事件处理系统。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者和被观察对象。在刚才的例子中，业务数据是被观察对象，用户界面是观察者。观察者和被观察者之间存在“观察”的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。如果在用户界面、业务数据之间使用这样的观察过程，可以确保界面和数据之间划清界限，假定应用程序的需求发生变化，需要修改界面的表现，只需要重新构建一个用户界面，业务数据不需要发生变化。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li><p>当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</p>\n</li>\n<li><p>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象需要被改变。</p>\n</li>\n<li><p>当一个对象必须通知其他对象，而它又不能假定其他对象是谁。换言之，不希望这些对象是紧密耦合的。</p>\n</li>\n</ol>\n<h2 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h2><p><strong>1. 抽象主题（Subject）：</strong></p>\n<p>它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p>\n<p><strong>2. 具体主题（Concrete Subject）：</strong></p>\n<p>将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p>\n<p><strong>3. 抽象观察者（Observer）：</strong></p>\n<p>为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p>\n<p><strong>4. 具体观察者（Concrete Observer）：</strong></p>\n<p>实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>观察者模式的主要的作用就是对对象解耦，将观察者和被观察者完全隔离。</p>\n<ol>\n<li>观察者模式的优点</li>\n</ol>\n<p>观察者模式解除了主题和具体观察者的耦合让耦合的双方都依赖于抽象，而不是依赖具体。</p>\n<ol start=\"2\">\n<li>观察者模式的缺点</li>\n</ol>\n<p>在应用观察者模式时需要考虑一下开发小路问题，程序中包括一个被观察者和多个被观察者，开发和调试比较复杂，而且Java中的消息的通知默认是顺序执行的，一个观察者的卡顿会影响整体的执行效率。在这种情况下，一般考虑采用异步的方式。 </p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\"></span><br><span class=\"line\">interface Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function attach(Observer $observer);</span><br><span class=\"line\">\tpublic function dettach(Observer $observer);</span><br><span class=\"line\">\tpublic function notify();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class User implements Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic $login;</span><br><span class=\"line\">\tpublic $logout;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprotected $observers = [];</span><br><span class=\"line\">\tpublic function  hash_update($login = false, $logout = false)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;login = $login;</span><br><span class=\"line\">\t\t$this-&gt;logout = $logout;</span><br><span class=\"line\">\t\t$this-&gt;notify();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function attach(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;observers[] = $observer;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function dettach(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function notify()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach ($this-&gt;observers as $observer) &#123;</span><br><span class=\"line\">\t\t\t$observer-&gt;update($this);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoginUpdateSubsrcibe implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ($subject-&gt;login) &#123;</span><br><span class=\"line\">\t\t\techo &quot;你已登陆，xxx... &lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class LogoutUpdateSubsrcibe implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function update(Subject $subject)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ($subject-&gt;logout) &#123;</span><br><span class=\"line\">\t\t\techo &quot;你已退出，xxx... &lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> $user = new User();</span><br><span class=\"line\"> $user-&gt;attach(new LoginUpdateSubsrcibe());</span><br><span class=\"line\"> $user-&gt;attach(new LogoutUpdateSubsrcibe());</span><br><span class=\"line\"> $user-&gt;hash_update(true,true);</span><br><span class=\"line\"></span><br><span class=\"line\"> ?&gt;</span><br></pre></td></tr></table></figure>\n\n\n<iframe type=\"text/html\" width=\"100%\" height=\"385\" src=\"http://www.youtube.com/embed/gfmjMWjn-Xg\" frameborder=\"0\"></iframe>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello","published":1,"date":"2024-10-15T08:07:04.352Z","updated":"2024-10-11T09:11:37.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2a95bsa000gucq5a4b7c4zj","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-10-11T09:11:37.908Z","updated":"2024-10-11T09:11:37.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm2a95bsb000iucq51iecg42q","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"MathJax Test","date":"2017-07-29T16:00:00.000Z","_content":"\n# dynamic-tp核心流程源码解读篇\n\nby MRyan, 2023-02-18\n\n\n\n# 序. 介绍\n\n**dynamic-tp** 是一款动态线程池组件，可以实现线程池的实时动态调参及监控报警，线程池配置放在配置中心统一管理，达成业务代码零侵入，支持多配置中心的选择和常见的第三方组件的线程池的集成管理。\n\n`官网`: https://dynamictp.top/\n\n`Gitee`: https://gitee.com/dromara/dynamic-tp\n\n`Github`: https://github.com/dromara/dynamic-tp\n\n详细介绍及组件的基本使用，可以访问 dynamic-tp 官网。\n\n本文主要是对 dynamic-tp 版本 `1.1.0` 源码的分析，学习。\n\n# 1. 如何使用\n\n以选择配置中心 zookeeper 为例\n\n**引入 starter 实用**\n\n```xml\n<dependency>\n        <groupId>cn.dynamictp</groupId>\n        <artifactId>dynamic-tp-spring-boot-starter-zookeeper</artifactId>\n        <version>1.1.0</version>\n    </dependency>\n```\n\n`application.yml` 需配置 zookeeper 地址节点信息\n\nps: zookeeper 支持 properties & json 配置\n\n```yaml\n server:\n  port: 8888\n  \n spring:\n      application:\n        name: dynamic-tp-zookeeper-demo\n      dynamic:\n        tp:\n          config-type: properties         \n          zookeeper:\n            config-version: 1.0.0\n            zk-connect-str: 127.0.0.1:2181\n            root-node: /configserver/dev\n            node: dynamic-tp-zookeeper-demo\n```\n\n\n\n配置如下（详细配置相关可翻看官网学习）：\n\n```java\nspring.dynamic.tp.enabled=true\nspring.dynamic.tp.enabledBanner=true\nspring.dynamic.tp.enabledCollect=true\nspring.dynamic.tp.collectorType=logging\nspring.dynamic.tp.monitorInterval=5\nspring.dynamic.tp.executors[0].threadPoolName=tpExecutor\nspring.dynamic.tp.executors[0].corePoolSize=6\nspring.dynamic.tp.executors[0].executorType=common\nspring.dynamic.tp.executors[0].maximumPoolSize=8\nspring.dynamic.tp.executors[0].queueCapacity=200\nspring.dynamic.tp.executors[0].queueType=VariableLinkedBlockingQueue\nspring.dynamic.tp.executors[0].rejectedHandlerType=CallerRunsPolicy\nspring.dynamic.tp.executors[0].keepAliveTime=50\nspring.dynamic.tp.executors[0].allowCoreThreadTimeOut=false\nspring.dynamic.tp.executors[0].threadNamePrefix=test\nspring.dynamic.tp.executors[0].waitForTasksToCompleteOnShutdown=false\nspring.dynamic.tp.executors[0].preStartAllCoreThreads=false \n```\n\n启动类加 @EnableDynamicTp 注解\n\n```java\n@Target({ElementType.TYPE， ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(DtpBeanDefinitionRegistrar.class)\npublic @interface EnableDynamicTp {\n}\n```\n\n\n\n启动项目，运行以下测试代码\n\n```java\n// 通过依赖注入的方式获取\n@Resource\nprivate ThreadPoolExecutor tpExecutor;\n\npublic void test() {\n   tpExecutor.execute(() -> System.out.println(\"tpExecutor\"));\n}\n```\n\n或者\n\n```java\npublic static void main(String[] args) {\n   // 通过 DtpRegistry 手动获取\n   DtpExecutor dtpExecutor = DtpRegistry.getExecutor(\"tpExecutor\");\n   dtpExecutor.execute(() -> System.out.println(\"tpExecutor\"));\n}\n```\n\n后续在程序正常运行中，只需要修改配置客户端监听到节点变更，自动拉取最新的线程池配置并刷新，即可完成线程池的动态调参功能。\n\n\n\n如果想普通的 JUC 线程池集成在 dynamic-tp 监控体系中，可以 @Bean 定义时加 @DynamicTp 注解。\n\n例如：\n\n```java\n    @DynamicTp(\"tpExecutor\")\n    @Bean\n    public ThreadPoolExecutor tpExecutor() {\n        return (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n    }\n```\n\n\n\n是不是非常容易上手，非常方便食用，那 dynamic-tp 是如何支持配置化，如何实现修改配置后线程池动态调参，它如何设计的呢，下面我们来分析下。\n\n# 2. 源码分析\n\n**前置知识点**：对 Java 线程池不是很了解的可以看下这篇文章[《深入Java线程池》](https://www.wormholestack.com/archives/668/)\n\n在分析源码之前，我们先来思考下如果是我们来实现 `动态线程池组件` 应该如何设计。\n\n@ 首先不论是硬编码的线程池还是通过配置化动态生成的线程池都是一类线程池（同一基类），而这一类线程池的参数可以抽象成`配置`，这个`配置`既可以是本项目中的文件；也可以是任意远程端口的文件，例如包括业界的配置中心们例如 nacos，zookeeper，apollo，etcd 等；当然它甚至可以不依赖配置中心，通过前端管理系统页面配置，走DB，通过刷新 API 接口中的 String 类型的文本配置，进而刷新线程池配置，这也是一种实现思路。\n\n@ 提供一个功能入口可以将`配置`构造成一个线程池对象，内部维护一个线程池注册表，将`配置`对应的线程池添加至注册表中。\n\n@ 实例化线程池对象，Spring 环境则注入依赖 Bean，以供 IOC 容器使用。\n\n@ 项目启动时首先先加载`配置`实例化线程池对象\n\n@ 如果`配置`指向的是远端配置中心，则注册监听器，当远端注册配置中心刷新时回调，当前系统监听到回调刷新`配置`，刷新线程池（动态调参），刷新本地线程池注册表。\n\n\n\n至此我们设计出来的`简易动态线程池组件`应该可以基本使用了。\n\n其实`简易动态线程池组件`还有很多进步的空间，例如线程池调参监控，异常报警等。\n\n当然以上说的这些基础功能以及额外的高级功能，dynamic-tp 都已经实现了，不过它目前没有提供支持我们刚刚所说通过管理系统页面配置走 DB 通过接口刷新的官方实现，且不支持除配置中心应用外的选择，也就是说无配置中心应用，目前不支持线程池动态调参（但支持监控）,但事实上你可以根据它提供的 SPI 自行实现。\n这可能 dynamic-tp 定位是轻量级动态线程池组件，且配置中心是现在大多数互联网系统都会使用的组件有关。\n\n接下来我们来通过分析源码来看它是如何具体实现的。\n\n\n\n## 2.1 配置\n\ndynamic-tp 通过 DtpProperties 来做`配置`的统一收口，这个配置包括本地文件或者配置中心中的文件(properties，json，yml，txt，xml)\n\n代码如下：\n\n可以看到目前已支持 Nacos、Apollo、Zookeeper、Consul、Etcd 配置中心\n\n```java\n@Slf4j\n@Data\n@ConfigurationProperties(prefix = DynamicTpConst.MAIN_PROPERTIES_PREFIX)\npublic class DtpProperties {\n\n    /**\n     * If enabled DynamicTp.\n     */\n    private boolean enabled = true;\n\n    /**\n     * If print banner.\n     */\n    private boolean enabledBanner = true;\n\n    /**\n     * Nacos config.\n     */\n    private Nacos nacos;\n\n    /**\n     * Apollo config.\n     */\n    private Apollo apollo;\n\n    /**\n     * Zookeeper config.\n     */\n    private Zookeeper zookeeper;\n\n    /**\n     * Etcd config.\n     */\n    private Etcd etcd;\n\n    /**\n     * Config file type.\n     */\n    private String configType = \"yml\";\n\n    /**\n     * If enabled metrics collect.\n     */\n    private boolean enabledCollect = false;\n\n    /**\n     * Metrics collector types， default is logging.\n     */\n    private List<String> collectorTypes = Lists.newArrayList(MICROMETER.name());\n\n    /**\n     * Metrics log storage path， just for \"logging\" type.\n     */\n    private String logPath;\n\n    /**\n     * Monitor interval， time unit（s）\n     */\n    private int monitorInterval = 5;\n\n    /**\n     * ThreadPoolExecutor configs.\n     */\n    private List<ThreadPoolProperties> executors;\n\n    /**\n     * Tomcat worker thread pool.\n     */\n    private SimpleTpProperties tomcatTp;\n\n    /**\n     * Jetty thread pool.\n     */\n    private SimpleTpProperties jettyTp;\n\n    /**\n     * Undertow thread pool.\n     */\n    private SimpleTpProperties undertowTp;\n\n    /**\n     * Dubbo thread pools.\n     */\n    private List<SimpleTpProperties> dubboTp;\n\n    /**\n     * Hystrix thread pools.\n     */\n    private List<SimpleTpProperties> hystrixTp;\n\n    /**\n     * RocketMq thread pools.\n     */\n    private List<SimpleTpProperties> rocketMqTp;\n\n    /**\n     * Grpc thread pools.\n     */\n    private List<SimpleTpProperties> grpcTp;\n\n    /**\n     * Motan server thread pools.\n     */\n    private List<SimpleTpProperties> motanTp;\n\n    /**\n     * Okhttp3 thread pools.\n     */\n    private List<SimpleTpProperties> okhttp3Tp;\n\n    /**\n     * Brpc thread pools.\n     */\n    private List<SimpleTpProperties> brpcTp;\n\n    /**\n     * Tars thread pools.\n     */\n    private List<SimpleTpProperties> tarsTp;\n\n    /**\n     * Sofa thread pools.\n     */\n    private List<SimpleTpProperties> sofaTp;\n\n    /**\n     * Notify platform configs.\n     */\n    private List<NotifyPlatform> platforms;\n\n    @Data\n    public static class Nacos {\n\n        private String dataId;\n\n        private String group;\n\n        private String namespace;\n    }\n\n    @Data\n    public static class Apollo {\n\n        private String namespace;\n    }\n\n    @Data\n    public static class Zookeeper {\n\n        private String zkConnectStr;\n\n        private String configVersion;\n\n        private String rootNode;\n\n        private String node;\n\n        private String configKey;\n    }\n\n    /**\n     * Etcd config.\n     */\n    @Data\n    public static class Etcd {\n\n        private String endpoints;\n\n        private String user;\n\n        private String password;\n\n        private String charset = \"UTF-8\";\n\n        private Boolean authEnable = false;\n\n        private String authority = \"ssl\";\n\n        private String key;\n    }\n}\n```\n\n项目中提供了一个配置解析接口 `ConfigParser`\n\n```java\npublic interface ConfigParser {\n\n      // 是否支持配置解析\n    boolean supports(ConfigFileTypeEnum type);\n        \n      // 解析支持的类型\n    List<ConfigFileTypeEnum> types();\n\n      // 解析\n    Map<Object， Object> doParse(String content) throws IOException;\n    \n        // 解析指定前缀\n    Map<Object， Object> doParse(String content， String prefix) throws IOException;\n}\n```\n\nConfigFileTypeEnum 如下，覆盖了主流文件类型\n\n```java\n@Getter\npublic enum ConfigFileTypeEnum {\n    PROPERTIES(\"properties\")，\n    XML(\"xml\")，\n    JSON(\"json\")，\n    YML(\"yml\")，\n    YAML(\"yaml\")，\n    TXT(\"txt\");\n}\n```\n\n项目中实现了配置解析基类，以及默认提供了 3 中文件类型配置解析类，json，properties以及yaml，使用者完全可以通过继承 AbstractConfigParser 来补充配置解析模式。\n\n[![image-20230217231356426](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png)\n\nAbstractConfigParser 代码如下，模板方法由子类实现具体的解析逻辑。\n\n```java\npublic abstract class AbstractConfigParser implements ConfigParser {\n\n    @Override\n    public boolean supports(ConfigFileTypeEnum type) {\n        return this.types().contains(type);\n    }\n\n    @Override\n    public Map<Object， Object> doParse(String content， String prefix) throws IOException {\n        return doParse(content);\n    }\n}\n```\n\n子类的实现这里就不看了，大差不差就是通过读取文件，解析每一行配置项，最后将结果封装成Map<Object， Object> result 返回。\n\n\n\n接着通过 Spring-bind 提供的解析方法 将 Map<Object， Object> result 绑定到 DtpProperties 配置类上\n\n实现代码如下:\n\n```java\npublic class PropertiesBinder {\n\n    private PropertiesBinder() { }\n\n    public static void bindDtpProperties(Map<?， Object> properties， DtpProperties dtpProperties) {\n        ConfigurationPropertySource sources = new MapConfigurationPropertySource(properties);\n        Binder binder = new Binder(sources);\n        ResolvableType type = ResolvableType.forClass(DtpProperties.class);\n        Bindable<?> target = Bindable.of(type).withExistingValue(dtpProperties);\n        binder.bind(MAIN_PROPERTIES_PREFIX， target);\n    }\n\n    public static void bindDtpProperties(Environment environment， DtpProperties dtpProperties) {\n        Binder binder = Binder.get(environment);\n        ResolvableType type = ResolvableType.forClass(DtpProperties.class);\n        Bindable<?> target = Bindable.of(type).withExistingValue(dtpProperties);\n        binder.bind(MAIN_PROPERTIES_PREFIX， target);\n    }\n}\n```\n\n到这里已经拿到了`配置`，我们来看接下来的流程。\n\n## 2.2 注册线程池\n\nDtpBeanDefinitionRegistrar 实现了 ConfigurationClassPostProcessor 利用 Spring 的动态注册 bean 机制，在 bean 初始化 之前 注册 BeanDefinition 以达到注入 bean 的目的\n\n**ps**：最终被 Spring ConfigurationClassPostProcessor 执行出来 对这块不熟悉的小伙伴可以去翻看 Spring 源码。\n\n来看下 DtpBeanDefinitionRegistrar 具体做了什么吧\n\n```java\n@Slf4j\npublic class DtpBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar， EnvironmentAware {\n\n    private Environment environment;\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        this.environment = environment;\n    }\n\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata， BeanDefinitionRegistry registry) {\n        DtpProperties dtpProperties = new DtpProperties();\n        // 从 Environment 读取配置信息绑定到 DtpProperties\n        PropertiesBinder.bindDtpProperties(environment， dtpProperties);\n        // 获取配置文件中配置的线程池\n        val executors = dtpProperties.getExecutors();\n        if (CollectionUtils.isEmpty(executors)) {\n            log.warn(\"DynamicTp registrar， no executors are configured.\");\n            return;\n        }\n        // 遍历并注册线程池 BeanDefinition\n        executors.forEach(x -> {\n            // 类型选择，common->DtpExecutor，eager->EagerDtpExecutor \n            Class<?> executorTypeClass = ExecutorType.getClass(x.getExecutorType());\n            // 通过 ThreadPoolProperties 来构造线程池所需要的属性\n            Map<String， Object> properties = buildPropertyValues(x);\n            Object[] args = buildConstructorArgs(executorTypeClass， x);\n            // 工具类 BeanDefinition 注册 Bean 相当于手动用 @Bean 声明线程池对象\n            BeanUtil.registerIfAbsent(registry， x.getThreadPoolName()， executorTypeClass， properties， args);\n        });\n    }\n}\n```\n\nregisterBeanDefinitions 方法中主要做了这么几件事\n\n1. 从 Environment 读取配置信息绑定到 DtpProperties\n2. 获取配置文件中配置的线程池，如果没有则结束\n3. 遍历线程池，绑定配置构造线程池所需要的属性，根据配置中的 executorType 注册不同类型的线程池 Bean(下面会说)\n4. BeanUtil#registerIfAbsent() 注册 Bean\n\n`ExecutorType` 目前项目支持 3 种类型，分别对应 3 个线程池，这里先跳过，我们下文详细介绍\n\n[![image-20230218092135653](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png)\n\n回到刚才的步骤，接下来通过 ThreadPoolProperties 来构造线程池所需要的属性\n\n```java\n private Map<String， Object> buildPropertyValues(ThreadPoolProperties tpp) {\n        Map<String， Object> properties = Maps.newHashMap();\n        properties.put(THREAD_POOL_NAME， tpp.getThreadPoolName());\n        properties.put(THREAD_POOL_ALIAS_NAME， tpp.getThreadPoolAliasName());\n        properties.put(ALLOW_CORE_THREAD_TIMEOUT， tpp.isAllowCoreThreadTimeOut());\n        properties.put(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN， tpp.isWaitForTasksToCompleteOnShutdown());\n        properties.put(AWAIT_TERMINATION_SECONDS， tpp.getAwaitTerminationSeconds());\n        properties.put(PRE_START_ALL_CORE_THREADS， tpp.isPreStartAllCoreThreads());\n        properties.put(RUN_TIMEOUT， tpp.getRunTimeout());\n        properties.put(QUEUE_TIMEOUT， tpp.getQueueTimeout());\n\n        val notifyItems = mergeAllNotifyItems(tpp.getNotifyItems());\n        properties.put(NOTIFY_ITEMS， notifyItems);\n        properties.put(NOTIFY_ENABLED， tpp.isNotifyEnabled());\n\n        val taskWrappers = TaskWrappers.getInstance().getByNames(tpp.getTaskWrapperNames());\n        properties.put(TASK_WRAPPERS， taskWrappers);\n\n        return properties;\n    }\n```\n\n选择阻塞队列，这里针对 EagerDtpExecutor 做了单独处理，选择了 TaskQueue 作为阻塞队列(下文说明)\n\n```java\n   private Object[] buildConstructorArgs(Class<?> clazz， ThreadPoolProperties tpp) {\n\n        BlockingQueue<Runnable> taskQueue;\n        // 如果是 EagerDtpExecutor 的话，对工作队列就是 TaskQueue\n        if (clazz.equals(EagerDtpExecutor.class)) {\n            taskQueue = new TaskQueue(tpp.getQueueCapacity());\n        } else {\n            // 不是 EagerDtpExecutor的话，就根据配置中的 queueType 来选择阻塞的队列\n            taskQueue = buildLbq(tpp.getQueueType()， tpp.getQueueCapacity()， tpp.isFair()， tpp.getMaxFreeMemory());\n        }\n\n        return new Object[]{\n                tpp.getCorePoolSize()，\n                tpp.getMaximumPoolSize()，\n                tpp.getKeepAliveTime()，\n                tpp.getUnit()，\n                taskQueue，\n                new NamedThreadFactory(tpp.getThreadNamePrefix())，\n                RejectHandlerGetter.buildRejectedHandler(tpp.getRejectedHandlerType())\n        };\n    }\n```\n\n非 EagerDtpExecutor 则根据配置中的 queueType 来选择阻塞的队列\n\n```java\n    public static BlockingQueue<Runnable> buildLbq(String name， int capacity， boolean fair， int maxFreeMemory) {\n        BlockingQueue<Runnable> blockingQueue = null;\n        if (Objects.equals(name， ARRAY_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new ArrayBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new LinkedBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， PRIORITY_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new PriorityBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， DELAY_QUEUE.getName())) {\n            blockingQueue = new DelayQueue();\n        } else if (Objects.equals(name， SYNCHRONOUS_QUEUE.getName())) {\n            blockingQueue = new SynchronousQueue<>(fair);\n        } else if (Objects.equals(name， LINKED_TRANSFER_QUEUE.getName())) {\n            blockingQueue = new LinkedTransferQueue<>();\n        } else if (Objects.equals(name， LINKED_BLOCKING_DEQUE.getName())) {\n            blockingQueue = new LinkedBlockingDeque<>(capacity);\n        } else if (Objects.equals(name， VARIABLE_LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new VariableLinkedBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， MEMORY_SAFE_LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new MemorySafeLinkedBlockingQueue<>(capacity， maxFreeMemory * M_1);\n        }\n        if (blockingQueue != null) {\n            return blockingQueue;\n        }\n\n        log.error(\"Cannot find specified BlockingQueue {}\"， name);\n        throw new DtpException(\"Cannot find specified BlockingQueue \" + name);\n    }\n```\n\n到这里我们已经构造好了创建一个线程池需要的所有参数\n\n调用 BeanUtil#registerIfAbsent()，先判断是否同名 bean，如果同名先删除后注入。\n\n```java\n@Slf4j\npublic final class BeanUtil {\n\n    private BeanUtil() { }\n\n    public static void registerIfAbsent(BeanDefinitionRegistry registry，\n                                        String beanName，\n                                        Class<?> clazz，\n                                        Map<String， Object> properties，\n                                        Object... constructorArgs) {\n          // 如果存在同名bean，先删除后重新注入bean\n        if (ifPresent(registry， beanName， clazz) || registry.containsBeanDefinition(beanName)) {\n            log.warn(\"DynamicTp registrar， bean definition already exists， overrides with remote config， beanName: {}\"，\n                    beanName);\n            registry.removeBeanDefinition(beanName);\n        }\n        doRegister(registry， beanName， clazz， properties， constructorArgs);\n    }\n\n\n    /**\n     * 注册Bean 相当于手动用 @Bean 声明线程池对象\n     * @param registry\n     * @param beanName\n     * @param clazz\n     * @param properties\n     * @param constructorArgs\n     */\n    public static void doRegister(BeanDefinitionRegistry registry，\n                                  String beanName，\n                                  Class<?> clazz，\n                                  Map<String， Object> properties，\n                                  Object... constructorArgs) {\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(clazz);\n        for (Object constructorArg : constructorArgs) {\n            builder.addConstructorArgValue(constructorArg);\n        }\n        if (MapUtils.isNotEmpty(properties)) {\n            properties.forEach(builder::addPropertyValue);\n        }\n                // 注册 Bean \n        registry.registerBeanDefinition(beanName， builder.getBeanDefinition());\n    }\n}\n```\n\n至此线程池对象已经交由 IOC 容器管理了。\n\n\n\n我们的线程池对象总不能无脑塞入 IOC 容器就不管了吧，肯定是要留根的，也就是需要一个线程池注册表，记录有哪些线程池是受 dynamic-tp 托管的，这样除了可以进行统计外，也就可以实现通知报警了。\n\n\n\n下面我们来看下项目是如何实现注册表的\n\n## 2.3 注册表\n\n`DtpPostProcessor` 利用了 Spring 容器启动 BeanPostProcessor 机制增强机制，在 bean 初始化的时候调用 postProcessAfterInitialization，它实现了获取被 IOC 容器托管的线程池 bean 然后注册到本地的注册表中。\n\n代码实现如下:\n\n```java\n@Slf4j\npublic class DtpPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessAfterInitialization(@NonNull Object bean， @NonNull String beanName) throws BeansException {\n        // 只增强线程池相关的类\n        if (!(bean instanceof ThreadPoolExecutor) && !(bean instanceof ThreadPoolTaskExecutor)) {\n            return bean;\n        }\n\n        // 如果是 DtpExecutor 类型注册到注册表 DTP_REGISTRY\n        if (bean instanceof DtpExecutor) {\n            DtpExecutor dtpExecutor = (DtpExecutor) bean;\n            if (bean instanceof EagerDtpExecutor) {\n                ((TaskQueue) dtpExecutor.getQueue()).setExecutor((EagerDtpExecutor) dtpExecutor);\n            }\n            registerDtp(dtpExecutor);\n            return dtpExecutor;\n        }\n\n        // 获取上下文\n        ApplicationContext applicationContext = ApplicationContextHolder.getInstance();\n        String dtpAnnotationVal;\n        try {\n            // 读取标注 @DynamicTp 注解的 bean 则为基本线程池，但受组件管理监控\n            DynamicTp dynamicTp = applicationContext.findAnnotationOnBean(beanName， DynamicTp.class);\n            if (Objects.nonNull(dynamicTp)) {\n                dtpAnnotationVal = dynamicTp.value();\n            } else {\n                BeanDefinitionRegistry registry = (BeanDefinitionRegistry) applicationContext;\n                AnnotatedBeanDefinition annotatedBeanDefinition = (AnnotatedBeanDefinition) registry.getBeanDefinition(beanName);\n                MethodMetadata methodMetadata = (MethodMetadata) annotatedBeanDefinition.getSource();\n                if (Objects.isNull(methodMetadata) || !methodMetadata.isAnnotated(DynamicTp.class.getName())) {\n                    return bean;\n                }\n                dtpAnnotationVal = Optional.ofNullable(methodMetadata.getAnnotationAttributes(DynamicTp.class.getName()))\n                        .orElse(Collections.emptyMap())\n                        .getOrDefault(\"value\"， \"\")\n                        .toString();\n            }\n        } catch (NoSuchBeanDefinitionException e) {\n            log.error(\"There is no bean with the given name {}\"， beanName， e);\n            return bean;\n        }\n\n        // 如果说bean上面的DynamicTp注解，使用注解的值作为线程池的名称，没有的话就使用bean的名称\n        String poolName = StringUtils.isNotBlank(dtpAnnotationVal) ? dtpAnnotationVal : beanName;\n        if (bean instanceof ThreadPoolTaskExecutor) {\n              // 注册到注册表 COMMON_REGISTRY\n            ThreadPoolTaskExecutor taskExecutor = (ThreadPoolTaskExecutor) bean;\n            registerCommon(poolName， taskExecutor.getThreadPoolExecutor());\n        } else {\n            registerCommon(poolName， (ThreadPoolExecutor) bean);\n        }\n        return bean;\n    }\n\n    /**\n     * 动态线程池注册 向 Map 集合 put 元素\n     *\n     * @param executor\n     */\n    private void registerDtp(DtpExecutor executor) {\n        DtpRegistry.registerDtp(executor， \"beanPostProcessor\");\n    }\n\n    /**\n     * 非动态线程池注册 向 Map 集合 put 元素\n     *\n     * @param poolName\n     * @param executor\n     */\n    private void registerCommon(String poolName， ThreadPoolExecutor executor) {\n        ExecutorWrapper wrapper = new ExecutorWrapper(poolName， executor);\n        DtpRegistry.registerCommon(wrapper， \"beanPostProcessor\");\n    }\n}\n```\n\n简单总结下，和刚刚我们分析完全一致\n\n1. 获取到 bean 后，如果是非线程池类型则结束。\n2. 如果是 DtpExecutor 则注册到 DTP_REGISTRY 注册表中\n3. 如果是 非动态线程池且标注了 @DynamicTp 注解则注册到 COMMON_REGISTRY 注册表中\n4. 如果是 非动态线程池且未标注 @DynamicTp 注解则结束不做增强\n\n\n\nDtpRegistry 主要负责 注册、获取、刷新某个动态线程池（刷新线程池我们会下文分析）\n\n```java\n@Slf4j\npublic class DtpRegistry implements ApplicationRunner， Ordered {\n\n    /**\n     * Maintain all automatically registered and manually registered DtpExecutors.\n     * 动态线程池 key为线程池name\n     * DtpExecutor ThreadPoolExecutor加强版\n     */\n    private static final Map<String， DtpExecutor> DTP_REGISTRY = new ConcurrentHashMap<>();\n\n    /**\n     * Maintain all automatically registered and manually registered JUC ThreadPoolExecutors.\n     * <p>\n     * 标有DynamicTp注解的线程池\n     */\n    private static final Map<String， ExecutorWrapper> COMMON_REGISTRY = new ConcurrentHashMap<>();\n\n    private static final Equator EQUATOR = new GetterBaseEquator();\n\n    /**\n     * 配置文件映射\n     */\n    private static DtpProperties dtpProperties;\n\n    public static List<String> listAllDtpNames() {\n        return Lists.newArrayList(DTP_REGISTRY.keySet());\n    }\n\n    public static List<String> listAllCommonNames() {\n        return Lists.newArrayList(COMMON_REGISTRY.keySet());\n    }\n\n    public static void registerDtp(DtpExecutor executor， String source) {\n        log.info(\"DynamicTp register dtpExecutor， source: {}， executor: {}\"，\n                source， ExecutorConverter.convert(executor));\n        DTP_REGISTRY.putIfAbsent(executor.getThreadPoolName()， executor);\n    }\n\n    public static void registerCommon(ExecutorWrapper wrapper， String source) {\n        log.info(\"DynamicTp register commonExecutor， source: {}， name: {}\"， source， wrapper.getThreadPoolName());\n        COMMON_REGISTRY.putIfAbsent(wrapper.getThreadPoolName()， wrapper);\n    }\n\n    public static DtpExecutor getDtpExecutor(final String name) {\n        val executor = DTP_REGISTRY.get(name);\n        if (Objects.isNull(executor)) {\n            log.error(\"Cannot find a specified dtpExecutor， name: {}\"， name);\n            throw new DtpException(\"Cannot find a specified dtpExecutor， name: \" + name);\n        }\n        return executor;\n    }\n\n    public static ExecutorWrapper getCommonExecutor(final String name) {\n        val executor = COMMON_REGISTRY.get(name);\n        if (Objects.isNull(executor)) {\n            log.error(\"Cannot find a specified commonExecutor， name: {}\"， name);\n            throw new DtpException(\"Cannot find a specified commonExecutor， name: \" + name);\n        }\n        return executor;\n    }\n  \n    @Autowired\n    public void setDtpProperties(DtpProperties dtpProperties) {\n        DtpRegistry.dtpProperties = dtpProperties;\n    }\n\n    @Override\n    public void run(ApplicationArguments args) {\n        // 线程池名称\n        Set<String> remoteExecutors = Collections.emptySet();\n        // 获取配置文件中配置的线程池\n        if (CollectionUtils.isNotEmpty(dtpProperties.getExecutors())) {\n            remoteExecutors = dtpProperties.getExecutors().stream()\n                    .map(ThreadPoolProperties::getThreadPoolName)\n                    .collect(Collectors.toSet());\n        }\n        // DTP_REGISTRY 中已经注册的线程池\n        val registeredDtpExecutors = Sets.newHashSet(DTP_REGISTRY.keySet());\n        // 找出所有线程池中没有在配置文件中配置的线程池\n        val localDtpExecutors = CollectionUtils.subtract(registeredDtpExecutors， remoteExecutors);\n        // 日志\n        log.info(\"DtpRegistry initialization is complete， remote dtpExecutors: {}， local dtpExecutors: {}， local commonExecutors: {}\"，\n                remoteExecutors， localDtpExecutors， COMMON_REGISTRY.keySet());\n    }\n\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE + 1;\n    }\n}\n```\n\n代码比较简单，这里不再说明了。\n\n流程至此，动态线程池，标注了 @DynamicTp 注解的线程池，都已经准备就绪了。\n\n你可能会问那配置刷新 配置刷新动态调参是如何实现的呢，别急，我们继续分析。\n\n## 2.4 配置刷新 动态调参\n\nDynamic-tp 提供了配置刷新接口 Refresher，和基类 AbstractRefresher，支持不同配置中心的刷新基类，甚至完全可以自行扩展，其原理其实就是当配置中心监听到配置文件的变动后，解析配置文件，刷新配置文件，最后通过 Spring ApplicationListener 机制发送 RefreshEvent 刷新事件，由对应的 Adapter 来处理。\n\n```java\npublic interface Refresher {\n\n    /**\n     * Refresh with specify content.\n     *\n     * @param content content\n     * @param fileType file type\n     */\n    void refresh(String content， ConfigFileTypeEnum fileType);\n}\n```\n\n[![image-20230218103556728](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png)\n\n```java\n@Slf4j\npublic abstract class AbstractRefresher implements Refresher {\n\n    @Resource\n    protected DtpProperties dtpProperties;\n\n    @Override\n    public void refresh(String content， ConfigFileTypeEnum fileType) {\n\n        if (StringUtils.isBlank(content) || Objects.isNull(fileType)) {\n            log.warn(\"DynamicTp refresh， empty content or null fileType.\");\n            return;\n        }\n\n        try {\n            val configHandler = ConfigHandler.getInstance();\n            val properties = configHandler.parseConfig(content， fileType);\n            doRefresh(properties);\n        } catch (IOException e) {\n            log.error(\"DynamicTp refresh error， content: {}， fileType: {}\"， content， fileType， e);\n        }\n    }\n\n    protected void doRefresh(Map<Object， Object> properties) {\n        if (MapUtils.isEmpty(properties)) {\n            log.warn(\"DynamicTp refresh， empty properties.\");\n            return;\n        }\n        // 将发生变化的属性绑定到DtpProperties对象上\n        PropertiesBinder.bindDtpProperties(properties， dtpProperties);\n        // 更新线程池属性\n        doRefresh(dtpProperties);\n    }\n\n    protected void doRefresh(DtpProperties dtpProperties) {\n        DtpRegistry.refresh(dtpProperties);\n        publishEvent(dtpProperties);\n    }\n\n    private void publishEvent(DtpProperties dtpProperties) {\n        RefreshEvent event = new RefreshEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n}\n```\n\n接下来我们以 Zookeeper 为配置中心举例说明，代码如下。\n\n```java\n@Slf4j\npublic class ZookeeperRefresher extends AbstractRefresher implements EnvironmentAware， InitializingBean {\n\n    @Override\n    public void afterPropertiesSet() {\n\n        final ConnectionStateListener connectionStateListener = (client， newState) -> {\n            // 连接变更\n            if (newState == ConnectionState.RECONNECTED) {\n                loadAndRefresh();\n            }\n        };\n\n        final CuratorListener curatorListener = (client， curatorEvent) -> {\n            final WatchedEvent watchedEvent = curatorEvent.getWatchedEvent();\n            if (null != watchedEvent) {\n                switch (watchedEvent.getType()) {\n                    // 监听节点变更\n                    case NodeChildrenChanged:\n                    case NodeDataChanged:\n                        // 刷新\n                        loadAndRefresh();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        CuratorFramework curatorFramework = CuratorUtil.getCuratorFramework(dtpProperties);\n        String nodePath = CuratorUtil.nodePath(dtpProperties);\n\n        curatorFramework.getConnectionStateListenable().addListener(connectionStateListener);\n        curatorFramework.getCuratorListenable().addListener(curatorListener);\n\n        log.info(\"DynamicTp refresher， add listener success， nodePath: {}\"， nodePath);\n    }\n\n    /**\n     * load config and refresh\n     */\n    private void loadAndRefresh() {\n        doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));\n    }\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        ConfigurableEnvironment env = ((ConfigurableEnvironment) environment);\n        env.getPropertySources().remove(ZK_PROPERTY_SOURCE_NAME);\n    }\n}\n```\n\n利用了 Spring 机制，实现了 InitializingBean 并重写 afterPropertiesSet，在 Bean 实例化完成之后会被自动调用，在这期间针对 Zookeeper 连接，节点变更监听器进行注册，监听连接变更和节点变更后执行刷新操作。\n\n`doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));`实现由基类统一处理，解析配置并绑定 DtpProperties 上，执行 DtpRegistry#refresh() 刷新后发布一个 RefreshEvent 事件。\n\n```java\n    protected void doRefresh(Map<Object， Object> properties) {\n        if (MapUtils.isEmpty(properties)) {\n            log.warn(\"DynamicTp refresh， empty properties.\");\n            return;\n        }\n        // 解析配置并绑定 DtpProperties 上\n        PropertiesBinder.bindDtpProperties(properties， dtpProperties);\n        // 更新线程池属性\n        doRefresh(dtpProperties);\n    }\n\n    protected void doRefresh(DtpProperties dtpProperties) {\n        DtpRegistry.refresh(dtpProperties);\n        publishEvent(dtpProperties);\n    }\n\n    private void publishEvent(DtpProperties dtpProperties) {\n        RefreshEvent event = new RefreshEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n```\n\n来看 DtpRegistry#refresh() 的实现，代码如下：\n\n```java\npublic static void refresh(DtpProperties properties) {\n        if (Objects.isNull(properties) || CollectionUtils.isEmpty(properties.getExecutors())) {\n            log.warn(\"DynamicTp refresh， empty threadPoolProperties.\");\n            return;\n        }\n        // 属性不为空 从属性中拿到所有的线程池属性配置\n        properties.getExecutors().forEach(x -> {\n            if (StringUtils.isBlank(x.getThreadPoolName())) {\n                log.warn(\"DynamicTp refresh， threadPoolName must not be empty.\");\n                return;\n            }\n            // 从 DTP_REGISTRY 线程注册池表中拿到对应的线程池对象\n            val dtpExecutor = DTP_REGISTRY.get(x.getThreadPoolName());\n            if (Objects.isNull(dtpExecutor)) {\n                log.warn(\"DynamicTp refresh， cannot find specified dtpExecutor， name: {}.\"， x.getThreadPoolName());\n                return;\n            }\n            // 刷新 更新线程池对象\n            refresh(dtpExecutor， x);\n        });\n    }\nprivate static void refresh(DtpExecutor executor， ThreadPoolProperties properties) {\n        // 参数合法校验\n        if (properties.getCorePoolSize() < 0\n                || properties.getMaximumPoolSize() <= 0\n                || properties.getMaximumPoolSize() < properties.getCorePoolSize()\n                || properties.getKeepAliveTime() < 0) {\n            log.error(\"DynamicTp refresh， invalid parameters exist， properties: {}\"， properties);\n            return;\n        }\n        // 线程池旧配置\n        DtpMainProp oldProp = ExecutorConverter.convert(executor);\n        // 真正开始刷新\n        doRefresh(executor， properties);\n        // 线程池新配置\n        DtpMainProp newProp = ExecutorConverter.convert(executor);\n        // 相等不作处理\n        if (oldProp.equals(newProp)) {\n            log.warn(\"DynamicTp refresh， main properties of [{}] have not changed.\"， executor.getThreadPoolName());\n            return;\n        }\n        List<FieldInfo> diffFields = EQUATOR.getDiffFields(oldProp， newProp);\n        List<String> diffKeys = diffFields.stream().map(FieldInfo::getFieldName).collect(toList());\n        // 线程池参数变更 平台提醒\n        NoticeManager.doNoticeAsync(new ExecutorWrapper(executor)， oldProp， diffKeys);\n        // 更新参数 日志打印\n        log.info(\"DynamicTp refresh， name: [{}]， changed keys: {}， corePoolSize: [{}]， maxPoolSize: [{}]， queueType: [{}]， \" +\n                        \"queueCapacity: [{}]， keepAliveTime: [{}]， rejectedType: [{}]， allowsCoreThreadTimeOut: [{}]\"，\n                executor.getThreadPoolName()，\n                diffKeys，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getCorePoolSize()， newProp.getCorePoolSize())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getMaxPoolSize()， newProp.getMaxPoolSize())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueType()， newProp.getQueueType())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueCapacity()， newProp.getQueueCapacity())，\n                String.format(\"%ss => %ss\"， oldProp.getKeepAliveTime()， newProp.getKeepAliveTime())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getRejectType()， newProp.getRejectType())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.isAllowCoreThreadTimeOut()，\n                        newProp.isAllowCoreThreadTimeOut()));\n    }\n```\n\n总结一下上述代码无非做了这么几件事\n\n1. 参数合法校验\n2. 获取到线程池旧配置\n3. 执行刷新\n4. 获取到线程池新配置\n5. 如果新旧配置相同，则证明没有改动，不做处理\n6. 否则线程池变更发送通知，并记录变更日志(ps：通知相关处理下文会说，这里先跳过)\n\n\n\ndoRefresh 真正执行线程池的刷新，也依靠于 JUC 原生线程池支持动态属性变更。\n\n```java\nprivate static void doRefresh(DtpExecutor dtpExecutor， ThreadPoolProperties properties) {\n        // 调用相应的setXXX方法更新线程池参数\n        doRefreshPoolSize(dtpExecutor， properties);\n        if (!Objects.equals(dtpExecutor.getKeepAliveTime(properties.getUnit())， properties.getKeepAliveTime())) {\n            dtpExecutor.setKeepAliveTime(properties.getKeepAliveTime()， properties.getUnit());\n        }\n\n        if (!Objects.equals(dtpExecutor.allowsCoreThreadTimeOut()， properties.isAllowCoreThreadTimeOut())) {\n            dtpExecutor.allowCoreThreadTimeOut(properties.isAllowCoreThreadTimeOut());\n        }\n\n        // update reject handler\n        if (!Objects.equals(dtpExecutor.getRejectHandlerName()， properties.getRejectedHandlerType())) {\n            dtpExecutor.setRejectedExecutionHandler(RejectHandlerGetter.getProxy(properties.getRejectedHandlerType()));\n            dtpExecutor.setRejectHandlerName(properties.getRejectedHandlerType());\n        }\n\n        // update Alias Name\n        if (!Objects.equals(dtpExecutor.getThreadPoolAliasName()， properties.getThreadPoolAliasName())) {\n            dtpExecutor.setThreadPoolAliasName(properties.getThreadPoolAliasName());\n        }\n\n        updateQueueProp(properties， dtpExecutor);\n        dtpExecutor.setWaitForTasksToCompleteOnShutdown(properties.isWaitForTasksToCompleteOnShutdown());\n        dtpExecutor.setAwaitTerminationSeconds(properties.getAwaitTerminationSeconds());\n        dtpExecutor.setPreStartAllCoreThreads(properties.isPreStartAllCoreThreads());\n        dtpExecutor.setRunTimeout(properties.getRunTimeout());\n        dtpExecutor.setQueueTimeout(properties.getQueueTimeout());\n\n        List<TaskWrapper> taskWrappers = TaskWrappers.getInstance().getByNames(properties.getTaskWrapperNames());\n        dtpExecutor.setTaskWrappers(taskWrappers);\n\n        // update notify items\n        val allNotifyItems = mergeAllNotifyItems(properties.getNotifyItems());\n        // 刷新通知平台\n        NotifyHelper.refreshNotify(dtpExecutor.getThreadPoolName()， dtpProperties.getPlatforms()，\n                dtpExecutor.getNotifyItems()， allNotifyItems);\n        dtpExecutor.setNotifyItems(allNotifyItems);\n        dtpExecutor.setNotifyEnabled(properties.isNotifyEnabled());\n    }\n```\n\ndoRefreshPoolSize 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改\n\n```java\n   private static void doRefreshPoolSize(ThreadPoolExecutor dtpExecutor， ThreadPoolProperties properties) {\n        // 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改\n        if (properties.getMaximumPoolSize() < dtpExecutor.getMaximumPoolSize()) {\n            if (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) {\n                dtpExecutor.setCorePoolSize(properties.getCorePoolSize());\n            }\n            if (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) {\n                dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());\n            }\n            return;\n        }\n        if (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) {\n            dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());\n        }\n        if (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) {\n            dtpExecutor.setCorePoolSize(properties.getCorePoolSize());\n        }\n    }\n```\n\nupdateQueueProp 更新线程池阻塞队列大小\n\n```java\n private static void updateQueueProp(ThreadPoolProperties properties， DtpExecutor dtpExecutor) {\n               // queueType 非 VariableLinkedBlockingQueue MemorySafeLinkedBlockingQueue 且executorType为EagerDtpExecutor 不刷新\n        if (!canModifyQueueProp(properties)) {\n            return;\n        }\n        // 获取到线程池原来的队列\n        val blockingQueue = dtpExecutor.getQueue();\n        // 如果原来的队列容量和现在的不一样\n        if (!Objects.equals(dtpExecutor.getQueueCapacity()， properties.getQueueCapacity())) {\n            // 并且原来的队列是 VariableLinkedBlockingQueue 类型的，那么就设置队列的容量\n            if (blockingQueue instanceof VariableLinkedBlockingQueue) {\n                ((VariableLinkedBlockingQueue<Runnable>) blockingQueue).setCapacity(properties.getQueueCapacity());\n            } else {\n                // 否则不设置\n                log.error(\"DynamicTp refresh， the blockingqueue capacity cannot be reset， dtpName: {}， queueType {}\"，\n                        dtpExecutor.getThreadPoolName()， dtpExecutor.getQueueName());\n            }\n        }\n        // 如果队列是 MemorySafeLinkedBlockingQueue，那么设置最大内存\n        if (blockingQueue instanceof MemorySafeLinkedBlockingQueue) {\n            ((MemorySafeLinkedBlockingQueue<Runnable>) blockingQueue).setMaxFreeMemory(properties.getMaxFreeMemory() * M_1);\n        }\n    }\n```\n\n上述代码提到了几个眼生的队列，他们都是 dynamic-tp 自行实现的阻塞队列，我们来看下\n\n`VariableLinkedBlockingQueue`: 可以设置队列容量，且支持变更队列容量\n\n`MemorySafeLinkedBlockingQueue`: 继承 VariableLinkedBlockingQueue，可以通过 maxFreeMemory 设置队列容量，在构造器中对容量有默认的大小限制\n\n**首先我们思考一下，为什么 dynamic-tp 要自行实现的阻塞队列？**\n\n当你翻看 Java 原生 LinkedBlockingQueue 队列时你就会发现，队列容量被定义为private final类型的，不能修改，那肯定是不符合我们修改阻塞队列大小还能实现刷新线程池的效果。\n\n[![image-20230218110508712](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png)\n\n其中着重说明下 MemorySafeLinkedBlockingQueue 队列，LinkedBlockingQueue的容量默认是Integer.MAX_VALUE，所以当我们不对其进行限制时，就有可能导致 OOM 问题，所以 MemorySafeLinkedBlockingQueue 构造函数设置了默认队列大小\n\n当我们往队列添加元素的时候，会先判断有没有足够的空间\n\n```java\npublic class MemorySafeLinkedBlockingQueue<E> extends VariableLinkedBlockingQueue<E> {\n\n    private static final long serialVersionUID = 8032578371739960142L;\n\n    public static final int THE_256_MB = 256 * 1024 * 1024;\n\n    /**\n     * 队列的容量\n     */\n    private int maxFreeMemory;\n\n    public MemorySafeLinkedBlockingQueue() {\n        // 默认256MB\n        this(THE_256_MB);\n    }\n\n    public MemorySafeLinkedBlockingQueue(final int maxFreeMemory) {\n        super(Integer.MAX_VALUE);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    public MemorySafeLinkedBlockingQueue(final int capacity， final int maxFreeMemory) {\n        super(capacity);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    public MemorySafeLinkedBlockingQueue(final Collection<? extends E> c， final int maxFreeMemory) {\n        super(c);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    /**\n     * set the max free memory.\n     *\n     * @param maxFreeMemory the max free memory\n     */\n    public void setMaxFreeMemory(final int maxFreeMemory) {\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    /**\n     * get the max free memory.\n     *\n     * @return the max free memory limit\n     */\n    public int getMaxFreeMemory() {\n        return maxFreeMemory;\n    }\n\n    /**\n     * determine if there is any remaining free memory.\n     *\n     * @return true if has free memory\n     */\n    public boolean hasRemainedMemory() {\n        if (MemoryLimitCalculator.maxAvailable() > maxFreeMemory) {\n            return true;\n        }\n        throw new RejectedExecutionException(\"No more memory can be used.\");\n    }\n\n    @Override\n    public void put(final E e) throws InterruptedException {\n        // 我们往队列添加元素的时候，会先判断有没有足够的空间\n        if (hasRemainedMemory()) {\n            super.put(e);\n        }\n    }\n\n    @Override\n    public boolean offer(final E e， final long timeout， final TimeUnit unit) throws InterruptedException {\n        return hasRemainedMemory() && super.offer(e， timeout， unit);\n    }\n\n    @Override\n    public boolean offer(final E e) {\n        return hasRemainedMemory() && super.offer(e);\n    }\n}\n```\n\n\n\n回到上文我们说刷新完线程池后，发送异步事件 RefreshEvent，来继续看下\n\nDtpAdapterListener 处于 adapter 模块，该模块主要是对些三方组件中的线程池进行管理（例如 Tomcat，Jetty 等），通过 spring 的事件发布监听机制来实现与核心流程解耦\n\n```java\n@Slf4j\npublic class DtpAdapterListener implements GenericApplicationListener {\n\n    @Override\n    public boolean supportsEventType(ResolvableType resolvableType) {\n        Class<?> type = resolvableType.getRawClass();\n        if (type != null) {\n            return RefreshEvent.class.isAssignableFrom(type)\n                    || CollectEvent.class.isAssignableFrom(type)\n                    || AlarmCheckEvent.class.isAssignableFrom(type);\n        }\n        return false;\n    }\n\n    @Override\n    public void onApplicationEvent(@NonNull ApplicationEvent event) {\n        try {\n            if (event instanceof RefreshEvent) {\n                doRefresh(((RefreshEvent) event).getDtpProperties());\n            } else if (event instanceof CollectEvent) {\n                doCollect(((CollectEvent) event).getDtpProperties());\n            } else if (event instanceof AlarmCheckEvent) {\n                doAlarmCheck(((AlarmCheckEvent) event).getDtpProperties());\n            }\n        } catch (Exception e) {\n            log.error(\"DynamicTp adapter， event handle failed.\"， e);\n        }\n    }\n\n}\n    /**\n     * Do refresh.\n     *\n     * @param dtpProperties dtpProperties\n     */\n    protected void doRefresh(DtpProperties dtpProperties) {\n        val handlerMap = ApplicationContextHolder.getBeansOfType(DtpAdapter.class);\n        if (CollectionUtils.isEmpty(handlerMap)) {\n            return;\n        }\n        handlerMap.forEach((k， v) -> v.refresh(dtpProperties));\n    }\n```\n\n[![image-20230218112109807](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png)\n\n## 2.3 线程池类型\n\n> DtpLifecycleSupport\n\nDtpLifecycleSupport 继承了 JUC ThreadPoolExecutor，对原生线程池进行了增强\n\n```java\n@Slf4j\npublic abstract class DtpLifecycleSupport extends ThreadPoolExecutor implements InitializingBean， DisposableBean {\n\n   \n    protected String threadPoolName;\n\n    /**\n     * Whether to wait for scheduled tasks to complete on shutdown，\n     * not interrupting running tasks and executing all tasks in the queue.\n     * <p>\n     * 在关闭线程池的时候是否等待任务执行完毕，不会打断运行中的任务，并且会执行队列中的所有任务\n     */\n    protected boolean waitForTasksToCompleteOnShutdown = false;\n\n    /**\n     * The maximum number of seconds that this executor is supposed to block\n     * on shutdown in order to wait for remaining tasks to complete their execution\n     * before the rest of the container continues to shut down.\n     * <p>\n     * 在线程池关闭时等待的最大时间，目的就是等待线程池中的任务运行完毕。\n     */\n    protected int awaitTerminationSeconds = 0;\n\n    public DtpLifecycleSupport(int corePoolSize，\n                               int maximumPoolSize，\n                               long keepAliveTime，\n                               TimeUnit unit，\n                               BlockingQueue<Runnable> workQueue，\n                               ThreadFactory threadFactory) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);\n    }\n\n    @Override\n    public void afterPropertiesSet() {\n        DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);\n        // 子类实现\n        initialize(dtpProperties);\n    }\n\n   \n}\n```\n\n提供了两个增强字段 `waitForTasksToCompleteOnShutdown` 和 `awaitTerminationSeconds`\n\n我们以此来看下\n\n`waitForTasksToCompleteOnShutdown` 作用在线程池销毁阶段\n\n```java\npublic void internalShutdown() {\n        if (log.isInfoEnabled()) {\n            log.info(\"Shutting down ExecutorService， poolName: {}\"， threadPoolName);\n        }\n        // 如果需要等待任务执行完毕，则调用 shutdown()会执行先前已提交的任务，拒绝新任务提交，线程池状态变成 SHUTDOWN\n        if (this.waitForTasksToCompleteOnShutdown) {\n            this.shutdown();\n        } else {\n            // 如果不需要等待任务执行完毕，则直接调用shutdownNow()方法，尝试中断正在执行的任务，返回所有未执行的任务，线程池状态变成 STOP， 然后调用 Future 的 cancel 方法取消\n            for (Runnable remainingTask : this.shutdownNow()) {\n                cancelRemainingTask(remainingTask);\n            }\n        }\n        awaitTerminationIfNecessary();\n    }\n```\n\n总结下它的作用就是 在关闭线程池的时候看是否等待任务执行完毕，如果需要等待则会拒绝新任务的提交，执行先前已提交的任务，否则中断正在执行的任务。\n\n而 `awaitTerminationSeconds` 字段主要是配合 shutdown 使用，阻塞当前线程，等待已提交的任务执行完毕或者超时的最大时间，等待线程池中的任务运行结束。\n\n\n\n> DtpExecutor\n\nDtpExecutor 也就是我们项目中横贯整个流程的动态线程池，它继承自 DtpLifecycleSupport，主要是也是实现对基本线程池的增强。\n\n```java\n@Slf4j\npublic class DtpExecutor extends DtpLifecycleSupport implements SpringExecutor {\n\n    /**\n     * Simple Business alias Name of Dynamic ThreadPool. Use for notify.\n     */\n    private String threadPoolAliasName;\n\n    /**\n     * RejectHandler name.\n     */\n    private String rejectHandlerName;\n\n    /**\n     * If enable notify.\n     */\n    private boolean notifyEnabled;\n\n    /**\n     * Notify items， see {@link NotifyItemEnum}.\n     * <p>\n     * 需要提醒的平台\n     */\n    private List<NotifyItem> notifyItems;\n\n    /**\n     * Task wrappers， do sth enhanced.\n     */\n    private List<TaskWrapper> taskWrappers = Lists.newArrayList();\n\n    /**\n     * If pre start all core threads.\n     * <p>\n     * 线程是否需要提前预热，真正调用的还是ThreadPoolExecutor的对应方法\n     */\n    private boolean preStartAllCoreThreads;\n\n    /**\n     * Task execute timeout， unit (ms)， just for statistics.\n     */\n    private long runTimeout;\n\n    /**\n     * Task queue wait timeout， unit (ms)， just for statistics.\n     */\n    private long queueTimeout;\n\n    /**\n     * Total reject count.\n     */\n    private final LongAdder rejectCount = new LongAdder();\n\n    /**\n     * Count run timeout tasks.\n     */\n    private final LongAdder runTimeoutCount = new LongAdder();\n\n    /**\n     * Count queue wait timeout tasks.\n     */\n    private final LongAdder queueTimeoutCount = new LongAdder();\n\n    public DtpExecutor(int corePoolSize， int maximumPoolSize， long keepAliveTime， TimeUnit unit， BlockingQueue<Runnable> workQueue， ThreadFactory threadFactory， RejectedExecutionHandler handler) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);\n        this.rejectHandlerName = handler.getClass().getSimpleName();\n        setRejectedExecutionHandler(RejectHandlerGetter.getProxy(handler));\n    }\n\n    @Override\n    public void execute(Runnable task， long startTimeout) {\n        execute(task);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param command the runnable task\n     */\n    @Override\n    public void execute(Runnable command) {\n        String taskName = null;\n        if (command instanceof NamedRunnable) {\n            taskName = ((NamedRunnable) command).getName();\n        }\n\n        if (CollectionUtils.isNotEmpty(taskWrappers)) {\n            for (TaskWrapper t : taskWrappers) {\n                command = t.wrap(command);\n            }\n        }\n\n        if (runTimeout > 0 || queueTimeout > 0) {\n            command = new DtpRunnable(command， taskName);\n        }\n        super.execute(command);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param t the thread that will run task {@code r}\n     * @param r the task that will be executed\n     */\n    @Override\n    protected void beforeExecute(Thread t， Runnable r) {\n        if (!(r instanceof DtpRunnable)) {\n            super.beforeExecute(t， r);\n            return;\n        }\n        DtpRunnable runnable = (DtpRunnable) r;\n        long currTime = TimeUtil.currentTimeMillis();\n        if (runTimeout > 0) {\n            runnable.setStartTime(currTime);\n        }\n        if (queueTimeout > 0) {\n            long waitTime = currTime - runnable.getSubmitTime();\n            if (waitTime > queueTimeout) {\n                queueTimeoutCount.increment();\n                AlarmManager.doAlarmAsync(this， QUEUE_TIMEOUT);\n                if (StringUtils.isNotBlank(runnable.getTaskName())) {\n                    log.warn(\"DynamicTp execute， queue timeout， poolName: {}， taskName: {}， waitTime: {}ms\"， this.getThreadPoolName()， runnable.getTaskName()， waitTime);\n                }\n            }\n        }\n\n        super.beforeExecute(t， r);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param r the runnable that has completed\n     * @param t the exception that caused termination， or null if\n     *          execution completed normally\n     */\n    @Override\n    protected void afterExecute(Runnable r， Throwable t) {\n\n        if (runTimeout > 0) {\n            DtpRunnable runnable = (DtpRunnable) r;\n            long runTime = TimeUtil.currentTimeMillis() - runnable.getStartTime();\n            if (runTime > runTimeout) {\n                runTimeoutCount.increment();\n                AlarmManager.doAlarmAsync(this， RUN_TIMEOUT);\n                if (StringUtils.isNotBlank(runnable.getTaskName())) {\n                    log.warn(\"DynamicTp execute， run timeout， poolName: {}， taskName: {}， runTime: {}ms\"， this.getThreadPoolName()， runnable.getTaskName()， runTime);\n                }\n            }\n        }\n\n        super.afterExecute(r， t);\n    }\n\n    @Override\n    protected void initialize(DtpProperties dtpProperties) {\n        NotifyHelper.initNotify(this， dtpProperties.getPlatforms());\n\n        if (preStartAllCoreThreads) {\n            // 在没有任务到来之前就创建corePoolSize个线程或一个线程 因为在默认线程池启动的时候是不会启动核心线程的，只有来了新的任务时才会启动线程\n            prestartAllCoreThreads();\n        }\n    }\n}\n```\n\n> EagerDtpExecutor\n\nEagerDtpExecutor 继承了 DtpExecutor，专为 IO 密集场景提供，为什么这么说呢，请看下文分析\n\n```java\npublic class EagerDtpExecutor extends DtpExecutor {\n\n    /**\n     * The number of tasks submitted but not yet finished.\n     * 已经提交的但还没有完成的任务数量\n     */\n    private final AtomicInteger submittedTaskCount = new AtomicInteger(0);\n\n    public EagerDtpExecutor(int corePoolSize，\n                            int maximumPoolSize，\n                            long keepAliveTime，\n                            TimeUnit unit，\n                            BlockingQueue<Runnable> workQueue，\n                            ThreadFactory threadFactory，\n                            RejectedExecutionHandler handler) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory， handler);\n    }\n\n    public int getSubmittedTaskCount() {\n        return submittedTaskCount.get();\n    }\n\n    @Override\n    protected void afterExecute(Runnable r， Throwable t) {\n        submittedTaskCount.decrementAndGet();\n        super.afterExecute(r， t);\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        if (command == null) {\n            throw new NullPointerException();\n        }\n        submittedTaskCount.incrementAndGet();\n        try {\n            super.execute(command);\n        } catch (RejectedExecutionException rx) {\n            // 被拒绝时\n            if (getQueue() instanceof TaskQueue) {\n                // If the Executor is close to maximum pool size， concurrent\n                // calls to execute() may result (due to use of TaskQueue) in\n                // some tasks being rejected rather than queued.\n                // If this happens， add them to the queue.\n                final TaskQueue queue = (TaskQueue) getQueue();\n                try {\n                    // 加入队列中\n                    if (!queue.force(command， 0， TimeUnit.MILLISECONDS)) {\n                        submittedTaskCount.decrementAndGet();\n                        throw new RejectedExecutionException(\"Queue capacity is full.\"， rx);\n                    }\n                } catch (InterruptedException x) {\n                    submittedTaskCount.decrementAndGet();\n                    throw new RejectedExecutionException(x);\n                }\n            } else {\n                submittedTaskCount.decrementAndGet();\n                throw rx;\n            }\n        }\n    }\n}\n```\n\n来看 execute 执行方法，当捕获住拒绝异常时，说明线程池队列已满且大于最大线程数，如果当前队列是\n\nTaskQueue 则重新将拒绝任务加入队列中，加入失败则抛出任务拒绝异常。\n\n**来看 TaskQueue 代码实现**\n\n```java\npublic class TaskQueue extends VariableLinkedBlockingQueue<Runnable> {\n\n    private static final long serialVersionUID = -1L;\n\n    private transient EagerDtpExecutor executor;\n\n    public TaskQueue(int queueCapacity) {\n        super(queueCapacity);\n    }\n\n    public void setExecutor(EagerDtpExecutor exec) {\n        executor = exec;\n    }\n\n    @Override\n    public boolean offer(@NonNull Runnable runnable) {\n        if (executor == null) {\n            throw new RejectedExecutionException(\"The task queue does not have executor.\");\n        }\n        int currentPoolThreadSize = executor.getPoolSize();\n        // 线程池中的线程数等于最大线程数的时候，就将任务放进队列等待工作线程处理\n        if (currentPoolThreadSize == executor.getMaximumPoolSize()) {\n            return super.offer(runnable);\n        }\n        // 如果当前未执行的任务数量小于等于当前线程数，还有剩余的worker线程，就将任务放进队列等待工作线程处理\n        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n            return super.offer(runnable);\n        }\n        // 如果当前线程数大于核心线程，但小于最大线程数量，则直接返回false，外层逻辑线程池创建新的线程来执行任务\n        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n            return false;\n        }\n        // currentPoolThreadSize >= max\n        return super.offer(runnable);\n    }\n}\n```\n\n上述代码我们看到 currentPoolThreadSize < executor.getMaximumPoolSize() 会返回 false\n\n底层实现 还是 JUC 的 ThreadPoolExecutor，来看 execute 方法，当前线程数大于核心线程，但小于最大线程数量，则执行 addWorker(command， false)，创建新的线程来执行任务。\n\n```java\n   public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n             // 线程池状态和线程数的整数\n        int c = ctl.get();\n        // 如果当前线程数小于核心线程数，创建 Worker 线程并启动线程\n        if (workerCountOf(c) < corePoolSize) { \n            // 添加任务成功，那么就结束了 结果会包装到 FutureTask 中\n            if (addWorker(command， true)) \n                return;\n            c = ctl.get();\n        }\n         // 要么当前线程数大于等于核心线程数，要么刚刚 addWorker 失败了 ，如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中\n        if (isRunning(c) && workQueue.offer(command)) {\n              // 二次状态检查\n            int recheck = ctl.get(); \n              // 如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略\n            if (! isRunning(recheck) && remove(command)) \n                reject(command);\n              // 如果线程池还是 RUNNING 的，并且线程数为 0，重新创建一个新的线程 这里目的担心任务提交到队列中了，但是线程都关闭了\n            else if (workerCountOf(recheck) == 0) \n                  // 创建Worker，并启动里面的Thread，为什么传null，线程启动后会自动从阻塞队列拉任务执行\n                addWorker(null， false);\n        }\n             // workQueue.offer(command)返回false，以 maximumPoolSize 为界创建新的 worker线程并启动线程，如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略\n        else if (!addWorker(command， false)) \n            reject(command);\n   }\n```\n\n一看这不就是 Tomcat 线程池处理流程吗，对比于原生 JUC 线程池提交任务流程\n\n**看下原生 JUC 线程池提交任务的流程**\n\n- 当前线程数小于核心线程数，则创建一个新的线程来执行任务\n- 当前线程数大于等于核心线程数，且阻塞队列未满，则将任务添加到队列中\n- 如果阻塞队列已满，当前线程数大于等于核心线程数，当前线程数小于最大线程数，则创建并启动一个线程来执行新提交的任务\n- 若当前线程数大于等于最大线程数，且阻塞队列已满，此时会执行拒绝策略\n\n来看下原生 JUC 线程池提交流程，引用美团线程池篇中的图\n[![img](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png)\n\n原生 JUC 线程池核心思想就是就是先让核心线程数的线程工作，多余的任务统统塞到阻塞队列，阻塞队列塞不下才再多创建线程来工作，这种情况下当大量请求提交时，大量的请求很有可能都会被阻塞在队列中，而线程还没有创建到最大线程数，导致用户请求处理很慢，用户体验很差，而且当我们的工作队列设置得很大时，最大线程数这个参数显得没有意义，因为队列很难满，或者到满的时候再去扩容线程池已经于事无补了。\n\n**那如何解决呢？**\n\n我们有没有办法让线程池更激进一点呢，优先开启更多的线程，而把队列当成一个后备方案。\n\n重写了execute()方法，当抛出拒绝策略了尝试一次往阻塞队列里插入任务，尽最大努力的去执行任务，新增阻塞队列继承了 LinkedBlockingQueue，重写了offer()方法，重写了offer()方法，每次向队列插入任务，判断如果当前线程数小于最大线程数则插入失败。进而让线程池创建新线程来处理任务。\n\n**如下图所示：**\n\n[![img](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png)\n\n总结：知识是相通的，要学以致用\n\n## 2.4 报警通知\n\n关于分析报警通知，可以从 AlarmManager 和 NoticeManager 这两个类入手，实际就是分别构造了一个报警通知责任链，在需要报警通知的时候，调用责任链执行。\n\n先来看 AlarmManager 的代码实现\n\n```java\n@Slf4j\npublic class AlarmManager {\n\n    private static final ExecutorService ALARM_EXECUTOR = ThreadPoolBuilder.newBuilder()\n            .threadPoolName(\"dtp-alarm\")\n            .threadFactory(\"dtp-alarm\")\n            .corePoolSize(2)\n            .maximumPoolSize(4)\n            .workQueue(LINKED_BLOCKING_QUEUE.getName()， 2000， false， null)\n            .rejectedExecutionHandler(RejectedTypeEnum.DISCARD_OLDEST_POLICY.getName())\n            .buildCommon();\n\n    private static final InvokerChain<BaseNotifyCtx> ALARM_INVOKER_CHAIN;\n\n    static {\n        // 构造责任链\n        ALARM_INVOKER_CHAIN = NotifyFilterBuilder.getAlarmInvokerChain();\n    }\n\n    private AlarmManager() {\n    }\n    \n}\n```\n\n责任链的构造\n\n```java\npublic class NotifyFilterBuilder {\n\n    private NotifyFilterBuilder() { }\n\n    public static InvokerChain<BaseNotifyCtx> getAlarmInvokerChain() {\n        val filters = ApplicationContextHolder.getBeansOfType(NotifyFilter.class);\n        Collection<NotifyFilter> alarmFilters = Lists.newArrayList(filters.values());\n        alarmFilters.add(new AlarmBaseFilter());\n        alarmFilters = alarmFilters.stream()\n                .filter(x -> x.supports(NotifyTypeEnum.ALARM))\n                .sorted(Comparator.comparing(Filter::getOrder))\n                .collect(Collectors.toList());\n        // 构造ALARM_FILTER_CHAIN链\n        return InvokerChainFactory.buildInvokerChain(new AlarmInvoker()， alarmFilters.toArray(new NotifyFilter[0]));\n    }\n\n    public static InvokerChain<BaseNotifyCtx> getCommonInvokerChain() {\n        val filters = ApplicationContextHolder.getBeansOfType(NotifyFilter.class);\n        Collection<NotifyFilter> noticeFilters = Lists.newArrayList(filters.values());\n        noticeFilters.add(new NoticeBaseFilter());\n        noticeFilters = noticeFilters.stream()\n                .filter(x -> x.supports(NotifyTypeEnum.COMMON))\n                .sorted(Comparator.comparing(Filter::getOrder))\n                .collect(Collectors.toList());\n        return InvokerChainFactory.buildInvokerChain(new NoticeInvoker()， noticeFilters.toArray(new NotifyFilter[0]));\n    }\n}\npublic final class InvokerChainFactory {\n\n    private InvokerChainFactory() { }\n\n    @SafeVarargs\n    public static<T> InvokerChain<T> buildInvokerChain(Invoker<T> target， Filter<T>... filters) {\n\n        InvokerChain<T> invokerChain = new InvokerChain<>();\n        Invoker<T> last = target;\n        for (int i = filters.length - 1; i >= 0; i--) {\n            Invoker<T> next = last;\n            Filter<T> filter = filters[i];\n            last = context -> filter.doFilter(context， next);\n        }\n        invokerChain.setHead(last);\n        return invokerChain;\n    }\n}\n```\n\n执行报警方法调用如下\n\n```java\n    public static void doAlarm(ExecutorWrapper executorWrapper， NotifyItemEnum notifyItemEnum) {\n        // 根据告警类型获取告警项配置，一个线程池可以配置多个NotifyItem，这里需要过滤\n        NotifyHelper.getNotifyItem(executorWrapper， notifyItemEnum).ifPresent(notifyItem -> {\n            // 执行责任链\n            val alarmCtx = new AlarmCtx(executorWrapper， notifyItem);\n            ALARM_INVOKER_CHAIN.proceed(alarmCtx);\n        });\n    }\n```\n\n执行责任链，真正执行报警通知的代码如下\n\n```java\npublic class AlarmInvoker implements Invoker<BaseNotifyCtx> {\n\n    @Override\n    public void invoke(BaseNotifyCtx context) {\n\n        val alarmCtx = (AlarmCtx) context;\n        val executorWrapper = alarmCtx.getExecutorWrapper();\n        val notifyItem = alarmCtx.getNotifyItem();\n        val alarmInfo = AlarmCounter.getAlarmInfo(executorWrapper.getThreadPoolName()， notifyItem.getType());\n        alarmCtx.setAlarmInfo(alarmInfo);\n\n        DtpNotifyCtxHolder.set(context);\n        // 真正的发送告警的逻辑\n        NotifierHandler.getInstance().sendAlarm(NotifyItemEnum.of(notifyItem.getType()));\n        AlarmCounter.reset(executorWrapper.getThreadPoolName()， notifyItem.getType());\n    }\n}\n```\n\n调用 NotifierHandler#sendAlarm()\n\n```java\n@Slf4j\npublic final class NotifierHandler {\n\n    private static final Map<String， DtpNotifier> NOTIFIERS = new HashMap<>();\n\n    private NotifierHandler() {\n        ServiceLoader<DtpNotifier> loader = ServiceLoader.load(DtpNotifier.class);\n        for (DtpNotifier notifier : loader) {\n            NOTIFIERS.put(notifier.platform()， notifier);\n        }\n\n        DtpNotifier dingNotifier = new DtpDingNotifier(new DingNotifier());\n        DtpNotifier wechatNotifier = new DtpWechatNotifier(new WechatNotifier());\n        DtpNotifier larkNotifier = new DtpLarkNotifier(new LarkNotifier());\n        NOTIFIERS.put(dingNotifier.platform()， dingNotifier);\n        NOTIFIERS.put(wechatNotifier.platform()， wechatNotifier);\n        NOTIFIERS.put(larkNotifier.platform()， larkNotifier);\n    }\n\n    public void sendAlarm(NotifyItemEnum notifyItemEnum) {\n\n        try {\n            NotifyItem notifyItem = DtpNotifyCtxHolder.get().getNotifyItem();\n            for (String platform : notifyItem.getPlatforms()) {\n                DtpNotifier notifier = NOTIFIERS.get(platform.toLowerCase());\n                if (notifier != null) {\n                    notifier.sendAlarmMsg(notifyItemEnum);\n                }\n            }\n        } finally {\n            DtpNotifyCtxHolder.remove();\n        }\n    }\n}\n```\n\n最后调用 notifier.sendAlarmMsg(notifyItemEnum)发送消息\n\n```java\n    @Override\n    public void sendAlarmMsg(NotifyItemEnum notifyItemEnum) {\n        NotifyHelper.getPlatform(platform()).ifPresent(platform -> {\n            // 构建报警信息\n            String content = buildAlarmContent(platform， notifyItemEnum);\n            if (StringUtils.isBlank(content)) {\n                return;\n            }\n            // 发送\n            notifier.send(platform， content);\n        });\n    }\n```\n\n[![image-20230218132044086](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png)\n\n## 2.5 监控\n\n入口 DtpMonitor\n\n```java\n@Slf4j\npublic class DtpMonitor implements ApplicationRunner， Ordered {\n\n    private static final ScheduledExecutorService MONITOR_EXECUTOR = new ScheduledThreadPoolExecutor(\n            1， new NamedThreadFactory(\"dtp-monitor\"， true));\n\n    @Resource\n    private DtpProperties dtpProperties;\n\n    /**\n     * 每隔 monitorInterval（默认为5） 执行监控\n     *\n     * @param args\n     */\n    @Override\n    public void run(ApplicationArguments args) {\n        MONITOR_EXECUTOR.scheduleWithFixedDelay(this::run，\n                0， dtpProperties.getMonitorInterval()， TimeUnit.SECONDS);\n    }\n\n    private void run() {\n        // 所有线程池的名称\n        List<String> dtpNames = DtpRegistry.listAllDtpNames();\n        // 所有标有DynamicTp注解的线程池\n        List<String> commonNames = DtpRegistry.listAllCommonNames();\n        // 检查告警\n        checkAlarm(dtpNames);\n        // 指标收集\n        collect(dtpNames， commonNames);\n    }\n\n    private void collect(List<String> dtpNames， List<String> commonNames) {\n        // 不收集指标\n        if (!dtpProperties.isEnabledCollect()) {\n            return;\n        }\n\n        // 拿到所有的线程池对象，获取到线程池的各种属性统计指标\n        dtpNames.forEach(x -> {\n            DtpExecutor executor = DtpRegistry.getDtpExecutor(x);\n            ThreadPoolStats poolStats = MetricsConverter.convert(executor);\n            // 指标收集\n            doCollect(poolStats);\n        });\n        commonNames.forEach(x -> {\n            ExecutorWrapper wrapper = DtpRegistry.getCommonExecutor(x);\n            // 转换 ThreadPoolStats\n            ThreadPoolStats poolStats = MetricsConverter.convert(wrapper);\n            // 指标收集\n            doCollect(poolStats);\n        });\n        // 发送一个CollectEvent事件\n        publishCollectEvent();\n    }\n\n    /**\n     * 针对每一个线程池，使用其名称从注册表中获取到线程池对象，然后触发告警\n     *\n     * @param dtpNames\n     */\n    private void checkAlarm(List<String> dtpNames) {\n        dtpNames.forEach(x -> {\n            DtpExecutor executor = DtpRegistry.getDtpExecutor(x);\n            AlarmManager.doAlarmAsync(executor， SCHEDULE_NOTIFY_ITEMS);\n        });\n        // 发送告警AlarmCheckEvent事件\n        publishAlarmCheckEvent();\n    }\n\n    private void doCollect(ThreadPoolStats threadPoolStats) {\n        try {\n            CollectorHandler.getInstance().collect(threadPoolStats， dtpProperties.getCollectorTypes());\n        } catch (Exception e) {\n            log.error(\"DynamicTp monitor， metrics collect error.\"， e);\n        }\n    }\n\n    private void publishCollectEvent() {\n        CollectEvent event = new CollectEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n\n    private void publishAlarmCheckEvent() {\n        AlarmCheckEvent event = new AlarmCheckEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE + 2;\n    }\n}\n```\n\n[![image-20230218132312173](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png)\n\n代码比较易懂，这里就不在叙述了。\n\n# 3. 总结\n\n**dynamic-tp** 设计巧妙，代码中设计模式先行，结构清晰易懂，代码规整，同时提供了很多扩展点，通过利用了 Spring 的扩展，和 JUC 原生线程池优势，功能强大。","source":"_posts/2023-05-24-dynamic-tp源码分析-.md","raw":"---\nlayout: post\ntitle: MathJax Test\ndate: 2017-07-30\ncategories: JAVA\ntags: mathjax \n---\n\n# dynamic-tp核心流程源码解读篇\n\nby MRyan, 2023-02-18\n\n\n\n# 序. 介绍\n\n**dynamic-tp** 是一款动态线程池组件，可以实现线程池的实时动态调参及监控报警，线程池配置放在配置中心统一管理，达成业务代码零侵入，支持多配置中心的选择和常见的第三方组件的线程池的集成管理。\n\n`官网`: https://dynamictp.top/\n\n`Gitee`: https://gitee.com/dromara/dynamic-tp\n\n`Github`: https://github.com/dromara/dynamic-tp\n\n详细介绍及组件的基本使用，可以访问 dynamic-tp 官网。\n\n本文主要是对 dynamic-tp 版本 `1.1.0` 源码的分析，学习。\n\n# 1. 如何使用\n\n以选择配置中心 zookeeper 为例\n\n**引入 starter 实用**\n\n```xml\n<dependency>\n        <groupId>cn.dynamictp</groupId>\n        <artifactId>dynamic-tp-spring-boot-starter-zookeeper</artifactId>\n        <version>1.1.0</version>\n    </dependency>\n```\n\n`application.yml` 需配置 zookeeper 地址节点信息\n\nps: zookeeper 支持 properties & json 配置\n\n```yaml\n server:\n  port: 8888\n  \n spring:\n      application:\n        name: dynamic-tp-zookeeper-demo\n      dynamic:\n        tp:\n          config-type: properties         \n          zookeeper:\n            config-version: 1.0.0\n            zk-connect-str: 127.0.0.1:2181\n            root-node: /configserver/dev\n            node: dynamic-tp-zookeeper-demo\n```\n\n\n\n配置如下（详细配置相关可翻看官网学习）：\n\n```java\nspring.dynamic.tp.enabled=true\nspring.dynamic.tp.enabledBanner=true\nspring.dynamic.tp.enabledCollect=true\nspring.dynamic.tp.collectorType=logging\nspring.dynamic.tp.monitorInterval=5\nspring.dynamic.tp.executors[0].threadPoolName=tpExecutor\nspring.dynamic.tp.executors[0].corePoolSize=6\nspring.dynamic.tp.executors[0].executorType=common\nspring.dynamic.tp.executors[0].maximumPoolSize=8\nspring.dynamic.tp.executors[0].queueCapacity=200\nspring.dynamic.tp.executors[0].queueType=VariableLinkedBlockingQueue\nspring.dynamic.tp.executors[0].rejectedHandlerType=CallerRunsPolicy\nspring.dynamic.tp.executors[0].keepAliveTime=50\nspring.dynamic.tp.executors[0].allowCoreThreadTimeOut=false\nspring.dynamic.tp.executors[0].threadNamePrefix=test\nspring.dynamic.tp.executors[0].waitForTasksToCompleteOnShutdown=false\nspring.dynamic.tp.executors[0].preStartAllCoreThreads=false \n```\n\n启动类加 @EnableDynamicTp 注解\n\n```java\n@Target({ElementType.TYPE， ElementType.ANNOTATION_TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(DtpBeanDefinitionRegistrar.class)\npublic @interface EnableDynamicTp {\n}\n```\n\n\n\n启动项目，运行以下测试代码\n\n```java\n// 通过依赖注入的方式获取\n@Resource\nprivate ThreadPoolExecutor tpExecutor;\n\npublic void test() {\n   tpExecutor.execute(() -> System.out.println(\"tpExecutor\"));\n}\n```\n\n或者\n\n```java\npublic static void main(String[] args) {\n   // 通过 DtpRegistry 手动获取\n   DtpExecutor dtpExecutor = DtpRegistry.getExecutor(\"tpExecutor\");\n   dtpExecutor.execute(() -> System.out.println(\"tpExecutor\"));\n}\n```\n\n后续在程序正常运行中，只需要修改配置客户端监听到节点变更，自动拉取最新的线程池配置并刷新，即可完成线程池的动态调参功能。\n\n\n\n如果想普通的 JUC 线程池集成在 dynamic-tp 监控体系中，可以 @Bean 定义时加 @DynamicTp 注解。\n\n例如：\n\n```java\n    @DynamicTp(\"tpExecutor\")\n    @Bean\n    public ThreadPoolExecutor tpExecutor() {\n        return (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\n    }\n```\n\n\n\n是不是非常容易上手，非常方便食用，那 dynamic-tp 是如何支持配置化，如何实现修改配置后线程池动态调参，它如何设计的呢，下面我们来分析下。\n\n# 2. 源码分析\n\n**前置知识点**：对 Java 线程池不是很了解的可以看下这篇文章[《深入Java线程池》](https://www.wormholestack.com/archives/668/)\n\n在分析源码之前，我们先来思考下如果是我们来实现 `动态线程池组件` 应该如何设计。\n\n@ 首先不论是硬编码的线程池还是通过配置化动态生成的线程池都是一类线程池（同一基类），而这一类线程池的参数可以抽象成`配置`，这个`配置`既可以是本项目中的文件；也可以是任意远程端口的文件，例如包括业界的配置中心们例如 nacos，zookeeper，apollo，etcd 等；当然它甚至可以不依赖配置中心，通过前端管理系统页面配置，走DB，通过刷新 API 接口中的 String 类型的文本配置，进而刷新线程池配置，这也是一种实现思路。\n\n@ 提供一个功能入口可以将`配置`构造成一个线程池对象，内部维护一个线程池注册表，将`配置`对应的线程池添加至注册表中。\n\n@ 实例化线程池对象，Spring 环境则注入依赖 Bean，以供 IOC 容器使用。\n\n@ 项目启动时首先先加载`配置`实例化线程池对象\n\n@ 如果`配置`指向的是远端配置中心，则注册监听器，当远端注册配置中心刷新时回调，当前系统监听到回调刷新`配置`，刷新线程池（动态调参），刷新本地线程池注册表。\n\n\n\n至此我们设计出来的`简易动态线程池组件`应该可以基本使用了。\n\n其实`简易动态线程池组件`还有很多进步的空间，例如线程池调参监控，异常报警等。\n\n当然以上说的这些基础功能以及额外的高级功能，dynamic-tp 都已经实现了，不过它目前没有提供支持我们刚刚所说通过管理系统页面配置走 DB 通过接口刷新的官方实现，且不支持除配置中心应用外的选择，也就是说无配置中心应用，目前不支持线程池动态调参（但支持监控）,但事实上你可以根据它提供的 SPI 自行实现。\n这可能 dynamic-tp 定位是轻量级动态线程池组件，且配置中心是现在大多数互联网系统都会使用的组件有关。\n\n接下来我们来通过分析源码来看它是如何具体实现的。\n\n\n\n## 2.1 配置\n\ndynamic-tp 通过 DtpProperties 来做`配置`的统一收口，这个配置包括本地文件或者配置中心中的文件(properties，json，yml，txt，xml)\n\n代码如下：\n\n可以看到目前已支持 Nacos、Apollo、Zookeeper、Consul、Etcd 配置中心\n\n```java\n@Slf4j\n@Data\n@ConfigurationProperties(prefix = DynamicTpConst.MAIN_PROPERTIES_PREFIX)\npublic class DtpProperties {\n\n    /**\n     * If enabled DynamicTp.\n     */\n    private boolean enabled = true;\n\n    /**\n     * If print banner.\n     */\n    private boolean enabledBanner = true;\n\n    /**\n     * Nacos config.\n     */\n    private Nacos nacos;\n\n    /**\n     * Apollo config.\n     */\n    private Apollo apollo;\n\n    /**\n     * Zookeeper config.\n     */\n    private Zookeeper zookeeper;\n\n    /**\n     * Etcd config.\n     */\n    private Etcd etcd;\n\n    /**\n     * Config file type.\n     */\n    private String configType = \"yml\";\n\n    /**\n     * If enabled metrics collect.\n     */\n    private boolean enabledCollect = false;\n\n    /**\n     * Metrics collector types， default is logging.\n     */\n    private List<String> collectorTypes = Lists.newArrayList(MICROMETER.name());\n\n    /**\n     * Metrics log storage path， just for \"logging\" type.\n     */\n    private String logPath;\n\n    /**\n     * Monitor interval， time unit（s）\n     */\n    private int monitorInterval = 5;\n\n    /**\n     * ThreadPoolExecutor configs.\n     */\n    private List<ThreadPoolProperties> executors;\n\n    /**\n     * Tomcat worker thread pool.\n     */\n    private SimpleTpProperties tomcatTp;\n\n    /**\n     * Jetty thread pool.\n     */\n    private SimpleTpProperties jettyTp;\n\n    /**\n     * Undertow thread pool.\n     */\n    private SimpleTpProperties undertowTp;\n\n    /**\n     * Dubbo thread pools.\n     */\n    private List<SimpleTpProperties> dubboTp;\n\n    /**\n     * Hystrix thread pools.\n     */\n    private List<SimpleTpProperties> hystrixTp;\n\n    /**\n     * RocketMq thread pools.\n     */\n    private List<SimpleTpProperties> rocketMqTp;\n\n    /**\n     * Grpc thread pools.\n     */\n    private List<SimpleTpProperties> grpcTp;\n\n    /**\n     * Motan server thread pools.\n     */\n    private List<SimpleTpProperties> motanTp;\n\n    /**\n     * Okhttp3 thread pools.\n     */\n    private List<SimpleTpProperties> okhttp3Tp;\n\n    /**\n     * Brpc thread pools.\n     */\n    private List<SimpleTpProperties> brpcTp;\n\n    /**\n     * Tars thread pools.\n     */\n    private List<SimpleTpProperties> tarsTp;\n\n    /**\n     * Sofa thread pools.\n     */\n    private List<SimpleTpProperties> sofaTp;\n\n    /**\n     * Notify platform configs.\n     */\n    private List<NotifyPlatform> platforms;\n\n    @Data\n    public static class Nacos {\n\n        private String dataId;\n\n        private String group;\n\n        private String namespace;\n    }\n\n    @Data\n    public static class Apollo {\n\n        private String namespace;\n    }\n\n    @Data\n    public static class Zookeeper {\n\n        private String zkConnectStr;\n\n        private String configVersion;\n\n        private String rootNode;\n\n        private String node;\n\n        private String configKey;\n    }\n\n    /**\n     * Etcd config.\n     */\n    @Data\n    public static class Etcd {\n\n        private String endpoints;\n\n        private String user;\n\n        private String password;\n\n        private String charset = \"UTF-8\";\n\n        private Boolean authEnable = false;\n\n        private String authority = \"ssl\";\n\n        private String key;\n    }\n}\n```\n\n项目中提供了一个配置解析接口 `ConfigParser`\n\n```java\npublic interface ConfigParser {\n\n      // 是否支持配置解析\n    boolean supports(ConfigFileTypeEnum type);\n        \n      // 解析支持的类型\n    List<ConfigFileTypeEnum> types();\n\n      // 解析\n    Map<Object， Object> doParse(String content) throws IOException;\n    \n        // 解析指定前缀\n    Map<Object， Object> doParse(String content， String prefix) throws IOException;\n}\n```\n\nConfigFileTypeEnum 如下，覆盖了主流文件类型\n\n```java\n@Getter\npublic enum ConfigFileTypeEnum {\n    PROPERTIES(\"properties\")，\n    XML(\"xml\")，\n    JSON(\"json\")，\n    YML(\"yml\")，\n    YAML(\"yaml\")，\n    TXT(\"txt\");\n}\n```\n\n项目中实现了配置解析基类，以及默认提供了 3 中文件类型配置解析类，json，properties以及yaml，使用者完全可以通过继承 AbstractConfigParser 来补充配置解析模式。\n\n[![image-20230217231356426](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png)\n\nAbstractConfigParser 代码如下，模板方法由子类实现具体的解析逻辑。\n\n```java\npublic abstract class AbstractConfigParser implements ConfigParser {\n\n    @Override\n    public boolean supports(ConfigFileTypeEnum type) {\n        return this.types().contains(type);\n    }\n\n    @Override\n    public Map<Object， Object> doParse(String content， String prefix) throws IOException {\n        return doParse(content);\n    }\n}\n```\n\n子类的实现这里就不看了，大差不差就是通过读取文件，解析每一行配置项，最后将结果封装成Map<Object， Object> result 返回。\n\n\n\n接着通过 Spring-bind 提供的解析方法 将 Map<Object， Object> result 绑定到 DtpProperties 配置类上\n\n实现代码如下:\n\n```java\npublic class PropertiesBinder {\n\n    private PropertiesBinder() { }\n\n    public static void bindDtpProperties(Map<?， Object> properties， DtpProperties dtpProperties) {\n        ConfigurationPropertySource sources = new MapConfigurationPropertySource(properties);\n        Binder binder = new Binder(sources);\n        ResolvableType type = ResolvableType.forClass(DtpProperties.class);\n        Bindable<?> target = Bindable.of(type).withExistingValue(dtpProperties);\n        binder.bind(MAIN_PROPERTIES_PREFIX， target);\n    }\n\n    public static void bindDtpProperties(Environment environment， DtpProperties dtpProperties) {\n        Binder binder = Binder.get(environment);\n        ResolvableType type = ResolvableType.forClass(DtpProperties.class);\n        Bindable<?> target = Bindable.of(type).withExistingValue(dtpProperties);\n        binder.bind(MAIN_PROPERTIES_PREFIX， target);\n    }\n}\n```\n\n到这里已经拿到了`配置`，我们来看接下来的流程。\n\n## 2.2 注册线程池\n\nDtpBeanDefinitionRegistrar 实现了 ConfigurationClassPostProcessor 利用 Spring 的动态注册 bean 机制，在 bean 初始化 之前 注册 BeanDefinition 以达到注入 bean 的目的\n\n**ps**：最终被 Spring ConfigurationClassPostProcessor 执行出来 对这块不熟悉的小伙伴可以去翻看 Spring 源码。\n\n来看下 DtpBeanDefinitionRegistrar 具体做了什么吧\n\n```java\n@Slf4j\npublic class DtpBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar， EnvironmentAware {\n\n    private Environment environment;\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        this.environment = environment;\n    }\n\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata， BeanDefinitionRegistry registry) {\n        DtpProperties dtpProperties = new DtpProperties();\n        // 从 Environment 读取配置信息绑定到 DtpProperties\n        PropertiesBinder.bindDtpProperties(environment， dtpProperties);\n        // 获取配置文件中配置的线程池\n        val executors = dtpProperties.getExecutors();\n        if (CollectionUtils.isEmpty(executors)) {\n            log.warn(\"DynamicTp registrar， no executors are configured.\");\n            return;\n        }\n        // 遍历并注册线程池 BeanDefinition\n        executors.forEach(x -> {\n            // 类型选择，common->DtpExecutor，eager->EagerDtpExecutor \n            Class<?> executorTypeClass = ExecutorType.getClass(x.getExecutorType());\n            // 通过 ThreadPoolProperties 来构造线程池所需要的属性\n            Map<String， Object> properties = buildPropertyValues(x);\n            Object[] args = buildConstructorArgs(executorTypeClass， x);\n            // 工具类 BeanDefinition 注册 Bean 相当于手动用 @Bean 声明线程池对象\n            BeanUtil.registerIfAbsent(registry， x.getThreadPoolName()， executorTypeClass， properties， args);\n        });\n    }\n}\n```\n\nregisterBeanDefinitions 方法中主要做了这么几件事\n\n1. 从 Environment 读取配置信息绑定到 DtpProperties\n2. 获取配置文件中配置的线程池，如果没有则结束\n3. 遍历线程池，绑定配置构造线程池所需要的属性，根据配置中的 executorType 注册不同类型的线程池 Bean(下面会说)\n4. BeanUtil#registerIfAbsent() 注册 Bean\n\n`ExecutorType` 目前项目支持 3 种类型，分别对应 3 个线程池，这里先跳过，我们下文详细介绍\n\n[![image-20230218092135653](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png)\n\n回到刚才的步骤，接下来通过 ThreadPoolProperties 来构造线程池所需要的属性\n\n```java\n private Map<String， Object> buildPropertyValues(ThreadPoolProperties tpp) {\n        Map<String， Object> properties = Maps.newHashMap();\n        properties.put(THREAD_POOL_NAME， tpp.getThreadPoolName());\n        properties.put(THREAD_POOL_ALIAS_NAME， tpp.getThreadPoolAliasName());\n        properties.put(ALLOW_CORE_THREAD_TIMEOUT， tpp.isAllowCoreThreadTimeOut());\n        properties.put(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN， tpp.isWaitForTasksToCompleteOnShutdown());\n        properties.put(AWAIT_TERMINATION_SECONDS， tpp.getAwaitTerminationSeconds());\n        properties.put(PRE_START_ALL_CORE_THREADS， tpp.isPreStartAllCoreThreads());\n        properties.put(RUN_TIMEOUT， tpp.getRunTimeout());\n        properties.put(QUEUE_TIMEOUT， tpp.getQueueTimeout());\n\n        val notifyItems = mergeAllNotifyItems(tpp.getNotifyItems());\n        properties.put(NOTIFY_ITEMS， notifyItems);\n        properties.put(NOTIFY_ENABLED， tpp.isNotifyEnabled());\n\n        val taskWrappers = TaskWrappers.getInstance().getByNames(tpp.getTaskWrapperNames());\n        properties.put(TASK_WRAPPERS， taskWrappers);\n\n        return properties;\n    }\n```\n\n选择阻塞队列，这里针对 EagerDtpExecutor 做了单独处理，选择了 TaskQueue 作为阻塞队列(下文说明)\n\n```java\n   private Object[] buildConstructorArgs(Class<?> clazz， ThreadPoolProperties tpp) {\n\n        BlockingQueue<Runnable> taskQueue;\n        // 如果是 EagerDtpExecutor 的话，对工作队列就是 TaskQueue\n        if (clazz.equals(EagerDtpExecutor.class)) {\n            taskQueue = new TaskQueue(tpp.getQueueCapacity());\n        } else {\n            // 不是 EagerDtpExecutor的话，就根据配置中的 queueType 来选择阻塞的队列\n            taskQueue = buildLbq(tpp.getQueueType()， tpp.getQueueCapacity()， tpp.isFair()， tpp.getMaxFreeMemory());\n        }\n\n        return new Object[]{\n                tpp.getCorePoolSize()，\n                tpp.getMaximumPoolSize()，\n                tpp.getKeepAliveTime()，\n                tpp.getUnit()，\n                taskQueue，\n                new NamedThreadFactory(tpp.getThreadNamePrefix())，\n                RejectHandlerGetter.buildRejectedHandler(tpp.getRejectedHandlerType())\n        };\n    }\n```\n\n非 EagerDtpExecutor 则根据配置中的 queueType 来选择阻塞的队列\n\n```java\n    public static BlockingQueue<Runnable> buildLbq(String name， int capacity， boolean fair， int maxFreeMemory) {\n        BlockingQueue<Runnable> blockingQueue = null;\n        if (Objects.equals(name， ARRAY_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new ArrayBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new LinkedBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， PRIORITY_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new PriorityBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， DELAY_QUEUE.getName())) {\n            blockingQueue = new DelayQueue();\n        } else if (Objects.equals(name， SYNCHRONOUS_QUEUE.getName())) {\n            blockingQueue = new SynchronousQueue<>(fair);\n        } else if (Objects.equals(name， LINKED_TRANSFER_QUEUE.getName())) {\n            blockingQueue = new LinkedTransferQueue<>();\n        } else if (Objects.equals(name， LINKED_BLOCKING_DEQUE.getName())) {\n            blockingQueue = new LinkedBlockingDeque<>(capacity);\n        } else if (Objects.equals(name， VARIABLE_LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new VariableLinkedBlockingQueue<>(capacity);\n        } else if (Objects.equals(name， MEMORY_SAFE_LINKED_BLOCKING_QUEUE.getName())) {\n            blockingQueue = new MemorySafeLinkedBlockingQueue<>(capacity， maxFreeMemory * M_1);\n        }\n        if (blockingQueue != null) {\n            return blockingQueue;\n        }\n\n        log.error(\"Cannot find specified BlockingQueue {}\"， name);\n        throw new DtpException(\"Cannot find specified BlockingQueue \" + name);\n    }\n```\n\n到这里我们已经构造好了创建一个线程池需要的所有参数\n\n调用 BeanUtil#registerIfAbsent()，先判断是否同名 bean，如果同名先删除后注入。\n\n```java\n@Slf4j\npublic final class BeanUtil {\n\n    private BeanUtil() { }\n\n    public static void registerIfAbsent(BeanDefinitionRegistry registry，\n                                        String beanName，\n                                        Class<?> clazz，\n                                        Map<String， Object> properties，\n                                        Object... constructorArgs) {\n          // 如果存在同名bean，先删除后重新注入bean\n        if (ifPresent(registry， beanName， clazz) || registry.containsBeanDefinition(beanName)) {\n            log.warn(\"DynamicTp registrar， bean definition already exists， overrides with remote config， beanName: {}\"，\n                    beanName);\n            registry.removeBeanDefinition(beanName);\n        }\n        doRegister(registry， beanName， clazz， properties， constructorArgs);\n    }\n\n\n    /**\n     * 注册Bean 相当于手动用 @Bean 声明线程池对象\n     * @param registry\n     * @param beanName\n     * @param clazz\n     * @param properties\n     * @param constructorArgs\n     */\n    public static void doRegister(BeanDefinitionRegistry registry，\n                                  String beanName，\n                                  Class<?> clazz，\n                                  Map<String， Object> properties，\n                                  Object... constructorArgs) {\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(clazz);\n        for (Object constructorArg : constructorArgs) {\n            builder.addConstructorArgValue(constructorArg);\n        }\n        if (MapUtils.isNotEmpty(properties)) {\n            properties.forEach(builder::addPropertyValue);\n        }\n                // 注册 Bean \n        registry.registerBeanDefinition(beanName， builder.getBeanDefinition());\n    }\n}\n```\n\n至此线程池对象已经交由 IOC 容器管理了。\n\n\n\n我们的线程池对象总不能无脑塞入 IOC 容器就不管了吧，肯定是要留根的，也就是需要一个线程池注册表，记录有哪些线程池是受 dynamic-tp 托管的，这样除了可以进行统计外，也就可以实现通知报警了。\n\n\n\n下面我们来看下项目是如何实现注册表的\n\n## 2.3 注册表\n\n`DtpPostProcessor` 利用了 Spring 容器启动 BeanPostProcessor 机制增强机制，在 bean 初始化的时候调用 postProcessAfterInitialization，它实现了获取被 IOC 容器托管的线程池 bean 然后注册到本地的注册表中。\n\n代码实现如下:\n\n```java\n@Slf4j\npublic class DtpPostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessAfterInitialization(@NonNull Object bean， @NonNull String beanName) throws BeansException {\n        // 只增强线程池相关的类\n        if (!(bean instanceof ThreadPoolExecutor) && !(bean instanceof ThreadPoolTaskExecutor)) {\n            return bean;\n        }\n\n        // 如果是 DtpExecutor 类型注册到注册表 DTP_REGISTRY\n        if (bean instanceof DtpExecutor) {\n            DtpExecutor dtpExecutor = (DtpExecutor) bean;\n            if (bean instanceof EagerDtpExecutor) {\n                ((TaskQueue) dtpExecutor.getQueue()).setExecutor((EagerDtpExecutor) dtpExecutor);\n            }\n            registerDtp(dtpExecutor);\n            return dtpExecutor;\n        }\n\n        // 获取上下文\n        ApplicationContext applicationContext = ApplicationContextHolder.getInstance();\n        String dtpAnnotationVal;\n        try {\n            // 读取标注 @DynamicTp 注解的 bean 则为基本线程池，但受组件管理监控\n            DynamicTp dynamicTp = applicationContext.findAnnotationOnBean(beanName， DynamicTp.class);\n            if (Objects.nonNull(dynamicTp)) {\n                dtpAnnotationVal = dynamicTp.value();\n            } else {\n                BeanDefinitionRegistry registry = (BeanDefinitionRegistry) applicationContext;\n                AnnotatedBeanDefinition annotatedBeanDefinition = (AnnotatedBeanDefinition) registry.getBeanDefinition(beanName);\n                MethodMetadata methodMetadata = (MethodMetadata) annotatedBeanDefinition.getSource();\n                if (Objects.isNull(methodMetadata) || !methodMetadata.isAnnotated(DynamicTp.class.getName())) {\n                    return bean;\n                }\n                dtpAnnotationVal = Optional.ofNullable(methodMetadata.getAnnotationAttributes(DynamicTp.class.getName()))\n                        .orElse(Collections.emptyMap())\n                        .getOrDefault(\"value\"， \"\")\n                        .toString();\n            }\n        } catch (NoSuchBeanDefinitionException e) {\n            log.error(\"There is no bean with the given name {}\"， beanName， e);\n            return bean;\n        }\n\n        // 如果说bean上面的DynamicTp注解，使用注解的值作为线程池的名称，没有的话就使用bean的名称\n        String poolName = StringUtils.isNotBlank(dtpAnnotationVal) ? dtpAnnotationVal : beanName;\n        if (bean instanceof ThreadPoolTaskExecutor) {\n              // 注册到注册表 COMMON_REGISTRY\n            ThreadPoolTaskExecutor taskExecutor = (ThreadPoolTaskExecutor) bean;\n            registerCommon(poolName， taskExecutor.getThreadPoolExecutor());\n        } else {\n            registerCommon(poolName， (ThreadPoolExecutor) bean);\n        }\n        return bean;\n    }\n\n    /**\n     * 动态线程池注册 向 Map 集合 put 元素\n     *\n     * @param executor\n     */\n    private void registerDtp(DtpExecutor executor) {\n        DtpRegistry.registerDtp(executor， \"beanPostProcessor\");\n    }\n\n    /**\n     * 非动态线程池注册 向 Map 集合 put 元素\n     *\n     * @param poolName\n     * @param executor\n     */\n    private void registerCommon(String poolName， ThreadPoolExecutor executor) {\n        ExecutorWrapper wrapper = new ExecutorWrapper(poolName， executor);\n        DtpRegistry.registerCommon(wrapper， \"beanPostProcessor\");\n    }\n}\n```\n\n简单总结下，和刚刚我们分析完全一致\n\n1. 获取到 bean 后，如果是非线程池类型则结束。\n2. 如果是 DtpExecutor 则注册到 DTP_REGISTRY 注册表中\n3. 如果是 非动态线程池且标注了 @DynamicTp 注解则注册到 COMMON_REGISTRY 注册表中\n4. 如果是 非动态线程池且未标注 @DynamicTp 注解则结束不做增强\n\n\n\nDtpRegistry 主要负责 注册、获取、刷新某个动态线程池（刷新线程池我们会下文分析）\n\n```java\n@Slf4j\npublic class DtpRegistry implements ApplicationRunner， Ordered {\n\n    /**\n     * Maintain all automatically registered and manually registered DtpExecutors.\n     * 动态线程池 key为线程池name\n     * DtpExecutor ThreadPoolExecutor加强版\n     */\n    private static final Map<String， DtpExecutor> DTP_REGISTRY = new ConcurrentHashMap<>();\n\n    /**\n     * Maintain all automatically registered and manually registered JUC ThreadPoolExecutors.\n     * <p>\n     * 标有DynamicTp注解的线程池\n     */\n    private static final Map<String， ExecutorWrapper> COMMON_REGISTRY = new ConcurrentHashMap<>();\n\n    private static final Equator EQUATOR = new GetterBaseEquator();\n\n    /**\n     * 配置文件映射\n     */\n    private static DtpProperties dtpProperties;\n\n    public static List<String> listAllDtpNames() {\n        return Lists.newArrayList(DTP_REGISTRY.keySet());\n    }\n\n    public static List<String> listAllCommonNames() {\n        return Lists.newArrayList(COMMON_REGISTRY.keySet());\n    }\n\n    public static void registerDtp(DtpExecutor executor， String source) {\n        log.info(\"DynamicTp register dtpExecutor， source: {}， executor: {}\"，\n                source， ExecutorConverter.convert(executor));\n        DTP_REGISTRY.putIfAbsent(executor.getThreadPoolName()， executor);\n    }\n\n    public static void registerCommon(ExecutorWrapper wrapper， String source) {\n        log.info(\"DynamicTp register commonExecutor， source: {}， name: {}\"， source， wrapper.getThreadPoolName());\n        COMMON_REGISTRY.putIfAbsent(wrapper.getThreadPoolName()， wrapper);\n    }\n\n    public static DtpExecutor getDtpExecutor(final String name) {\n        val executor = DTP_REGISTRY.get(name);\n        if (Objects.isNull(executor)) {\n            log.error(\"Cannot find a specified dtpExecutor， name: {}\"， name);\n            throw new DtpException(\"Cannot find a specified dtpExecutor， name: \" + name);\n        }\n        return executor;\n    }\n\n    public static ExecutorWrapper getCommonExecutor(final String name) {\n        val executor = COMMON_REGISTRY.get(name);\n        if (Objects.isNull(executor)) {\n            log.error(\"Cannot find a specified commonExecutor， name: {}\"， name);\n            throw new DtpException(\"Cannot find a specified commonExecutor， name: \" + name);\n        }\n        return executor;\n    }\n  \n    @Autowired\n    public void setDtpProperties(DtpProperties dtpProperties) {\n        DtpRegistry.dtpProperties = dtpProperties;\n    }\n\n    @Override\n    public void run(ApplicationArguments args) {\n        // 线程池名称\n        Set<String> remoteExecutors = Collections.emptySet();\n        // 获取配置文件中配置的线程池\n        if (CollectionUtils.isNotEmpty(dtpProperties.getExecutors())) {\n            remoteExecutors = dtpProperties.getExecutors().stream()\n                    .map(ThreadPoolProperties::getThreadPoolName)\n                    .collect(Collectors.toSet());\n        }\n        // DTP_REGISTRY 中已经注册的线程池\n        val registeredDtpExecutors = Sets.newHashSet(DTP_REGISTRY.keySet());\n        // 找出所有线程池中没有在配置文件中配置的线程池\n        val localDtpExecutors = CollectionUtils.subtract(registeredDtpExecutors， remoteExecutors);\n        // 日志\n        log.info(\"DtpRegistry initialization is complete， remote dtpExecutors: {}， local dtpExecutors: {}， local commonExecutors: {}\"，\n                remoteExecutors， localDtpExecutors， COMMON_REGISTRY.keySet());\n    }\n\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE + 1;\n    }\n}\n```\n\n代码比较简单，这里不再说明了。\n\n流程至此，动态线程池，标注了 @DynamicTp 注解的线程池，都已经准备就绪了。\n\n你可能会问那配置刷新 配置刷新动态调参是如何实现的呢，别急，我们继续分析。\n\n## 2.4 配置刷新 动态调参\n\nDynamic-tp 提供了配置刷新接口 Refresher，和基类 AbstractRefresher，支持不同配置中心的刷新基类，甚至完全可以自行扩展，其原理其实就是当配置中心监听到配置文件的变动后，解析配置文件，刷新配置文件，最后通过 Spring ApplicationListener 机制发送 RefreshEvent 刷新事件，由对应的 Adapter 来处理。\n\n```java\npublic interface Refresher {\n\n    /**\n     * Refresh with specify content.\n     *\n     * @param content content\n     * @param fileType file type\n     */\n    void refresh(String content， ConfigFileTypeEnum fileType);\n}\n```\n\n[![image-20230218103556728](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png)\n\n```java\n@Slf4j\npublic abstract class AbstractRefresher implements Refresher {\n\n    @Resource\n    protected DtpProperties dtpProperties;\n\n    @Override\n    public void refresh(String content， ConfigFileTypeEnum fileType) {\n\n        if (StringUtils.isBlank(content) || Objects.isNull(fileType)) {\n            log.warn(\"DynamicTp refresh， empty content or null fileType.\");\n            return;\n        }\n\n        try {\n            val configHandler = ConfigHandler.getInstance();\n            val properties = configHandler.parseConfig(content， fileType);\n            doRefresh(properties);\n        } catch (IOException e) {\n            log.error(\"DynamicTp refresh error， content: {}， fileType: {}\"， content， fileType， e);\n        }\n    }\n\n    protected void doRefresh(Map<Object， Object> properties) {\n        if (MapUtils.isEmpty(properties)) {\n            log.warn(\"DynamicTp refresh， empty properties.\");\n            return;\n        }\n        // 将发生变化的属性绑定到DtpProperties对象上\n        PropertiesBinder.bindDtpProperties(properties， dtpProperties);\n        // 更新线程池属性\n        doRefresh(dtpProperties);\n    }\n\n    protected void doRefresh(DtpProperties dtpProperties) {\n        DtpRegistry.refresh(dtpProperties);\n        publishEvent(dtpProperties);\n    }\n\n    private void publishEvent(DtpProperties dtpProperties) {\n        RefreshEvent event = new RefreshEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n}\n```\n\n接下来我们以 Zookeeper 为配置中心举例说明，代码如下。\n\n```java\n@Slf4j\npublic class ZookeeperRefresher extends AbstractRefresher implements EnvironmentAware， InitializingBean {\n\n    @Override\n    public void afterPropertiesSet() {\n\n        final ConnectionStateListener connectionStateListener = (client， newState) -> {\n            // 连接变更\n            if (newState == ConnectionState.RECONNECTED) {\n                loadAndRefresh();\n            }\n        };\n\n        final CuratorListener curatorListener = (client， curatorEvent) -> {\n            final WatchedEvent watchedEvent = curatorEvent.getWatchedEvent();\n            if (null != watchedEvent) {\n                switch (watchedEvent.getType()) {\n                    // 监听节点变更\n                    case NodeChildrenChanged:\n                    case NodeDataChanged:\n                        // 刷新\n                        loadAndRefresh();\n                        break;\n                    default:\n                        break;\n                }\n            }\n        };\n\n        CuratorFramework curatorFramework = CuratorUtil.getCuratorFramework(dtpProperties);\n        String nodePath = CuratorUtil.nodePath(dtpProperties);\n\n        curatorFramework.getConnectionStateListenable().addListener(connectionStateListener);\n        curatorFramework.getCuratorListenable().addListener(curatorListener);\n\n        log.info(\"DynamicTp refresher， add listener success， nodePath: {}\"， nodePath);\n    }\n\n    /**\n     * load config and refresh\n     */\n    private void loadAndRefresh() {\n        doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));\n    }\n\n    @Override\n    public void setEnvironment(Environment environment) {\n        ConfigurableEnvironment env = ((ConfigurableEnvironment) environment);\n        env.getPropertySources().remove(ZK_PROPERTY_SOURCE_NAME);\n    }\n}\n```\n\n利用了 Spring 机制，实现了 InitializingBean 并重写 afterPropertiesSet，在 Bean 实例化完成之后会被自动调用，在这期间针对 Zookeeper 连接，节点变更监听器进行注册，监听连接变更和节点变更后执行刷新操作。\n\n`doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));`实现由基类统一处理，解析配置并绑定 DtpProperties 上，执行 DtpRegistry#refresh() 刷新后发布一个 RefreshEvent 事件。\n\n```java\n    protected void doRefresh(Map<Object， Object> properties) {\n        if (MapUtils.isEmpty(properties)) {\n            log.warn(\"DynamicTp refresh， empty properties.\");\n            return;\n        }\n        // 解析配置并绑定 DtpProperties 上\n        PropertiesBinder.bindDtpProperties(properties， dtpProperties);\n        // 更新线程池属性\n        doRefresh(dtpProperties);\n    }\n\n    protected void doRefresh(DtpProperties dtpProperties) {\n        DtpRegistry.refresh(dtpProperties);\n        publishEvent(dtpProperties);\n    }\n\n    private void publishEvent(DtpProperties dtpProperties) {\n        RefreshEvent event = new RefreshEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n```\n\n来看 DtpRegistry#refresh() 的实现，代码如下：\n\n```java\npublic static void refresh(DtpProperties properties) {\n        if (Objects.isNull(properties) || CollectionUtils.isEmpty(properties.getExecutors())) {\n            log.warn(\"DynamicTp refresh， empty threadPoolProperties.\");\n            return;\n        }\n        // 属性不为空 从属性中拿到所有的线程池属性配置\n        properties.getExecutors().forEach(x -> {\n            if (StringUtils.isBlank(x.getThreadPoolName())) {\n                log.warn(\"DynamicTp refresh， threadPoolName must not be empty.\");\n                return;\n            }\n            // 从 DTP_REGISTRY 线程注册池表中拿到对应的线程池对象\n            val dtpExecutor = DTP_REGISTRY.get(x.getThreadPoolName());\n            if (Objects.isNull(dtpExecutor)) {\n                log.warn(\"DynamicTp refresh， cannot find specified dtpExecutor， name: {}.\"， x.getThreadPoolName());\n                return;\n            }\n            // 刷新 更新线程池对象\n            refresh(dtpExecutor， x);\n        });\n    }\nprivate static void refresh(DtpExecutor executor， ThreadPoolProperties properties) {\n        // 参数合法校验\n        if (properties.getCorePoolSize() < 0\n                || properties.getMaximumPoolSize() <= 0\n                || properties.getMaximumPoolSize() < properties.getCorePoolSize()\n                || properties.getKeepAliveTime() < 0) {\n            log.error(\"DynamicTp refresh， invalid parameters exist， properties: {}\"， properties);\n            return;\n        }\n        // 线程池旧配置\n        DtpMainProp oldProp = ExecutorConverter.convert(executor);\n        // 真正开始刷新\n        doRefresh(executor， properties);\n        // 线程池新配置\n        DtpMainProp newProp = ExecutorConverter.convert(executor);\n        // 相等不作处理\n        if (oldProp.equals(newProp)) {\n            log.warn(\"DynamicTp refresh， main properties of [{}] have not changed.\"， executor.getThreadPoolName());\n            return;\n        }\n        List<FieldInfo> diffFields = EQUATOR.getDiffFields(oldProp， newProp);\n        List<String> diffKeys = diffFields.stream().map(FieldInfo::getFieldName).collect(toList());\n        // 线程池参数变更 平台提醒\n        NoticeManager.doNoticeAsync(new ExecutorWrapper(executor)， oldProp， diffKeys);\n        // 更新参数 日志打印\n        log.info(\"DynamicTp refresh， name: [{}]， changed keys: {}， corePoolSize: [{}]， maxPoolSize: [{}]， queueType: [{}]， \" +\n                        \"queueCapacity: [{}]， keepAliveTime: [{}]， rejectedType: [{}]， allowsCoreThreadTimeOut: [{}]\"，\n                executor.getThreadPoolName()，\n                diffKeys，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getCorePoolSize()， newProp.getCorePoolSize())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getMaxPoolSize()， newProp.getMaxPoolSize())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueType()， newProp.getQueueType())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueCapacity()， newProp.getQueueCapacity())，\n                String.format(\"%ss => %ss\"， oldProp.getKeepAliveTime()， newProp.getKeepAliveTime())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getRejectType()， newProp.getRejectType())，\n                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.isAllowCoreThreadTimeOut()，\n                        newProp.isAllowCoreThreadTimeOut()));\n    }\n```\n\n总结一下上述代码无非做了这么几件事\n\n1. 参数合法校验\n2. 获取到线程池旧配置\n3. 执行刷新\n4. 获取到线程池新配置\n5. 如果新旧配置相同，则证明没有改动，不做处理\n6. 否则线程池变更发送通知，并记录变更日志(ps：通知相关处理下文会说，这里先跳过)\n\n\n\ndoRefresh 真正执行线程池的刷新，也依靠于 JUC 原生线程池支持动态属性变更。\n\n```java\nprivate static void doRefresh(DtpExecutor dtpExecutor， ThreadPoolProperties properties) {\n        // 调用相应的setXXX方法更新线程池参数\n        doRefreshPoolSize(dtpExecutor， properties);\n        if (!Objects.equals(dtpExecutor.getKeepAliveTime(properties.getUnit())， properties.getKeepAliveTime())) {\n            dtpExecutor.setKeepAliveTime(properties.getKeepAliveTime()， properties.getUnit());\n        }\n\n        if (!Objects.equals(dtpExecutor.allowsCoreThreadTimeOut()， properties.isAllowCoreThreadTimeOut())) {\n            dtpExecutor.allowCoreThreadTimeOut(properties.isAllowCoreThreadTimeOut());\n        }\n\n        // update reject handler\n        if (!Objects.equals(dtpExecutor.getRejectHandlerName()， properties.getRejectedHandlerType())) {\n            dtpExecutor.setRejectedExecutionHandler(RejectHandlerGetter.getProxy(properties.getRejectedHandlerType()));\n            dtpExecutor.setRejectHandlerName(properties.getRejectedHandlerType());\n        }\n\n        // update Alias Name\n        if (!Objects.equals(dtpExecutor.getThreadPoolAliasName()， properties.getThreadPoolAliasName())) {\n            dtpExecutor.setThreadPoolAliasName(properties.getThreadPoolAliasName());\n        }\n\n        updateQueueProp(properties， dtpExecutor);\n        dtpExecutor.setWaitForTasksToCompleteOnShutdown(properties.isWaitForTasksToCompleteOnShutdown());\n        dtpExecutor.setAwaitTerminationSeconds(properties.getAwaitTerminationSeconds());\n        dtpExecutor.setPreStartAllCoreThreads(properties.isPreStartAllCoreThreads());\n        dtpExecutor.setRunTimeout(properties.getRunTimeout());\n        dtpExecutor.setQueueTimeout(properties.getQueueTimeout());\n\n        List<TaskWrapper> taskWrappers = TaskWrappers.getInstance().getByNames(properties.getTaskWrapperNames());\n        dtpExecutor.setTaskWrappers(taskWrappers);\n\n        // update notify items\n        val allNotifyItems = mergeAllNotifyItems(properties.getNotifyItems());\n        // 刷新通知平台\n        NotifyHelper.refreshNotify(dtpExecutor.getThreadPoolName()， dtpProperties.getPlatforms()，\n                dtpExecutor.getNotifyItems()， allNotifyItems);\n        dtpExecutor.setNotifyItems(allNotifyItems);\n        dtpExecutor.setNotifyEnabled(properties.isNotifyEnabled());\n    }\n```\n\ndoRefreshPoolSize 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改\n\n```java\n   private static void doRefreshPoolSize(ThreadPoolExecutor dtpExecutor， ThreadPoolProperties properties) {\n        // 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改\n        if (properties.getMaximumPoolSize() < dtpExecutor.getMaximumPoolSize()) {\n            if (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) {\n                dtpExecutor.setCorePoolSize(properties.getCorePoolSize());\n            }\n            if (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) {\n                dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());\n            }\n            return;\n        }\n        if (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) {\n            dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());\n        }\n        if (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) {\n            dtpExecutor.setCorePoolSize(properties.getCorePoolSize());\n        }\n    }\n```\n\nupdateQueueProp 更新线程池阻塞队列大小\n\n```java\n private static void updateQueueProp(ThreadPoolProperties properties， DtpExecutor dtpExecutor) {\n               // queueType 非 VariableLinkedBlockingQueue MemorySafeLinkedBlockingQueue 且executorType为EagerDtpExecutor 不刷新\n        if (!canModifyQueueProp(properties)) {\n            return;\n        }\n        // 获取到线程池原来的队列\n        val blockingQueue = dtpExecutor.getQueue();\n        // 如果原来的队列容量和现在的不一样\n        if (!Objects.equals(dtpExecutor.getQueueCapacity()， properties.getQueueCapacity())) {\n            // 并且原来的队列是 VariableLinkedBlockingQueue 类型的，那么就设置队列的容量\n            if (blockingQueue instanceof VariableLinkedBlockingQueue) {\n                ((VariableLinkedBlockingQueue<Runnable>) blockingQueue).setCapacity(properties.getQueueCapacity());\n            } else {\n                // 否则不设置\n                log.error(\"DynamicTp refresh， the blockingqueue capacity cannot be reset， dtpName: {}， queueType {}\"，\n                        dtpExecutor.getThreadPoolName()， dtpExecutor.getQueueName());\n            }\n        }\n        // 如果队列是 MemorySafeLinkedBlockingQueue，那么设置最大内存\n        if (blockingQueue instanceof MemorySafeLinkedBlockingQueue) {\n            ((MemorySafeLinkedBlockingQueue<Runnable>) blockingQueue).setMaxFreeMemory(properties.getMaxFreeMemory() * M_1);\n        }\n    }\n```\n\n上述代码提到了几个眼生的队列，他们都是 dynamic-tp 自行实现的阻塞队列，我们来看下\n\n`VariableLinkedBlockingQueue`: 可以设置队列容量，且支持变更队列容量\n\n`MemorySafeLinkedBlockingQueue`: 继承 VariableLinkedBlockingQueue，可以通过 maxFreeMemory 设置队列容量，在构造器中对容量有默认的大小限制\n\n**首先我们思考一下，为什么 dynamic-tp 要自行实现的阻塞队列？**\n\n当你翻看 Java 原生 LinkedBlockingQueue 队列时你就会发现，队列容量被定义为private final类型的，不能修改，那肯定是不符合我们修改阻塞队列大小还能实现刷新线程池的效果。\n\n[![image-20230218110508712](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png)\n\n其中着重说明下 MemorySafeLinkedBlockingQueue 队列，LinkedBlockingQueue的容量默认是Integer.MAX_VALUE，所以当我们不对其进行限制时，就有可能导致 OOM 问题，所以 MemorySafeLinkedBlockingQueue 构造函数设置了默认队列大小\n\n当我们往队列添加元素的时候，会先判断有没有足够的空间\n\n```java\npublic class MemorySafeLinkedBlockingQueue<E> extends VariableLinkedBlockingQueue<E> {\n\n    private static final long serialVersionUID = 8032578371739960142L;\n\n    public static final int THE_256_MB = 256 * 1024 * 1024;\n\n    /**\n     * 队列的容量\n     */\n    private int maxFreeMemory;\n\n    public MemorySafeLinkedBlockingQueue() {\n        // 默认256MB\n        this(THE_256_MB);\n    }\n\n    public MemorySafeLinkedBlockingQueue(final int maxFreeMemory) {\n        super(Integer.MAX_VALUE);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    public MemorySafeLinkedBlockingQueue(final int capacity， final int maxFreeMemory) {\n        super(capacity);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    public MemorySafeLinkedBlockingQueue(final Collection<? extends E> c， final int maxFreeMemory) {\n        super(c);\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    /**\n     * set the max free memory.\n     *\n     * @param maxFreeMemory the max free memory\n     */\n    public void setMaxFreeMemory(final int maxFreeMemory) {\n        this.maxFreeMemory = maxFreeMemory;\n    }\n\n    /**\n     * get the max free memory.\n     *\n     * @return the max free memory limit\n     */\n    public int getMaxFreeMemory() {\n        return maxFreeMemory;\n    }\n\n    /**\n     * determine if there is any remaining free memory.\n     *\n     * @return true if has free memory\n     */\n    public boolean hasRemainedMemory() {\n        if (MemoryLimitCalculator.maxAvailable() > maxFreeMemory) {\n            return true;\n        }\n        throw new RejectedExecutionException(\"No more memory can be used.\");\n    }\n\n    @Override\n    public void put(final E e) throws InterruptedException {\n        // 我们往队列添加元素的时候，会先判断有没有足够的空间\n        if (hasRemainedMemory()) {\n            super.put(e);\n        }\n    }\n\n    @Override\n    public boolean offer(final E e， final long timeout， final TimeUnit unit) throws InterruptedException {\n        return hasRemainedMemory() && super.offer(e， timeout， unit);\n    }\n\n    @Override\n    public boolean offer(final E e) {\n        return hasRemainedMemory() && super.offer(e);\n    }\n}\n```\n\n\n\n回到上文我们说刷新完线程池后，发送异步事件 RefreshEvent，来继续看下\n\nDtpAdapterListener 处于 adapter 模块，该模块主要是对些三方组件中的线程池进行管理（例如 Tomcat，Jetty 等），通过 spring 的事件发布监听机制来实现与核心流程解耦\n\n```java\n@Slf4j\npublic class DtpAdapterListener implements GenericApplicationListener {\n\n    @Override\n    public boolean supportsEventType(ResolvableType resolvableType) {\n        Class<?> type = resolvableType.getRawClass();\n        if (type != null) {\n            return RefreshEvent.class.isAssignableFrom(type)\n                    || CollectEvent.class.isAssignableFrom(type)\n                    || AlarmCheckEvent.class.isAssignableFrom(type);\n        }\n        return false;\n    }\n\n    @Override\n    public void onApplicationEvent(@NonNull ApplicationEvent event) {\n        try {\n            if (event instanceof RefreshEvent) {\n                doRefresh(((RefreshEvent) event).getDtpProperties());\n            } else if (event instanceof CollectEvent) {\n                doCollect(((CollectEvent) event).getDtpProperties());\n            } else if (event instanceof AlarmCheckEvent) {\n                doAlarmCheck(((AlarmCheckEvent) event).getDtpProperties());\n            }\n        } catch (Exception e) {\n            log.error(\"DynamicTp adapter， event handle failed.\"， e);\n        }\n    }\n\n}\n    /**\n     * Do refresh.\n     *\n     * @param dtpProperties dtpProperties\n     */\n    protected void doRefresh(DtpProperties dtpProperties) {\n        val handlerMap = ApplicationContextHolder.getBeansOfType(DtpAdapter.class);\n        if (CollectionUtils.isEmpty(handlerMap)) {\n            return;\n        }\n        handlerMap.forEach((k， v) -> v.refresh(dtpProperties));\n    }\n```\n\n[![image-20230218112109807](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png)\n\n## 2.3 线程池类型\n\n> DtpLifecycleSupport\n\nDtpLifecycleSupport 继承了 JUC ThreadPoolExecutor，对原生线程池进行了增强\n\n```java\n@Slf4j\npublic abstract class DtpLifecycleSupport extends ThreadPoolExecutor implements InitializingBean， DisposableBean {\n\n   \n    protected String threadPoolName;\n\n    /**\n     * Whether to wait for scheduled tasks to complete on shutdown，\n     * not interrupting running tasks and executing all tasks in the queue.\n     * <p>\n     * 在关闭线程池的时候是否等待任务执行完毕，不会打断运行中的任务，并且会执行队列中的所有任务\n     */\n    protected boolean waitForTasksToCompleteOnShutdown = false;\n\n    /**\n     * The maximum number of seconds that this executor is supposed to block\n     * on shutdown in order to wait for remaining tasks to complete their execution\n     * before the rest of the container continues to shut down.\n     * <p>\n     * 在线程池关闭时等待的最大时间，目的就是等待线程池中的任务运行完毕。\n     */\n    protected int awaitTerminationSeconds = 0;\n\n    public DtpLifecycleSupport(int corePoolSize，\n                               int maximumPoolSize，\n                               long keepAliveTime，\n                               TimeUnit unit，\n                               BlockingQueue<Runnable> workQueue，\n                               ThreadFactory threadFactory) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);\n    }\n\n    @Override\n    public void afterPropertiesSet() {\n        DtpProperties dtpProperties = ApplicationContextHolder.getBean(DtpProperties.class);\n        // 子类实现\n        initialize(dtpProperties);\n    }\n\n   \n}\n```\n\n提供了两个增强字段 `waitForTasksToCompleteOnShutdown` 和 `awaitTerminationSeconds`\n\n我们以此来看下\n\n`waitForTasksToCompleteOnShutdown` 作用在线程池销毁阶段\n\n```java\npublic void internalShutdown() {\n        if (log.isInfoEnabled()) {\n            log.info(\"Shutting down ExecutorService， poolName: {}\"， threadPoolName);\n        }\n        // 如果需要等待任务执行完毕，则调用 shutdown()会执行先前已提交的任务，拒绝新任务提交，线程池状态变成 SHUTDOWN\n        if (this.waitForTasksToCompleteOnShutdown) {\n            this.shutdown();\n        } else {\n            // 如果不需要等待任务执行完毕，则直接调用shutdownNow()方法，尝试中断正在执行的任务，返回所有未执行的任务，线程池状态变成 STOP， 然后调用 Future 的 cancel 方法取消\n            for (Runnable remainingTask : this.shutdownNow()) {\n                cancelRemainingTask(remainingTask);\n            }\n        }\n        awaitTerminationIfNecessary();\n    }\n```\n\n总结下它的作用就是 在关闭线程池的时候看是否等待任务执行完毕，如果需要等待则会拒绝新任务的提交，执行先前已提交的任务，否则中断正在执行的任务。\n\n而 `awaitTerminationSeconds` 字段主要是配合 shutdown 使用，阻塞当前线程，等待已提交的任务执行完毕或者超时的最大时间，等待线程池中的任务运行结束。\n\n\n\n> DtpExecutor\n\nDtpExecutor 也就是我们项目中横贯整个流程的动态线程池，它继承自 DtpLifecycleSupport，主要是也是实现对基本线程池的增强。\n\n```java\n@Slf4j\npublic class DtpExecutor extends DtpLifecycleSupport implements SpringExecutor {\n\n    /**\n     * Simple Business alias Name of Dynamic ThreadPool. Use for notify.\n     */\n    private String threadPoolAliasName;\n\n    /**\n     * RejectHandler name.\n     */\n    private String rejectHandlerName;\n\n    /**\n     * If enable notify.\n     */\n    private boolean notifyEnabled;\n\n    /**\n     * Notify items， see {@link NotifyItemEnum}.\n     * <p>\n     * 需要提醒的平台\n     */\n    private List<NotifyItem> notifyItems;\n\n    /**\n     * Task wrappers， do sth enhanced.\n     */\n    private List<TaskWrapper> taskWrappers = Lists.newArrayList();\n\n    /**\n     * If pre start all core threads.\n     * <p>\n     * 线程是否需要提前预热，真正调用的还是ThreadPoolExecutor的对应方法\n     */\n    private boolean preStartAllCoreThreads;\n\n    /**\n     * Task execute timeout， unit (ms)， just for statistics.\n     */\n    private long runTimeout;\n\n    /**\n     * Task queue wait timeout， unit (ms)， just for statistics.\n     */\n    private long queueTimeout;\n\n    /**\n     * Total reject count.\n     */\n    private final LongAdder rejectCount = new LongAdder();\n\n    /**\n     * Count run timeout tasks.\n     */\n    private final LongAdder runTimeoutCount = new LongAdder();\n\n    /**\n     * Count queue wait timeout tasks.\n     */\n    private final LongAdder queueTimeoutCount = new LongAdder();\n\n    public DtpExecutor(int corePoolSize， int maximumPoolSize， long keepAliveTime， TimeUnit unit， BlockingQueue<Runnable> workQueue， ThreadFactory threadFactory， RejectedExecutionHandler handler) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);\n        this.rejectHandlerName = handler.getClass().getSimpleName();\n        setRejectedExecutionHandler(RejectHandlerGetter.getProxy(handler));\n    }\n\n    @Override\n    public void execute(Runnable task， long startTimeout) {\n        execute(task);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param command the runnable task\n     */\n    @Override\n    public void execute(Runnable command) {\n        String taskName = null;\n        if (command instanceof NamedRunnable) {\n            taskName = ((NamedRunnable) command).getName();\n        }\n\n        if (CollectionUtils.isNotEmpty(taskWrappers)) {\n            for (TaskWrapper t : taskWrappers) {\n                command = t.wrap(command);\n            }\n        }\n\n        if (runTimeout > 0 || queueTimeout > 0) {\n            command = new DtpRunnable(command， taskName);\n        }\n        super.execute(command);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param t the thread that will run task {@code r}\n     * @param r the task that will be executed\n     */\n    @Override\n    protected void beforeExecute(Thread t， Runnable r) {\n        if (!(r instanceof DtpRunnable)) {\n            super.beforeExecute(t， r);\n            return;\n        }\n        DtpRunnable runnable = (DtpRunnable) r;\n        long currTime = TimeUtil.currentTimeMillis();\n        if (runTimeout > 0) {\n            runnable.setStartTime(currTime);\n        }\n        if (queueTimeout > 0) {\n            long waitTime = currTime - runnable.getSubmitTime();\n            if (waitTime > queueTimeout) {\n                queueTimeoutCount.increment();\n                AlarmManager.doAlarmAsync(this， QUEUE_TIMEOUT);\n                if (StringUtils.isNotBlank(runnable.getTaskName())) {\n                    log.warn(\"DynamicTp execute， queue timeout， poolName: {}， taskName: {}， waitTime: {}ms\"， this.getThreadPoolName()， runnable.getTaskName()， waitTime);\n                }\n            }\n        }\n\n        super.beforeExecute(t， r);\n    }\n\n    /**\n     * 增强方法\n     *\n     * @param r the runnable that has completed\n     * @param t the exception that caused termination， or null if\n     *          execution completed normally\n     */\n    @Override\n    protected void afterExecute(Runnable r， Throwable t) {\n\n        if (runTimeout > 0) {\n            DtpRunnable runnable = (DtpRunnable) r;\n            long runTime = TimeUtil.currentTimeMillis() - runnable.getStartTime();\n            if (runTime > runTimeout) {\n                runTimeoutCount.increment();\n                AlarmManager.doAlarmAsync(this， RUN_TIMEOUT);\n                if (StringUtils.isNotBlank(runnable.getTaskName())) {\n                    log.warn(\"DynamicTp execute， run timeout， poolName: {}， taskName: {}， runTime: {}ms\"， this.getThreadPoolName()， runnable.getTaskName()， runTime);\n                }\n            }\n        }\n\n        super.afterExecute(r， t);\n    }\n\n    @Override\n    protected void initialize(DtpProperties dtpProperties) {\n        NotifyHelper.initNotify(this， dtpProperties.getPlatforms());\n\n        if (preStartAllCoreThreads) {\n            // 在没有任务到来之前就创建corePoolSize个线程或一个线程 因为在默认线程池启动的时候是不会启动核心线程的，只有来了新的任务时才会启动线程\n            prestartAllCoreThreads();\n        }\n    }\n}\n```\n\n> EagerDtpExecutor\n\nEagerDtpExecutor 继承了 DtpExecutor，专为 IO 密集场景提供，为什么这么说呢，请看下文分析\n\n```java\npublic class EagerDtpExecutor extends DtpExecutor {\n\n    /**\n     * The number of tasks submitted but not yet finished.\n     * 已经提交的但还没有完成的任务数量\n     */\n    private final AtomicInteger submittedTaskCount = new AtomicInteger(0);\n\n    public EagerDtpExecutor(int corePoolSize，\n                            int maximumPoolSize，\n                            long keepAliveTime，\n                            TimeUnit unit，\n                            BlockingQueue<Runnable> workQueue，\n                            ThreadFactory threadFactory，\n                            RejectedExecutionHandler handler) {\n        super(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory， handler);\n    }\n\n    public int getSubmittedTaskCount() {\n        return submittedTaskCount.get();\n    }\n\n    @Override\n    protected void afterExecute(Runnable r， Throwable t) {\n        submittedTaskCount.decrementAndGet();\n        super.afterExecute(r， t);\n    }\n\n    @Override\n    public void execute(Runnable command) {\n        if (command == null) {\n            throw new NullPointerException();\n        }\n        submittedTaskCount.incrementAndGet();\n        try {\n            super.execute(command);\n        } catch (RejectedExecutionException rx) {\n            // 被拒绝时\n            if (getQueue() instanceof TaskQueue) {\n                // If the Executor is close to maximum pool size， concurrent\n                // calls to execute() may result (due to use of TaskQueue) in\n                // some tasks being rejected rather than queued.\n                // If this happens， add them to the queue.\n                final TaskQueue queue = (TaskQueue) getQueue();\n                try {\n                    // 加入队列中\n                    if (!queue.force(command， 0， TimeUnit.MILLISECONDS)) {\n                        submittedTaskCount.decrementAndGet();\n                        throw new RejectedExecutionException(\"Queue capacity is full.\"， rx);\n                    }\n                } catch (InterruptedException x) {\n                    submittedTaskCount.decrementAndGet();\n                    throw new RejectedExecutionException(x);\n                }\n            } else {\n                submittedTaskCount.decrementAndGet();\n                throw rx;\n            }\n        }\n    }\n}\n```\n\n来看 execute 执行方法，当捕获住拒绝异常时，说明线程池队列已满且大于最大线程数，如果当前队列是\n\nTaskQueue 则重新将拒绝任务加入队列中，加入失败则抛出任务拒绝异常。\n\n**来看 TaskQueue 代码实现**\n\n```java\npublic class TaskQueue extends VariableLinkedBlockingQueue<Runnable> {\n\n    private static final long serialVersionUID = -1L;\n\n    private transient EagerDtpExecutor executor;\n\n    public TaskQueue(int queueCapacity) {\n        super(queueCapacity);\n    }\n\n    public void setExecutor(EagerDtpExecutor exec) {\n        executor = exec;\n    }\n\n    @Override\n    public boolean offer(@NonNull Runnable runnable) {\n        if (executor == null) {\n            throw new RejectedExecutionException(\"The task queue does not have executor.\");\n        }\n        int currentPoolThreadSize = executor.getPoolSize();\n        // 线程池中的线程数等于最大线程数的时候，就将任务放进队列等待工作线程处理\n        if (currentPoolThreadSize == executor.getMaximumPoolSize()) {\n            return super.offer(runnable);\n        }\n        // 如果当前未执行的任务数量小于等于当前线程数，还有剩余的worker线程，就将任务放进队列等待工作线程处理\n        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n            return super.offer(runnable);\n        }\n        // 如果当前线程数大于核心线程，但小于最大线程数量，则直接返回false，外层逻辑线程池创建新的线程来执行任务\n        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n            return false;\n        }\n        // currentPoolThreadSize >= max\n        return super.offer(runnable);\n    }\n}\n```\n\n上述代码我们看到 currentPoolThreadSize < executor.getMaximumPoolSize() 会返回 false\n\n底层实现 还是 JUC 的 ThreadPoolExecutor，来看 execute 方法，当前线程数大于核心线程，但小于最大线程数量，则执行 addWorker(command， false)，创建新的线程来执行任务。\n\n```java\n   public void execute(Runnable command) {\n        if (command == null)\n            throw new NullPointerException();\n             // 线程池状态和线程数的整数\n        int c = ctl.get();\n        // 如果当前线程数小于核心线程数，创建 Worker 线程并启动线程\n        if (workerCountOf(c) < corePoolSize) { \n            // 添加任务成功，那么就结束了 结果会包装到 FutureTask 中\n            if (addWorker(command， true)) \n                return;\n            c = ctl.get();\n        }\n         // 要么当前线程数大于等于核心线程数，要么刚刚 addWorker 失败了 ，如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中\n        if (isRunning(c) && workQueue.offer(command)) {\n              // 二次状态检查\n            int recheck = ctl.get(); \n              // 如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略\n            if (! isRunning(recheck) && remove(command)) \n                reject(command);\n              // 如果线程池还是 RUNNING 的，并且线程数为 0，重新创建一个新的线程 这里目的担心任务提交到队列中了，但是线程都关闭了\n            else if (workerCountOf(recheck) == 0) \n                  // 创建Worker，并启动里面的Thread，为什么传null，线程启动后会自动从阻塞队列拉任务执行\n                addWorker(null， false);\n        }\n             // workQueue.offer(command)返回false，以 maximumPoolSize 为界创建新的 worker线程并启动线程，如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略\n        else if (!addWorker(command， false)) \n            reject(command);\n   }\n```\n\n一看这不就是 Tomcat 线程池处理流程吗，对比于原生 JUC 线程池提交任务流程\n\n**看下原生 JUC 线程池提交任务的流程**\n\n- 当前线程数小于核心线程数，则创建一个新的线程来执行任务\n- 当前线程数大于等于核心线程数，且阻塞队列未满，则将任务添加到队列中\n- 如果阻塞队列已满，当前线程数大于等于核心线程数，当前线程数小于最大线程数，则创建并启动一个线程来执行新提交的任务\n- 若当前线程数大于等于最大线程数，且阻塞队列已满，此时会执行拒绝策略\n\n来看下原生 JUC 线程池提交流程，引用美团线程池篇中的图\n[![img](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png)\n\n原生 JUC 线程池核心思想就是就是先让核心线程数的线程工作，多余的任务统统塞到阻塞队列，阻塞队列塞不下才再多创建线程来工作，这种情况下当大量请求提交时，大量的请求很有可能都会被阻塞在队列中，而线程还没有创建到最大线程数，导致用户请求处理很慢，用户体验很差，而且当我们的工作队列设置得很大时，最大线程数这个参数显得没有意义，因为队列很难满，或者到满的时候再去扩容线程池已经于事无补了。\n\n**那如何解决呢？**\n\n我们有没有办法让线程池更激进一点呢，优先开启更多的线程，而把队列当成一个后备方案。\n\n重写了execute()方法，当抛出拒绝策略了尝试一次往阻塞队列里插入任务，尽最大努力的去执行任务，新增阻塞队列继承了 LinkedBlockingQueue，重写了offer()方法，重写了offer()方法，每次向队列插入任务，判断如果当前线程数小于最大线程数则插入失败。进而让线程池创建新线程来处理任务。\n\n**如下图所示：**\n\n[![img](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png)\n\n总结：知识是相通的，要学以致用\n\n## 2.4 报警通知\n\n关于分析报警通知，可以从 AlarmManager 和 NoticeManager 这两个类入手，实际就是分别构造了一个报警通知责任链，在需要报警通知的时候，调用责任链执行。\n\n先来看 AlarmManager 的代码实现\n\n```java\n@Slf4j\npublic class AlarmManager {\n\n    private static final ExecutorService ALARM_EXECUTOR = ThreadPoolBuilder.newBuilder()\n            .threadPoolName(\"dtp-alarm\")\n            .threadFactory(\"dtp-alarm\")\n            .corePoolSize(2)\n            .maximumPoolSize(4)\n            .workQueue(LINKED_BLOCKING_QUEUE.getName()， 2000， false， null)\n            .rejectedExecutionHandler(RejectedTypeEnum.DISCARD_OLDEST_POLICY.getName())\n            .buildCommon();\n\n    private static final InvokerChain<BaseNotifyCtx> ALARM_INVOKER_CHAIN;\n\n    static {\n        // 构造责任链\n        ALARM_INVOKER_CHAIN = NotifyFilterBuilder.getAlarmInvokerChain();\n    }\n\n    private AlarmManager() {\n    }\n    \n}\n```\n\n责任链的构造\n\n```java\npublic class NotifyFilterBuilder {\n\n    private NotifyFilterBuilder() { }\n\n    public static InvokerChain<BaseNotifyCtx> getAlarmInvokerChain() {\n        val filters = ApplicationContextHolder.getBeansOfType(NotifyFilter.class);\n        Collection<NotifyFilter> alarmFilters = Lists.newArrayList(filters.values());\n        alarmFilters.add(new AlarmBaseFilter());\n        alarmFilters = alarmFilters.stream()\n                .filter(x -> x.supports(NotifyTypeEnum.ALARM))\n                .sorted(Comparator.comparing(Filter::getOrder))\n                .collect(Collectors.toList());\n        // 构造ALARM_FILTER_CHAIN链\n        return InvokerChainFactory.buildInvokerChain(new AlarmInvoker()， alarmFilters.toArray(new NotifyFilter[0]));\n    }\n\n    public static InvokerChain<BaseNotifyCtx> getCommonInvokerChain() {\n        val filters = ApplicationContextHolder.getBeansOfType(NotifyFilter.class);\n        Collection<NotifyFilter> noticeFilters = Lists.newArrayList(filters.values());\n        noticeFilters.add(new NoticeBaseFilter());\n        noticeFilters = noticeFilters.stream()\n                .filter(x -> x.supports(NotifyTypeEnum.COMMON))\n                .sorted(Comparator.comparing(Filter::getOrder))\n                .collect(Collectors.toList());\n        return InvokerChainFactory.buildInvokerChain(new NoticeInvoker()， noticeFilters.toArray(new NotifyFilter[0]));\n    }\n}\npublic final class InvokerChainFactory {\n\n    private InvokerChainFactory() { }\n\n    @SafeVarargs\n    public static<T> InvokerChain<T> buildInvokerChain(Invoker<T> target， Filter<T>... filters) {\n\n        InvokerChain<T> invokerChain = new InvokerChain<>();\n        Invoker<T> last = target;\n        for (int i = filters.length - 1; i >= 0; i--) {\n            Invoker<T> next = last;\n            Filter<T> filter = filters[i];\n            last = context -> filter.doFilter(context， next);\n        }\n        invokerChain.setHead(last);\n        return invokerChain;\n    }\n}\n```\n\n执行报警方法调用如下\n\n```java\n    public static void doAlarm(ExecutorWrapper executorWrapper， NotifyItemEnum notifyItemEnum) {\n        // 根据告警类型获取告警项配置，一个线程池可以配置多个NotifyItem，这里需要过滤\n        NotifyHelper.getNotifyItem(executorWrapper， notifyItemEnum).ifPresent(notifyItem -> {\n            // 执行责任链\n            val alarmCtx = new AlarmCtx(executorWrapper， notifyItem);\n            ALARM_INVOKER_CHAIN.proceed(alarmCtx);\n        });\n    }\n```\n\n执行责任链，真正执行报警通知的代码如下\n\n```java\npublic class AlarmInvoker implements Invoker<BaseNotifyCtx> {\n\n    @Override\n    public void invoke(BaseNotifyCtx context) {\n\n        val alarmCtx = (AlarmCtx) context;\n        val executorWrapper = alarmCtx.getExecutorWrapper();\n        val notifyItem = alarmCtx.getNotifyItem();\n        val alarmInfo = AlarmCounter.getAlarmInfo(executorWrapper.getThreadPoolName()， notifyItem.getType());\n        alarmCtx.setAlarmInfo(alarmInfo);\n\n        DtpNotifyCtxHolder.set(context);\n        // 真正的发送告警的逻辑\n        NotifierHandler.getInstance().sendAlarm(NotifyItemEnum.of(notifyItem.getType()));\n        AlarmCounter.reset(executorWrapper.getThreadPoolName()， notifyItem.getType());\n    }\n}\n```\n\n调用 NotifierHandler#sendAlarm()\n\n```java\n@Slf4j\npublic final class NotifierHandler {\n\n    private static final Map<String， DtpNotifier> NOTIFIERS = new HashMap<>();\n\n    private NotifierHandler() {\n        ServiceLoader<DtpNotifier> loader = ServiceLoader.load(DtpNotifier.class);\n        for (DtpNotifier notifier : loader) {\n            NOTIFIERS.put(notifier.platform()， notifier);\n        }\n\n        DtpNotifier dingNotifier = new DtpDingNotifier(new DingNotifier());\n        DtpNotifier wechatNotifier = new DtpWechatNotifier(new WechatNotifier());\n        DtpNotifier larkNotifier = new DtpLarkNotifier(new LarkNotifier());\n        NOTIFIERS.put(dingNotifier.platform()， dingNotifier);\n        NOTIFIERS.put(wechatNotifier.platform()， wechatNotifier);\n        NOTIFIERS.put(larkNotifier.platform()， larkNotifier);\n    }\n\n    public void sendAlarm(NotifyItemEnum notifyItemEnum) {\n\n        try {\n            NotifyItem notifyItem = DtpNotifyCtxHolder.get().getNotifyItem();\n            for (String platform : notifyItem.getPlatforms()) {\n                DtpNotifier notifier = NOTIFIERS.get(platform.toLowerCase());\n                if (notifier != null) {\n                    notifier.sendAlarmMsg(notifyItemEnum);\n                }\n            }\n        } finally {\n            DtpNotifyCtxHolder.remove();\n        }\n    }\n}\n```\n\n最后调用 notifier.sendAlarmMsg(notifyItemEnum)发送消息\n\n```java\n    @Override\n    public void sendAlarmMsg(NotifyItemEnum notifyItemEnum) {\n        NotifyHelper.getPlatform(platform()).ifPresent(platform -> {\n            // 构建报警信息\n            String content = buildAlarmContent(platform， notifyItemEnum);\n            if (StringUtils.isBlank(content)) {\n                return;\n            }\n            // 发送\n            notifier.send(platform， content);\n        });\n    }\n```\n\n[![image-20230218132044086](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png)\n\n## 2.5 监控\n\n入口 DtpMonitor\n\n```java\n@Slf4j\npublic class DtpMonitor implements ApplicationRunner， Ordered {\n\n    private static final ScheduledExecutorService MONITOR_EXECUTOR = new ScheduledThreadPoolExecutor(\n            1， new NamedThreadFactory(\"dtp-monitor\"， true));\n\n    @Resource\n    private DtpProperties dtpProperties;\n\n    /**\n     * 每隔 monitorInterval（默认为5） 执行监控\n     *\n     * @param args\n     */\n    @Override\n    public void run(ApplicationArguments args) {\n        MONITOR_EXECUTOR.scheduleWithFixedDelay(this::run，\n                0， dtpProperties.getMonitorInterval()， TimeUnit.SECONDS);\n    }\n\n    private void run() {\n        // 所有线程池的名称\n        List<String> dtpNames = DtpRegistry.listAllDtpNames();\n        // 所有标有DynamicTp注解的线程池\n        List<String> commonNames = DtpRegistry.listAllCommonNames();\n        // 检查告警\n        checkAlarm(dtpNames);\n        // 指标收集\n        collect(dtpNames， commonNames);\n    }\n\n    private void collect(List<String> dtpNames， List<String> commonNames) {\n        // 不收集指标\n        if (!dtpProperties.isEnabledCollect()) {\n            return;\n        }\n\n        // 拿到所有的线程池对象，获取到线程池的各种属性统计指标\n        dtpNames.forEach(x -> {\n            DtpExecutor executor = DtpRegistry.getDtpExecutor(x);\n            ThreadPoolStats poolStats = MetricsConverter.convert(executor);\n            // 指标收集\n            doCollect(poolStats);\n        });\n        commonNames.forEach(x -> {\n            ExecutorWrapper wrapper = DtpRegistry.getCommonExecutor(x);\n            // 转换 ThreadPoolStats\n            ThreadPoolStats poolStats = MetricsConverter.convert(wrapper);\n            // 指标收集\n            doCollect(poolStats);\n        });\n        // 发送一个CollectEvent事件\n        publishCollectEvent();\n    }\n\n    /**\n     * 针对每一个线程池，使用其名称从注册表中获取到线程池对象，然后触发告警\n     *\n     * @param dtpNames\n     */\n    private void checkAlarm(List<String> dtpNames) {\n        dtpNames.forEach(x -> {\n            DtpExecutor executor = DtpRegistry.getDtpExecutor(x);\n            AlarmManager.doAlarmAsync(executor， SCHEDULE_NOTIFY_ITEMS);\n        });\n        // 发送告警AlarmCheckEvent事件\n        publishAlarmCheckEvent();\n    }\n\n    private void doCollect(ThreadPoolStats threadPoolStats) {\n        try {\n            CollectorHandler.getInstance().collect(threadPoolStats， dtpProperties.getCollectorTypes());\n        } catch (Exception e) {\n            log.error(\"DynamicTp monitor， metrics collect error.\"， e);\n        }\n    }\n\n    private void publishCollectEvent() {\n        CollectEvent event = new CollectEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n\n    private void publishAlarmCheckEvent() {\n        AlarmCheckEvent event = new AlarmCheckEvent(this， dtpProperties);\n        ApplicationContextHolder.publishEvent(event);\n    }\n\n    @Override\n    public int getOrder() {\n        return Ordered.HIGHEST_PRECEDENCE + 2;\n    }\n}\n```\n\n[![image-20230218132312173](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png)](https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png)\n\n代码比较易懂，这里就不在叙述了。\n\n# 3. 总结\n\n**dynamic-tp** 设计巧妙，代码中设计模式先行，结构清晰易懂，代码规整，同时提供了很多扩展点，通过利用了 Spring 的扩展，和 JUC 原生线程池优势，功能强大。","slug":"2023-05-24-dynamic-tp源码分析-","published":1,"updated":"2024-10-11T09:11:37.908Z","comments":1,"photos":[],"link":"","_id":"cm2a95bsb000kucq5footgvtz","content":"<h1 id=\"dynamic-tp核心流程源码解读篇\"><a href=\"#dynamic-tp核心流程源码解读篇\" class=\"headerlink\" title=\"dynamic-tp核心流程源码解读篇\"></a>dynamic-tp核心流程源码解读篇</h1><p>by MRyan, 2023-02-18</p>\n<h1 id=\"序-介绍\"><a href=\"#序-介绍\" class=\"headerlink\" title=\"序. 介绍\"></a>序. 介绍</h1><p><strong>dynamic-tp</strong> 是一款动态线程池组件，可以实现线程池的实时动态调参及监控报警，线程池配置放在配置中心统一管理，达成业务代码零侵入，支持多配置中心的选择和常见的第三方组件的线程池的集成管理。</p>\n<p><code>官网</code>: <a href=\"https://dynamictp.top/\">https://dynamictp.top/</a></p>\n<p><code>Gitee</code>: <a href=\"https://gitee.com/dromara/dynamic-tp\">https://gitee.com/dromara/dynamic-tp</a></p>\n<p><code>Github</code>: <a href=\"https://github.com/dromara/dynamic-tp\">https://github.com/dromara/dynamic-tp</a></p>\n<p>详细介绍及组件的基本使用，可以访问 dynamic-tp 官网。</p>\n<p>本文主要是对 dynamic-tp 版本 <code>1.1.0</code> 源码的分析，学习。</p>\n<h1 id=\"1-如何使用\"><a href=\"#1-如何使用\" class=\"headerlink\" title=\"1. 如何使用\"></a>1. 如何使用</h1><p>以选择配置中心 zookeeper 为例</p>\n<p><strong>引入 starter 实用</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.dynamictp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dynamic-tp-spring-boot-starter-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yml</code> 需配置 zookeeper 地址节点信息</p>\n<p>ps: zookeeper 支持 properties &amp; json 配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"> <span class=\"attr\">port:</span> <span class=\"number\">8888</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">     <span class=\"attr\">application:</span></span><br><span class=\"line\">       <span class=\"attr\">name:</span> <span class=\"string\">dynamic-tp-zookeeper-demo</span></span><br><span class=\"line\">     <span class=\"attr\">dynamic:</span></span><br><span class=\"line\">       <span class=\"attr\">tp:</span></span><br><span class=\"line\">         <span class=\"attr\">config-type:</span> <span class=\"string\">properties</span>         </span><br><span class=\"line\">         <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">           <span class=\"attr\">config-version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">           <span class=\"attr\">zk-connect-str:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:2181</span></span><br><span class=\"line\">           <span class=\"attr\">root-node:</span> <span class=\"string\">/configserver/dev</span></span><br><span class=\"line\">           <span class=\"attr\">node:</span> <span class=\"string\">dynamic-tp-zookeeper-demo</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置如下（详细配置相关可翻看官网学习）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.dynamic.tp.enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.enabledBanner=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.enabledCollect=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.collectorType=logging</span><br><span class=\"line\">spring.dynamic.tp.monitorInterval=<span class=\"number\">5</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].threadPoolName=tpExecutor</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].corePoolSize=<span class=\"number\">6</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].executorType=common</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].maximumPoolSize=<span class=\"number\">8</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].queueCapacity=<span class=\"number\">200</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].queueType=VariableLinkedBlockingQueue</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].rejectedHandlerType=CallerRunsPolicy</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].keepAliveTime=<span class=\"number\">50</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].allowCoreThreadTimeOut=<span class=\"literal\">false</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].threadNamePrefix=test</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].waitForTasksToCompleteOnShutdown=<span class=\"literal\">false</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].preStartAllCoreThreads=<span class=\"literal\">false</span> </span><br></pre></td></tr></table></figure>\n\n<p>启动类加 @EnableDynamicTp 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE， ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DtpBeanDefinitionRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableDynamicTp &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动项目，运行以下测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过依赖注入的方式获取</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ThreadPoolExecutor tpExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   tpExecutor.execute(() -&gt; System.out.println(<span class=\"string\">&quot;tpExecutor&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 通过 DtpRegistry 手动获取</span></span><br><span class=\"line\">   <span class=\"type\">DtpExecutor</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> DtpRegistry.getExecutor(<span class=\"string\">&quot;tpExecutor&quot;</span>);</span><br><span class=\"line\">   dtpExecutor.execute(() -&gt; System.out.println(<span class=\"string\">&quot;tpExecutor&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续在程序正常运行中，只需要修改配置客户端监听到节点变更，自动拉取最新的线程池配置并刷新，即可完成线程池的动态调参功能。</p>\n<p>如果想普通的 JUC 线程池集成在 dynamic-tp 监控体系中，可以 @Bean 定义时加 @DynamicTp 注解。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DynamicTp(&quot;tpExecutor&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ThreadPoolExecutor <span class=\"title function_\">tpExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是不是非常容易上手，非常方便食用，那 dynamic-tp 是如何支持配置化，如何实现修改配置后线程池动态调参，它如何设计的呢，下面我们来分析下。</p>\n<h1 id=\"2-源码分析\"><a href=\"#2-源码分析\" class=\"headerlink\" title=\"2. 源码分析\"></a>2. 源码分析</h1><p><strong>前置知识点</strong>：对 Java 线程池不是很了解的可以看下这篇文章<a href=\"https://www.wormholestack.com/archives/668/\">《深入Java线程池》</a></p>\n<p>在分析源码之前，我们先来思考下如果是我们来实现 <code>动态线程池组件</code> 应该如何设计。</p>\n<p>@ 首先不论是硬编码的线程池还是通过配置化动态生成的线程池都是一类线程池（同一基类），而这一类线程池的参数可以抽象成<code>配置</code>，这个<code>配置</code>既可以是本项目中的文件；也可以是任意远程端口的文件，例如包括业界的配置中心们例如 nacos，zookeeper，apollo，etcd 等；当然它甚至可以不依赖配置中心，通过前端管理系统页面配置，走DB，通过刷新 API 接口中的 String 类型的文本配置，进而刷新线程池配置，这也是一种实现思路。</p>\n<p>@ 提供一个功能入口可以将<code>配置</code>构造成一个线程池对象，内部维护一个线程池注册表，将<code>配置</code>对应的线程池添加至注册表中。</p>\n<p>@ 实例化线程池对象，Spring 环境则注入依赖 Bean，以供 IOC 容器使用。</p>\n<p>@ 项目启动时首先先加载<code>配置</code>实例化线程池对象</p>\n<p>@ 如果<code>配置</code>指向的是远端配置中心，则注册监听器，当远端注册配置中心刷新时回调，当前系统监听到回调刷新<code>配置</code>，刷新线程池（动态调参），刷新本地线程池注册表。</p>\n<p>至此我们设计出来的<code>简易动态线程池组件</code>应该可以基本使用了。</p>\n<p>其实<code>简易动态线程池组件</code>还有很多进步的空间，例如线程池调参监控，异常报警等。</p>\n<p>当然以上说的这些基础功能以及额外的高级功能，dynamic-tp 都已经实现了，不过它目前没有提供支持我们刚刚所说通过管理系统页面配置走 DB 通过接口刷新的官方实现，且不支持除配置中心应用外的选择，也就是说无配置中心应用，目前不支持线程池动态调参（但支持监控）,但事实上你可以根据它提供的 SPI 自行实现。<br>这可能 dynamic-tp 定位是轻量级动态线程池组件，且配置中心是现在大多数互联网系统都会使用的组件有关。</p>\n<p>接下来我们来通过分析源码来看它是如何具体实现的。</p>\n<h2 id=\"2-1-配置\"><a href=\"#2-1-配置\" class=\"headerlink\" title=\"2.1 配置\"></a>2.1 配置</h2><p>dynamic-tp 通过 DtpProperties 来做<code>配置</code>的统一收口，这个配置包括本地文件或者配置中心中的文件(properties，json，yml，txt，xml)</p>\n<p>代码如下：</p>\n<p>可以看到目前已支持 Nacos、Apollo、Zookeeper、Consul、Etcd 配置中心</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = DynamicTpConst.MAIN_PROPERTIES_PREFIX)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enabled DynamicTp.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabled</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If print banner.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabledBanner</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Nacos config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Nacos nacos;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Apollo config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Apollo apollo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Zookeeper config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Zookeeper zookeeper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Etcd config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Etcd etcd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Config file type.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">configType</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yml&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enabled metrics collect.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabledCollect</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Metrics collector types， default is logging.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; collectorTypes = Lists.newArrayList(MICROMETER.name());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Metrics log storage path， just for &quot;logging&quot; type.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String logPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Monitor interval， time unit（s）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">monitorInterval</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ThreadPoolExecutor configs.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ThreadPoolProperties&gt; executors;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Tomcat worker thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties tomcatTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Jetty thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties jettyTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Undertow thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties undertowTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dubbo thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; dubboTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Hystrix thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; hystrixTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RocketMq thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; rocketMqTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Grpc thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; grpcTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Motan server thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; motanTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Okhttp3 thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; okhttp3Tp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Brpc thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; brpcTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Tars thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; tarsTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sofa thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; sofaTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Notify platform configs.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;NotifyPlatform&gt; platforms;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nacos</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String dataId;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String group;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Apollo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zookeeper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String zkConnectStr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String configVersion;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String node;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String configKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Etcd config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Etcd</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String user;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;UTF-8&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">Boolean</span> <span class=\"variable\">authEnable</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">authority</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ssl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中提供了一个配置解析接口 <code>ConfigParser</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ConfigParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 是否支持配置解析</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(ConfigFileTypeEnum type)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 解析支持的类型</span></span><br><span class=\"line\">    List&lt;ConfigFileTypeEnum&gt; <span class=\"title function_\">types</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 解析</span></span><br><span class=\"line\">    Map&lt;Object， Object&gt; doParse(String content) <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 解析指定前缀</span></span><br><span class=\"line\">    Map&lt;Object， Object&gt; doParse(String content， String prefix) <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ConfigFileTypeEnum 如下，覆盖了主流文件类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ConfigFileTypeEnum</span> &#123;</span><br><span class=\"line\">    PROPERTIES(<span class=\"string\">&quot;properties&quot;</span>)，</span><br><span class=\"line\">    XML(<span class=\"string\">&quot;xml&quot;</span>)，</span><br><span class=\"line\">    JSON(<span class=\"string\">&quot;json&quot;</span>)，</span><br><span class=\"line\">    YML(<span class=\"string\">&quot;yml&quot;</span>)，</span><br><span class=\"line\">    YAML(<span class=\"string\">&quot;yaml&quot;</span>)，</span><br><span class=\"line\">    TXT(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中实现了配置解析基类，以及默认提供了 3 中文件类型配置解析类，json，properties以及yaml，使用者完全可以通过继承 AbstractConfigParser 来补充配置解析模式。</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png\" alt=\"image-20230217231356426\"></a></p>\n<p>AbstractConfigParser 代码如下，模板方法由子类实现具体的解析逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractConfigParser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(ConfigFileTypeEnum type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.types().contains(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Object， Object&gt; doParse(String content， String prefix) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doParse(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子类的实现这里就不看了，大差不差就是通过读取文件，解析每一行配置项，最后将结果封装成Map&lt;Object， Object&gt; result 返回。</p>\n<p>接着通过 Spring-bind 提供的解析方法 将 Map&lt;Object， Object&gt; result 绑定到 DtpProperties 配置类上</p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertiesBinder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">PropertiesBinder</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindDtpProperties</span><span class=\"params\">(Map&lt;?， Object&gt; properties， DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurationPropertySource</span> <span class=\"variable\">sources</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapConfigurationPropertySource</span>(properties);</span><br><span class=\"line\">        <span class=\"type\">Binder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Binder</span>(sources);</span><br><span class=\"line\">        <span class=\"type\">ResolvableType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ResolvableType.forClass(DtpProperties.class);</span><br><span class=\"line\">        Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(dtpProperties);</span><br><span class=\"line\">        binder.bind(MAIN_PROPERTIES_PREFIX， target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindDtpProperties</span><span class=\"params\">(Environment environment， DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Binder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> Binder.get(environment);</span><br><span class=\"line\">        <span class=\"type\">ResolvableType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ResolvableType.forClass(DtpProperties.class);</span><br><span class=\"line\">        Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(dtpProperties);</span><br><span class=\"line\">        binder.bind(MAIN_PROPERTIES_PREFIX， target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里已经拿到了<code>配置</code>，我们来看接下来的流程。</p>\n<h2 id=\"2-2-注册线程池\"><a href=\"#2-2-注册线程池\" class=\"headerlink\" title=\"2.2 注册线程池\"></a>2.2 注册线程池</h2><p>DtpBeanDefinitionRegistrar 实现了 ConfigurationClassPostProcessor 利用 Spring 的动态注册 bean 机制，在 bean 初始化 之前 注册 BeanDefinition 以达到注入 bean 的目的</p>\n<p><strong>ps</strong>：最终被 Spring ConfigurationClassPostProcessor 执行出来 对这块不熟悉的小伙伴可以去翻看 Spring 源码。</p>\n<p>来看下 DtpBeanDefinitionRegistrar 具体做了什么吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>， EnvironmentAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.environment = environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata， BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DtpProperties</span> <span class=\"variable\">dtpProperties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpProperties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 从 Environment 读取配置信息绑定到 DtpProperties</span></span><br><span class=\"line\">        PropertiesBinder.bindDtpProperties(environment， dtpProperties);</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executors</span> <span class=\"operator\">=</span> dtpProperties.getExecutors();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(executors)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp registrar， no executors are configured.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历并注册线程池 BeanDefinition</span></span><br><span class=\"line\">        executors.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 类型选择，common-&gt;DtpExecutor，eager-&gt;EagerDtpExecutor </span></span><br><span class=\"line\">            Class&lt;?&gt; executorTypeClass = ExecutorType.getClass(x.getExecutorType());</span><br><span class=\"line\">            <span class=\"comment\">// 通过 ThreadPoolProperties 来构造线程池所需要的属性</span></span><br><span class=\"line\">            Map&lt;String， Object&gt; properties = buildPropertyValues(x);</span><br><span class=\"line\">            Object[] args = buildConstructorArgs(executorTypeClass， x);</span><br><span class=\"line\">            <span class=\"comment\">// 工具类 BeanDefinition 注册 Bean 相当于手动用 @Bean 声明线程池对象</span></span><br><span class=\"line\">            BeanUtil.registerIfAbsent(registry， x.getThreadPoolName()， executorTypeClass， properties， args);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>registerBeanDefinitions 方法中主要做了这么几件事</p>\n<ol>\n<li>从 Environment 读取配置信息绑定到 DtpProperties</li>\n<li>获取配置文件中配置的线程池，如果没有则结束</li>\n<li>遍历线程池，绑定配置构造线程池所需要的属性，根据配置中的 executorType 注册不同类型的线程池 Bean(下面会说)</li>\n<li>BeanUtil#registerIfAbsent() 注册 Bean</li>\n</ol>\n<p><code>ExecutorType</code> 目前项目支持 3 种类型，分别对应 3 个线程池，这里先跳过，我们下文详细介绍</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png\" alt=\"image-20230218092135653\"></a></p>\n<p>回到刚才的步骤，接下来通过 ThreadPoolProperties 来构造线程池所需要的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String， Object&gt; buildPropertyValues(ThreadPoolProperties tpp) &#123;</span><br><span class=\"line\">       Map&lt;String， Object&gt; properties = Maps.newHashMap();</span><br><span class=\"line\">       properties.put(THREAD_POOL_NAME， tpp.getThreadPoolName());</span><br><span class=\"line\">       properties.put(THREAD_POOL_ALIAS_NAME， tpp.getThreadPoolAliasName());</span><br><span class=\"line\">       properties.put(ALLOW_CORE_THREAD_TIMEOUT， tpp.isAllowCoreThreadTimeOut());</span><br><span class=\"line\">       properties.put(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN， tpp.isWaitForTasksToCompleteOnShutdown());</span><br><span class=\"line\">       properties.put(AWAIT_TERMINATION_SECONDS， tpp.getAwaitTerminationSeconds());</span><br><span class=\"line\">       properties.put(PRE_START_ALL_CORE_THREADS， tpp.isPreStartAllCoreThreads());</span><br><span class=\"line\">       properties.put(RUN_TIMEOUT， tpp.getRunTimeout());</span><br><span class=\"line\">       properties.put(QUEUE_TIMEOUT， tpp.getQueueTimeout());</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">notifyItems</span> <span class=\"operator\">=</span> mergeAllNotifyItems(tpp.getNotifyItems());</span><br><span class=\"line\">       properties.put(NOTIFY_ITEMS， notifyItems);</span><br><span class=\"line\">       properties.put(NOTIFY_ENABLED， tpp.isNotifyEnabled());</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">taskWrappers</span> <span class=\"operator\">=</span> TaskWrappers.getInstance().getByNames(tpp.getTaskWrapperNames());</span><br><span class=\"line\">       properties.put(TASK_WRAPPERS， taskWrappers);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> properties;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择阻塞队列，这里针对 EagerDtpExecutor 做了单独处理，选择了 TaskQueue 作为阻塞队列(下文说明)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Object[] buildConstructorArgs(Class&lt;?&gt; clazz， ThreadPoolProperties tpp) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class=\"line\">     <span class=\"comment\">// 如果是 EagerDtpExecutor 的话，对工作队列就是 TaskQueue</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (clazz.equals(EagerDtpExecutor.class)) &#123;</span><br><span class=\"line\">         taskQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">TaskQueue</span>(tpp.getQueueCapacity());</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 不是 EagerDtpExecutor的话，就根据配置中的 queueType 来选择阻塞的队列</span></span><br><span class=\"line\">         taskQueue = buildLbq(tpp.getQueueType()， tpp.getQueueCapacity()， tpp.isFair()， tpp.getMaxFreeMemory());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">             tpp.getCorePoolSize()，</span><br><span class=\"line\">             tpp.getMaximumPoolSize()，</span><br><span class=\"line\">             tpp.getKeepAliveTime()，</span><br><span class=\"line\">             tpp.getUnit()，</span><br><span class=\"line\">             taskQueue，</span><br><span class=\"line\">             <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadFactory</span>(tpp.getThreadNamePrefix())，</span><br><span class=\"line\">             RejectHandlerGetter.buildRejectedHandler(tpp.getRejectedHandlerType())</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>非 EagerDtpExecutor 则根据配置中的 queueType 来选择阻塞的队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BlockingQueue&lt;Runnable&gt; <span class=\"title function_\">buildLbq</span><span class=\"params\">(String name， <span class=\"type\">int</span> capacity， <span class=\"type\">boolean</span> fair， <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">    BlockingQueue&lt;Runnable&gt; blockingQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Objects.equals(name， ARRAY_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， PRIORITY_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， DELAY_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DelayQueue</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， SYNCHRONOUS_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;&gt;(fair);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_TRANSFER_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_BLOCKING_DEQUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， VARIABLE_LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， MEMORY_SAFE_LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">MemorySafeLinkedBlockingQueue</span>&lt;&gt;(capacity， maxFreeMemory * M_1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (blockingQueue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blockingQueue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    log.error(<span class=\"string\">&quot;Cannot find specified BlockingQueue &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find specified BlockingQueue &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里我们已经构造好了创建一个线程池需要的所有参数</p>\n<p>调用 BeanUtil#registerIfAbsent()，先判断是否同名 bean，如果同名先删除后注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BeanUtil</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerIfAbsent</span><span class=\"params\">(BeanDefinitionRegistry registry，</span></span><br><span class=\"line\"><span class=\"params\">                                        String beanName，</span></span><br><span class=\"line\"><span class=\"params\">                                        Class&lt;?&gt; clazz，</span></span><br><span class=\"line\"><span class=\"params\">                                        Map&lt;String， Object&gt; properties，</span></span><br><span class=\"line\"><span class=\"params\">                                        Object... constructorArgs)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在同名bean，先删除后重新注入bean</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ifPresent(registry， beanName， clazz) || registry.containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp registrar， bean definition already exists， overrides with remote config， beanName: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                    beanName);</span><br><span class=\"line\">            registry.removeBeanDefinition(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doRegister(registry， beanName， clazz， properties， constructorArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册Bean 相当于手动用 <span class=\"doctag\">@Bean</span> 声明线程池对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> registry</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> beanName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clazz</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> constructorArgs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRegister</span><span class=\"params\">(BeanDefinitionRegistry registry，</span></span><br><span class=\"line\"><span class=\"params\">                                  String beanName，</span></span><br><span class=\"line\"><span class=\"params\">                                  Class&lt;?&gt; clazz，</span></span><br><span class=\"line\"><span class=\"params\">                                  Map&lt;String， Object&gt; properties，</span></span><br><span class=\"line\"><span class=\"params\">                                  Object... constructorArgs)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BeanDefinitionBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object constructorArg : constructorArgs) &#123;</span><br><span class=\"line\">            builder.addConstructorArgValue(constructorArg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MapUtils.isNotEmpty(properties)) &#123;</span><br><span class=\"line\">            properties.forEach(builder::addPropertyValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 注册 Bean </span></span><br><span class=\"line\">        registry.registerBeanDefinition(beanName， builder.getBeanDefinition());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此线程池对象已经交由 IOC 容器管理了。</p>\n<p>我们的线程池对象总不能无脑塞入 IOC 容器就不管了吧，肯定是要留根的，也就是需要一个线程池注册表，记录有哪些线程池是受 dynamic-tp 托管的，这样除了可以进行统计外，也就可以实现通知报警了。</p>\n<p>下面我们来看下项目是如何实现注册表的</p>\n<h2 id=\"2-3-注册表\"><a href=\"#2-3-注册表\" class=\"headerlink\" title=\"2.3 注册表\"></a>2.3 注册表</h2><p><code>DtpPostProcessor</code> 利用了 Spring 容器启动 BeanPostProcessor 机制增强机制，在 bean 初始化的时候调用 postProcessAfterInitialization，它实现了获取被 IOC 容器托管的线程池 bean 然后注册到本地的注册表中。</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Object bean， <span class=\"meta\">@NonNull</span> String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只增强线程池相关的类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(bean <span class=\"keyword\">instanceof</span> ThreadPoolExecutor) &amp;&amp; !(bean <span class=\"keyword\">instanceof</span> ThreadPoolTaskExecutor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果是 DtpExecutor 类型注册到注册表 DTP_REGISTRY</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> DtpExecutor) &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> (DtpExecutor) bean;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EagerDtpExecutor) &#123;</span><br><span class=\"line\">                ((TaskQueue) dtpExecutor.getQueue()).setExecutor((EagerDtpExecutor) dtpExecutor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            registerDtp(dtpExecutor);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dtpExecutor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取上下文</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> ApplicationContextHolder.getInstance();</span><br><span class=\"line\">        String dtpAnnotationVal;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取标注 @DynamicTp 注解的 bean 则为基本线程池，但受组件管理监控</span></span><br><span class=\"line\">            <span class=\"type\">DynamicTp</span> <span class=\"variable\">dynamicTp</span> <span class=\"operator\">=</span> applicationContext.findAnnotationOnBean(beanName， DynamicTp.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.nonNull(dynamicTp)) &#123;</span><br><span class=\"line\">                dtpAnnotationVal = dynamicTp.value();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">BeanDefinitionRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> (BeanDefinitionRegistry) applicationContext;</span><br><span class=\"line\">                <span class=\"type\">AnnotatedBeanDefinition</span> <span class=\"variable\">annotatedBeanDefinition</span> <span class=\"operator\">=</span> (AnnotatedBeanDefinition) registry.getBeanDefinition(beanName);</span><br><span class=\"line\">                <span class=\"type\">MethodMetadata</span> <span class=\"variable\">methodMetadata</span> <span class=\"operator\">=</span> (MethodMetadata) annotatedBeanDefinition.getSource();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Objects.isNull(methodMetadata) || !methodMetadata.isAnnotated(DynamicTp.class.getName())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dtpAnnotationVal = Optional.ofNullable(methodMetadata.getAnnotationAttributes(DynamicTp.class.getName()))</span><br><span class=\"line\">                        .orElse(Collections.emptyMap())</span><br><span class=\"line\">                        .getOrDefault(<span class=\"string\">&quot;value&quot;</span>， <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        .toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;There is no bean with the given name &#123;&#125;&quot;</span>， beanName， e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果说bean上面的DynamicTp注解，使用注解的值作为线程池的名称，没有的话就使用bean的名称</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">poolName</span> <span class=\"operator\">=</span> StringUtils.isNotBlank(dtpAnnotationVal) ? dtpAnnotationVal : beanName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ThreadPoolTaskExecutor) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 注册到注册表 COMMON_REGISTRY</span></span><br><span class=\"line\">            <span class=\"type\">ThreadPoolTaskExecutor</span> <span class=\"variable\">taskExecutor</span> <span class=\"operator\">=</span> (ThreadPoolTaskExecutor) bean;</span><br><span class=\"line\">            registerCommon(poolName， taskExecutor.getThreadPoolExecutor());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            registerCommon(poolName， (ThreadPoolExecutor) bean);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态线程池注册 向 Map 集合 put 元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDtp</span><span class=\"params\">(DtpExecutor executor)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.registerDtp(executor， <span class=\"string\">&quot;beanPostProcessor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 非动态线程池注册 向 Map 集合 put 元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> poolName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerCommon</span><span class=\"params\">(String poolName， ThreadPoolExecutor executor)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorWrapper</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExecutorWrapper</span>(poolName， executor);</span><br><span class=\"line\">        DtpRegistry.registerCommon(wrapper， <span class=\"string\">&quot;beanPostProcessor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单总结下，和刚刚我们分析完全一致</p>\n<ol>\n<li>获取到 bean 后，如果是非线程池类型则结束。</li>\n<li>如果是 DtpExecutor 则注册到 DTP_REGISTRY 注册表中</li>\n<li>如果是 非动态线程池且标注了 @DynamicTp 注解则注册到 COMMON_REGISTRY 注册表中</li>\n<li>如果是 非动态线程池且未标注 @DynamicTp 注解则结束不做增强</li>\n</ol>\n<p>DtpRegistry 主要负责 注册、获取、刷新某个动态线程池（刷新线程池我们会下文分析）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpRegistry</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationRunner</span>， Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Maintain all automatically registered and manually registered DtpExecutors.</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态线程池 key为线程池name</span></span><br><span class=\"line\"><span class=\"comment\">     * DtpExecutor ThreadPoolExecutor加强版</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， DtpExecutor&gt; DTP_REGISTRY = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Maintain all automatically registered and manually registered JUC ThreadPoolExecutors.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 标有DynamicTp注解的线程池</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， ExecutorWrapper&gt; COMMON_REGISTRY = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Equator</span> <span class=\"variable\">EQUATOR</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetterBaseEquator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置文件映射</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">listAllDtpNames</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lists.newArrayList(DTP_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">listAllCommonNames</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lists.newArrayList(COMMON_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDtp</span><span class=\"params\">(DtpExecutor executor， String source)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp register dtpExecutor， source: &#123;&#125;， executor: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                source， ExecutorConverter.convert(executor));</span><br><span class=\"line\">        DTP_REGISTRY.putIfAbsent(executor.getThreadPoolName()， executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerCommon</span><span class=\"params\">(ExecutorWrapper wrapper， String source)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp register commonExecutor， source: &#123;&#125;， name: &#123;&#125;&quot;</span>， source， wrapper.getThreadPoolName());</span><br><span class=\"line\">        COMMON_REGISTRY.putIfAbsent(wrapper.getThreadPoolName()， wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DtpExecutor <span class=\"title function_\">getDtpExecutor</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DTP_REGISTRY.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(executor)) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;Cannot find a specified dtpExecutor， name: &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find a specified dtpExecutor， name: &quot;</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorWrapper <span class=\"title function_\">getCommonExecutor</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> COMMON_REGISTRY.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(executor)) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;Cannot find a specified commonExecutor， name: &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find a specified commonExecutor， name: &quot;</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDtpProperties</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.dtpProperties = dtpProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 线程池名称</span></span><br><span class=\"line\">        Set&lt;String&gt; remoteExecutors = Collections.emptySet();</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(dtpProperties.getExecutors())) &#123;</span><br><span class=\"line\">            remoteExecutors = dtpProperties.getExecutors().stream()</span><br><span class=\"line\">                    .map(ThreadPoolProperties::getThreadPoolName)</span><br><span class=\"line\">                    .collect(Collectors.toSet());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// DTP_REGISTRY 中已经注册的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">registeredDtpExecutors</span> <span class=\"operator\">=</span> Sets.newHashSet(DTP_REGISTRY.keySet());</span><br><span class=\"line\">        <span class=\"comment\">// 找出所有线程池中没有在配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">localDtpExecutors</span> <span class=\"operator\">=</span> CollectionUtils.subtract(registeredDtpExecutors， remoteExecutors);</span><br><span class=\"line\">        <span class=\"comment\">// 日志</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DtpRegistry initialization is complete， remote dtpExecutors: &#123;&#125;， local dtpExecutors: &#123;&#125;， local commonExecutors: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                remoteExecutors， localDtpExecutors， COMMON_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，这里不再说明了。</p>\n<p>流程至此，动态线程池，标注了 @DynamicTp 注解的线程池，都已经准备就绪了。</p>\n<p>你可能会问那配置刷新 配置刷新动态调参是如何实现的呢，别急，我们继续分析。</p>\n<h2 id=\"2-4-配置刷新-动态调参\"><a href=\"#2-4-配置刷新-动态调参\" class=\"headerlink\" title=\"2.4 配置刷新 动态调参\"></a>2.4 配置刷新 动态调参</h2><p>Dynamic-tp 提供了配置刷新接口 Refresher，和基类 AbstractRefresher，支持不同配置中心的刷新基类，甚至完全可以自行扩展，其原理其实就是当配置中心监听到配置文件的变动后，解析配置文件，刷新配置文件，最后通过 Spring ApplicationListener 机制发送 RefreshEvent 刷新事件，由对应的 Adapter 来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Refresher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Refresh with specify content.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileType file type</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(String content， ConfigFileTypeEnum fileType)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png\" alt=\"image-20230218103556728\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractRefresher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Refresher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(String content， ConfigFileTypeEnum fileType)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content) || Objects.isNull(fileType)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty content or null fileType.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">configHandler</span> <span class=\"operator\">=</span> ConfigHandler.getInstance();</span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> configHandler.parseConfig(content， fileType);</span><br><span class=\"line\">            doRefresh(properties);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp refresh error， content: &#123;&#125;， fileType: &#123;&#125;&quot;</span>， content， fileType， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(Map&lt;Object， Object&gt; properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MapUtils.isEmpty(properties)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty properties.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将发生变化的属性绑定到DtpProperties对象上</span></span><br><span class=\"line\">        PropertiesBinder.bindDtpProperties(properties， dtpProperties);</span><br><span class=\"line\">        <span class=\"comment\">// 更新线程池属性</span></span><br><span class=\"line\">        doRefresh(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.refresh(dtpProperties);</span><br><span class=\"line\">        publishEvent(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RefreshEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RefreshEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们以 Zookeeper 为配置中心举例说明，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZookeeperRefresher</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRefresher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EnvironmentAware</span>， InitializingBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionStateListener</span> <span class=\"variable\">connectionStateListener</span> <span class=\"operator\">=</span> (client， newState) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 连接变更</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newState == ConnectionState.RECONNECTED) &#123;</span><br><span class=\"line\">                loadAndRefresh();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">CuratorListener</span> <span class=\"variable\">curatorListener</span> <span class=\"operator\">=</span> (client， curatorEvent) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">WatchedEvent</span> <span class=\"variable\">watchedEvent</span> <span class=\"operator\">=</span> curatorEvent.getWatchedEvent();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != watchedEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (watchedEvent.getType()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 监听节点变更</span></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> NodeChildrenChanged:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> NodeDataChanged:</span><br><span class=\"line\">                        <span class=\"comment\">// 刷新</span></span><br><span class=\"line\">                        loadAndRefresh();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CuratorFramework</span> <span class=\"variable\">curatorFramework</span> <span class=\"operator\">=</span> CuratorUtil.getCuratorFramework(dtpProperties);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">nodePath</span> <span class=\"operator\">=</span> CuratorUtil.nodePath(dtpProperties);</span><br><span class=\"line\"></span><br><span class=\"line\">        curatorFramework.getConnectionStateListenable().addListener(connectionStateListener);</span><br><span class=\"line\">        curatorFramework.getCuratorListenable().addListener(curatorListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp refresher， add listener success， nodePath: &#123;&#125;&quot;</span>， nodePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * load config and refresh</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadAndRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">env</span> <span class=\"operator\">=</span> ((ConfigurableEnvironment) environment);</span><br><span class=\"line\">        env.getPropertySources().remove(ZK_PROPERTY_SOURCE_NAME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用了 Spring 机制，实现了 InitializingBean 并重写 afterPropertiesSet，在 Bean 实例化完成之后会被自动调用，在这期间针对 Zookeeper 连接，节点变更监听器进行注册，监听连接变更和节点变更后执行刷新操作。</p>\n<p><code>doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));</code>实现由基类统一处理，解析配置并绑定 DtpProperties 上，执行 DtpRegistry#refresh() 刷新后发布一个 RefreshEvent 事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(Map&lt;Object， Object&gt; properties)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MapUtils.isEmpty(properties)) &#123;</span><br><span class=\"line\">        log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty properties.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解析配置并绑定 DtpProperties 上</span></span><br><span class=\"line\">    PropertiesBinder.bindDtpProperties(properties， dtpProperties);</span><br><span class=\"line\">    <span class=\"comment\">// 更新线程池属性</span></span><br><span class=\"line\">    doRefresh(dtpProperties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">    DtpRegistry.refresh(dtpProperties);</span><br><span class=\"line\">    publishEvent(dtpProperties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">RefreshEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RefreshEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">    ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看 DtpRegistry#refresh() 的实现，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(DtpProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(properties) || CollectionUtils.isEmpty(properties.getExecutors())) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty threadPoolProperties.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 属性不为空 从属性中拿到所有的线程池属性配置</span></span><br><span class=\"line\">        properties.getExecutors().forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isBlank(x.getThreadPoolName())) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;DynamicTp refresh， threadPoolName must not be empty.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 从 DTP_REGISTRY 线程注册池表中拿到对应的线程池对象</span></span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> DTP_REGISTRY.get(x.getThreadPoolName());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.isNull(dtpExecutor)) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;DynamicTp refresh， cannot find specified dtpExecutor， name: &#123;&#125;.&quot;</span>， x.getThreadPoolName());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 刷新 更新线程池对象</span></span><br><span class=\"line\">            refresh(dtpExecutor， x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(DtpExecutor executor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数合法校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.getCorePoolSize() &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                || properties.getMaximumPoolSize() &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">                || properties.getMaximumPoolSize() &lt; properties.getCorePoolSize()</span><br><span class=\"line\">                || properties.getKeepAliveTime() &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp refresh， invalid parameters exist， properties: &#123;&#125;&quot;</span>， properties);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 线程池旧配置</span></span><br><span class=\"line\">        <span class=\"type\">DtpMainProp</span> <span class=\"variable\">oldProp</span> <span class=\"operator\">=</span> ExecutorConverter.convert(executor);</span><br><span class=\"line\">        <span class=\"comment\">// 真正开始刷新</span></span><br><span class=\"line\">        doRefresh(executor， properties);</span><br><span class=\"line\">        <span class=\"comment\">// 线程池新配置</span></span><br><span class=\"line\">        <span class=\"type\">DtpMainProp</span> <span class=\"variable\">newProp</span> <span class=\"operator\">=</span> ExecutorConverter.convert(executor);</span><br><span class=\"line\">        <span class=\"comment\">// 相等不作处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldProp.equals(newProp)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， main properties of [&#123;&#125;] have not changed.&quot;</span>， executor.getThreadPoolName());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;FieldInfo&gt; diffFields = EQUATOR.getDiffFields(oldProp， newProp);</span><br><span class=\"line\">        List&lt;String&gt; diffKeys = diffFields.stream().map(FieldInfo::getFieldName).collect(toList());</span><br><span class=\"line\">        <span class=\"comment\">// 线程池参数变更 平台提醒</span></span><br><span class=\"line\">        NoticeManager.doNoticeAsync(<span class=\"keyword\">new</span> <span class=\"title class_\">ExecutorWrapper</span>(executor)， oldProp， diffKeys);</span><br><span class=\"line\">        <span class=\"comment\">// 更新参数 日志打印</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp refresh， name: [&#123;&#125;]， changed keys: &#123;&#125;， corePoolSize: [&#123;&#125;]， maxPoolSize: [&#123;&#125;]， queueType: [&#123;&#125;]， &quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;queueCapacity: [&#123;&#125;]， keepAliveTime: [&#123;&#125;]， rejectedType: [&#123;&#125;]， allowsCoreThreadTimeOut: [&#123;&#125;]&quot;</span>，</span><br><span class=\"line\">                executor.getThreadPoolName()，</span><br><span class=\"line\">                diffKeys，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getCorePoolSize()， newProp.getCorePoolSize())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getMaxPoolSize()， newProp.getMaxPoolSize())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueType()， newProp.getQueueType())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueCapacity()， newProp.getQueueCapacity())，</span><br><span class=\"line\">                String.format(<span class=\"string\">&quot;%ss =&gt; %ss&quot;</span>， oldProp.getKeepAliveTime()， newProp.getKeepAliveTime())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getRejectType()， newProp.getRejectType())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.isAllowCoreThreadTimeOut()，</span><br><span class=\"line\">                        newProp.isAllowCoreThreadTimeOut()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结一下上述代码无非做了这么几件事</p>\n<ol>\n<li>参数合法校验</li>\n<li>获取到线程池旧配置</li>\n<li>执行刷新</li>\n<li>获取到线程池新配置</li>\n<li>如果新旧配置相同，则证明没有改动，不做处理</li>\n<li>否则线程池变更发送通知，并记录变更日志(ps：通知相关处理下文会说，这里先跳过)</li>\n</ol>\n<p>doRefresh 真正执行线程池的刷新，也依靠于 JUC 原生线程池支持动态属性变更。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpExecutor dtpExecutor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用相应的setXXX方法更新线程池参数</span></span><br><span class=\"line\">        doRefreshPoolSize(dtpExecutor， properties);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getKeepAliveTime(properties.getUnit())， properties.getKeepAliveTime())) &#123;</span><br><span class=\"line\">            dtpExecutor.setKeepAliveTime(properties.getKeepAliveTime()， properties.getUnit());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.allowsCoreThreadTimeOut()， properties.isAllowCoreThreadTimeOut())) &#123;</span><br><span class=\"line\">            dtpExecutor.allowCoreThreadTimeOut(properties.isAllowCoreThreadTimeOut());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update reject handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getRejectHandlerName()， properties.getRejectedHandlerType())) &#123;</span><br><span class=\"line\">            dtpExecutor.setRejectedExecutionHandler(RejectHandlerGetter.getProxy(properties.getRejectedHandlerType()));</span><br><span class=\"line\">            dtpExecutor.setRejectHandlerName(properties.getRejectedHandlerType());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update Alias Name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getThreadPoolAliasName()， properties.getThreadPoolAliasName())) &#123;</span><br><span class=\"line\">            dtpExecutor.setThreadPoolAliasName(properties.getThreadPoolAliasName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        updateQueueProp(properties， dtpExecutor);</span><br><span class=\"line\">        dtpExecutor.setWaitForTasksToCompleteOnShutdown(properties.isWaitForTasksToCompleteOnShutdown());</span><br><span class=\"line\">        dtpExecutor.setAwaitTerminationSeconds(properties.getAwaitTerminationSeconds());</span><br><span class=\"line\">        dtpExecutor.setPreStartAllCoreThreads(properties.isPreStartAllCoreThreads());</span><br><span class=\"line\">        dtpExecutor.setRunTimeout(properties.getRunTimeout());</span><br><span class=\"line\">        dtpExecutor.setQueueTimeout(properties.getQueueTimeout());</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;TaskWrapper&gt; taskWrappers = TaskWrappers.getInstance().getByNames(properties.getTaskWrapperNames());</span><br><span class=\"line\">        dtpExecutor.setTaskWrappers(taskWrappers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update notify items</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">allNotifyItems</span> <span class=\"operator\">=</span> mergeAllNotifyItems(properties.getNotifyItems());</span><br><span class=\"line\">        <span class=\"comment\">// 刷新通知平台</span></span><br><span class=\"line\">        NotifyHelper.refreshNotify(dtpExecutor.getThreadPoolName()， dtpProperties.getPlatforms()，</span><br><span class=\"line\">                dtpExecutor.getNotifyItems()， allNotifyItems);</span><br><span class=\"line\">        dtpExecutor.setNotifyItems(allNotifyItems);</span><br><span class=\"line\">        dtpExecutor.setNotifyEnabled(properties.isNotifyEnabled());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>doRefreshPoolSize 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefreshPoolSize</span><span class=\"params\">(ThreadPoolExecutor dtpExecutor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (properties.getMaximumPoolSize() &lt; dtpExecutor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) &#123;</span><br><span class=\"line\">             dtpExecutor.setCorePoolSize(properties.getCorePoolSize());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) &#123;</span><br><span class=\"line\">             dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) &#123;</span><br><span class=\"line\">         dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) &#123;</span><br><span class=\"line\">         dtpExecutor.setCorePoolSize(properties.getCorePoolSize());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>updateQueueProp 更新线程池阻塞队列大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateQueueProp</span><span class=\"params\">(ThreadPoolProperties properties， DtpExecutor dtpExecutor)</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// queueType 非 VariableLinkedBlockingQueue MemorySafeLinkedBlockingQueue 且executorType为EagerDtpExecutor 不刷新</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!canModifyQueueProp(properties)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 获取到线程池原来的队列</span></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">blockingQueue</span> <span class=\"operator\">=</span> dtpExecutor.getQueue();</span><br><span class=\"line\">       <span class=\"comment\">// 如果原来的队列容量和现在的不一样</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getQueueCapacity()， properties.getQueueCapacity())) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 并且原来的队列是 VariableLinkedBlockingQueue 类型的，那么就设置队列的容量</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (blockingQueue <span class=\"keyword\">instanceof</span> VariableLinkedBlockingQueue) &#123;</span><br><span class=\"line\">               ((VariableLinkedBlockingQueue&lt;Runnable&gt;) blockingQueue).setCapacity(properties.getQueueCapacity());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 否则不设置</span></span><br><span class=\"line\">               log.error(<span class=\"string\">&quot;DynamicTp refresh， the blockingqueue capacity cannot be reset， dtpName: &#123;&#125;， queueType &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                       dtpExecutor.getThreadPoolName()， dtpExecutor.getQueueName());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 如果队列是 MemorySafeLinkedBlockingQueue，那么设置最大内存</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (blockingQueue <span class=\"keyword\">instanceof</span> MemorySafeLinkedBlockingQueue) &#123;</span><br><span class=\"line\">           ((MemorySafeLinkedBlockingQueue&lt;Runnable&gt;) blockingQueue).setMaxFreeMemory(properties.getMaxFreeMemory() * M_1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码提到了几个眼生的队列，他们都是 dynamic-tp 自行实现的阻塞队列，我们来看下</p>\n<p><code>VariableLinkedBlockingQueue</code>: 可以设置队列容量，且支持变更队列容量</p>\n<p><code>MemorySafeLinkedBlockingQueue</code>: 继承 VariableLinkedBlockingQueue，可以通过 maxFreeMemory 设置队列容量，在构造器中对容量有默认的大小限制</p>\n<p><strong>首先我们思考一下，为什么 dynamic-tp 要自行实现的阻塞队列？</strong></p>\n<p>当你翻看 Java 原生 LinkedBlockingQueue 队列时你就会发现，队列容量被定义为private final类型的，不能修改，那肯定是不符合我们修改阻塞队列大小还能实现刷新线程池的效果。</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png\" alt=\"image-20230218110508712\"></a></p>\n<p>其中着重说明下 MemorySafeLinkedBlockingQueue 队列，LinkedBlockingQueue的容量默认是Integer.MAX_VALUE，所以当我们不对其进行限制时，就有可能导致 OOM 问题，所以 MemorySafeLinkedBlockingQueue 构造函数设置了默认队列大小</p>\n<p>当我们往队列添加元素的时候，会先判断有没有足够的空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemorySafeLinkedBlockingQueue</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;E&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">8032578371739960142L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THE_256_MB</span> <span class=\"operator\">=</span> <span class=\"number\">256</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列的容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> maxFreeMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认256MB</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(THE_256_MB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Integer.MAX_VALUE);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> capacity， <span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(capacity);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;? extends E&gt; c， <span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(c);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set the max free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maxFreeMemory the max free memory</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxFreeMemory</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * get the max free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the max free memory limit</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMaxFreeMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine if there is any remaining free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if has free memory</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasRemainedMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MemoryLimitCalculator.maxAvailable() &gt; maxFreeMemory) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;No more memory can be used.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"keyword\">final</span> E e)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们往队列添加元素的时候，会先判断有没有足够的空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasRemainedMemory()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.put(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"keyword\">final</span> E e， <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout， <span class=\"keyword\">final</span> TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasRemainedMemory() &amp;&amp; <span class=\"built_in\">super</span>.offer(e， timeout， unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"keyword\">final</span> E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasRemainedMemory() &amp;&amp; <span class=\"built_in\">super</span>.offer(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>回到上文我们说刷新完线程池后，发送异步事件 RefreshEvent，来继续看下</p>\n<p>DtpAdapterListener 处于 adapter 模块，该模块主要是对些三方组件中的线程池进行管理（例如 Tomcat，Jetty 等），通过 spring 的事件发布监听机制来实现与核心流程解耦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpAdapterListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GenericApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsEventType</span><span class=\"params\">(ResolvableType resolvableType)</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; type = resolvableType.getRawClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> RefreshEvent.class.isAssignableFrom(type)</span><br><span class=\"line\">                    || CollectEvent.class.isAssignableFrom(type)</span><br><span class=\"line\">                    || AlarmCheckEvent.class.isAssignableFrom(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ApplicationEvent event)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> RefreshEvent) &#123;</span><br><span class=\"line\">                doRefresh(((RefreshEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> CollectEvent) &#123;</span><br><span class=\"line\">                doCollect(((CollectEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> AlarmCheckEvent) &#123;</span><br><span class=\"line\">                doAlarmCheck(((AlarmCheckEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp adapter， event handle failed.&quot;</span>， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Do refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dtpProperties dtpProperties</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">handlerMap</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(DtpAdapter.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(handlerMap)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handlerMap.forEach((k， v) -&gt; v.refresh(dtpProperties));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png\" alt=\"image-20230218112109807\"></a></p>\n<h2 id=\"2-3-线程池类型\"><a href=\"#2-3-线程池类型\" class=\"headerlink\" title=\"2.3 线程池类型\"></a>2.3 线程池类型</h2><blockquote>\n<p>DtpLifecycleSupport</p>\n</blockquote>\n<p>DtpLifecycleSupport 继承了 JUC ThreadPoolExecutor，对原生线程池进行了增强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpLifecycleSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ThreadPoolExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>， DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String threadPoolName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Whether to wait for scheduled tasks to complete on shutdown，</span></span><br><span class=\"line\"><span class=\"comment\">     * not interrupting running tasks and executing all tasks in the queue.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在关闭线程池的时候是否等待任务执行完毕，不会打断运行中的任务，并且会执行队列中的所有任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"variable\">waitForTasksToCompleteOnShutdown</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The maximum number of seconds that this executor is supposed to block</span></span><br><span class=\"line\"><span class=\"comment\">     * on shutdown in order to wait for remaining tasks to complete their execution</span></span><br><span class=\"line\"><span class=\"comment\">     * before the rest of the container continues to shut down.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在线程池关闭时等待的最大时间，目的就是等待线程池中的任务运行完毕。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"variable\">awaitTerminationSeconds</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DtpLifecycleSupport</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">int</span> maximumPoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">long</span> keepAliveTime，</span></span><br><span class=\"line\"><span class=\"params\">                               TimeUnit unit，</span></span><br><span class=\"line\"><span class=\"params\">                               BlockingQueue&lt;Runnable&gt; workQueue，</span></span><br><span class=\"line\"><span class=\"params\">                               ThreadFactory threadFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DtpProperties</span> <span class=\"variable\">dtpProperties</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBean(DtpProperties.class);</span><br><span class=\"line\">        <span class=\"comment\">// 子类实现</span></span><br><span class=\"line\">        initialize(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供了两个增强字段 <code>waitForTasksToCompleteOnShutdown</code> 和 <code>awaitTerminationSeconds</code></p>\n<p>我们以此来看下</p>\n<p><code>waitForTasksToCompleteOnShutdown</code> 作用在线程池销毁阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">internalShutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;Shutting down ExecutorService， poolName: &#123;&#125;&quot;</span>， threadPoolName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果需要等待任务执行完毕，则调用 shutdown()会执行先前已提交的任务，拒绝新任务提交，线程池状态变成 SHUTDOWN</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.waitForTasksToCompleteOnShutdown) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果不需要等待任务执行完毕，则直接调用shutdownNow()方法，尝试中断正在执行的任务，返回所有未执行的任务，线程池状态变成 STOP， 然后调用 Future 的 cancel 方法取消</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Runnable remainingTask : <span class=\"built_in\">this</span>.shutdownNow()) &#123;</span><br><span class=\"line\">                cancelRemainingTask(remainingTask);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awaitTerminationIfNecessary();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结下它的作用就是 在关闭线程池的时候看是否等待任务执行完毕，如果需要等待则会拒绝新任务的提交，执行先前已提交的任务，否则中断正在执行的任务。</p>\n<p>而 <code>awaitTerminationSeconds</code> 字段主要是配合 shutdown 使用，阻塞当前线程，等待已提交的任务执行完毕或者超时的最大时间，等待线程池中的任务运行结束。</p>\n<blockquote>\n<p>DtpExecutor</p>\n</blockquote>\n<p>DtpExecutor 也就是我们项目中横贯整个流程的动态线程池，它继承自 DtpLifecycleSupport，主要是也是实现对基本线程池的增强。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DtpLifecycleSupport</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SpringExecutor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Simple Business alias Name of Dynamic ThreadPool. Use for notify.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String threadPoolAliasName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RejectHandler name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rejectHandlerName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enable notify.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> notifyEnabled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Notify items， see &#123;<span class=\"doctag\">@link</span> NotifyItemEnum&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 需要提醒的平台</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;NotifyItem&gt; notifyItems;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task wrappers， do sth enhanced.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TaskWrapper&gt; taskWrappers = Lists.newArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If pre start all core threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 线程是否需要提前预热，真正调用的还是ThreadPoolExecutor的对应方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> preStartAllCoreThreads;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task execute timeout， unit (ms)， just for statistics.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> runTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task queue wait timeout， unit (ms)， just for statistics.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> queueTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Total reject count.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">rejectCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Count run timeout tasks.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">runTimeoutCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Count queue wait timeout tasks.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">queueTimeoutCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DtpExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize， <span class=\"type\">int</span> maximumPoolSize， <span class=\"type\">long</span> keepAliveTime， TimeUnit unit， BlockingQueue&lt;Runnable&gt; workQueue， ThreadFactory threadFactory， RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rejectHandlerName = handler.getClass().getSimpleName();</span><br><span class=\"line\">        setRejectedExecutionHandler(RejectHandlerGetter.getProxy(handler));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable task， <span class=\"type\">long</span> startTimeout)</span> &#123;</span><br><span class=\"line\">        execute(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> command the runnable task</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">taskName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command <span class=\"keyword\">instanceof</span> NamedRunnable) &#123;</span><br><span class=\"line\">            taskName = ((NamedRunnable) command).getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(taskWrappers)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (TaskWrapper t : taskWrappers) &#123;</span><br><span class=\"line\">                command = t.wrap(command);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span> || queueTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            command = <span class=\"keyword\">new</span> <span class=\"title class_\">DtpRunnable</span>(command， taskName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.execute(command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread that will run task &#123;<span class=\"doctag\">@code</span> r&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the task that will be executed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeExecute</span><span class=\"params\">(Thread t， Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(r <span class=\"keyword\">instanceof</span> DtpRunnable)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.beforeExecute(t， r);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DtpRunnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> (DtpRunnable) r;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">currTime</span> <span class=\"operator\">=</span> TimeUtil.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            runnable.setStartTime(currTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queueTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">waitTime</span> <span class=\"operator\">=</span> currTime - runnable.getSubmitTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (waitTime &gt; queueTimeout) &#123;</span><br><span class=\"line\">                queueTimeoutCount.increment();</span><br><span class=\"line\">                AlarmManager.doAlarmAsync(<span class=\"built_in\">this</span>， QUEUE_TIMEOUT);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotBlank(runnable.getTaskName())) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">&quot;DynamicTp execute， queue timeout， poolName: &#123;&#125;， taskName: &#123;&#125;， waitTime: &#123;&#125;ms&quot;</span>， <span class=\"built_in\">this</span>.getThreadPoolName()， runnable.getTaskName()， waitTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.beforeExecute(t， r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the runnable that has completed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the exception that caused termination， or null if</span></span><br><span class=\"line\"><span class=\"comment\">     *          execution completed normally</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecute</span><span class=\"params\">(Runnable r， Throwable t)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpRunnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> (DtpRunnable) r;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">runTime</span> <span class=\"operator\">=</span> TimeUtil.currentTimeMillis() - runnable.getStartTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runTime &gt; runTimeout) &#123;</span><br><span class=\"line\">                runTimeoutCount.increment();</span><br><span class=\"line\">                AlarmManager.doAlarmAsync(<span class=\"built_in\">this</span>， RUN_TIMEOUT);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotBlank(runnable.getTaskName())) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">&quot;DynamicTp execute， run timeout， poolName: &#123;&#125;， taskName: &#123;&#125;， runTime: &#123;&#125;ms&quot;</span>， <span class=\"built_in\">this</span>.getThreadPoolName()， runnable.getTaskName()， runTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.afterExecute(r， t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        NotifyHelper.initNotify(<span class=\"built_in\">this</span>， dtpProperties.getPlatforms());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preStartAllCoreThreads) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在没有任务到来之前就创建corePoolSize个线程或一个线程 因为在默认线程池启动的时候是不会启动核心线程的，只有来了新的任务时才会启动线程</span></span><br><span class=\"line\">            prestartAllCoreThreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>EagerDtpExecutor</p>\n</blockquote>\n<p>EagerDtpExecutor 继承了 DtpExecutor，专为 IO 密集场景提供，为什么这么说呢，请看下文分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EagerDtpExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DtpExecutor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of tasks submitted but not yet finished.</span></span><br><span class=\"line\"><span class=\"comment\">     * 已经提交的但还没有完成的任务数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">submittedTaskCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">EagerDtpExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                            <span class=\"type\">int</span> maximumPoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                            <span class=\"type\">long</span> keepAliveTime，</span></span><br><span class=\"line\"><span class=\"params\">                            TimeUnit unit，</span></span><br><span class=\"line\"><span class=\"params\">                            BlockingQueue&lt;Runnable&gt; workQueue，</span></span><br><span class=\"line\"><span class=\"params\">                            ThreadFactory threadFactory，</span></span><br><span class=\"line\"><span class=\"params\">                            RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory， handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSubmittedTaskCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> submittedTaskCount.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecute</span><span class=\"params\">(Runnable r， Throwable t)</span> &#123;</span><br><span class=\"line\">        submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.afterExecute(r， t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        submittedTaskCount.incrementAndGet();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.execute(command);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 被拒绝时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getQueue() <span class=\"keyword\">instanceof</span> TaskQueue) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the Executor is close to maximum pool size， concurrent</span></span><br><span class=\"line\">                <span class=\"comment\">// calls to execute() may result (due to use of TaskQueue) in</span></span><br><span class=\"line\">                <span class=\"comment\">// some tasks being rejected rather than queued.</span></span><br><span class=\"line\">                <span class=\"comment\">// If this happens， add them to the queue.</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">TaskQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> (TaskQueue) getQueue();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 加入队列中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!queue.force(command， <span class=\"number\">0</span>， TimeUnit.MILLISECONDS)) &#123;</span><br><span class=\"line\">                        submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;Queue capacity is full.&quot;</span>， rx);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                    submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> rx;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看 execute 执行方法，当捕获住拒绝异常时，说明线程池队列已满且大于最大线程数，如果当前队列是</p>\n<p>TaskQueue 则重新将拒绝任务加入队列中，加入失败则抛出任务拒绝异常。</p>\n<p><strong>来看 TaskQueue 代码实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TaskQueue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;Runnable&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> EagerDtpExecutor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TaskQueue</span><span class=\"params\">(<span class=\"type\">int</span> queueCapacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(queueCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setExecutor</span><span class=\"params\">(EagerDtpExecutor exec)</span> &#123;</span><br><span class=\"line\">        executor = exec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Runnable runnable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;The task queue does not have executor.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">currentPoolThreadSize</span> <span class=\"operator\">=</span> executor.getPoolSize();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池中的线程数等于最大线程数的时候，就将任务放进队列等待工作线程处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPoolThreadSize == executor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前未执行的任务数量小于等于当前线程数，还有剩余的worker线程，就将任务放进队列等待工作线程处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor.getSubmittedTaskCount() &lt; currentPoolThreadSize) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程数大于核心线程，但小于最大线程数量，则直接返回false，外层逻辑线程池创建新的线程来执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPoolThreadSize &lt; executor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// currentPoolThreadSize &gt;= max</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码我们看到 currentPoolThreadSize &lt; executor.getMaximumPoolSize() 会返回 false</p>\n<p>底层实现 还是 JUC 的 ThreadPoolExecutor，来看 execute 方法，当前线程数大于核心线程，但小于最大线程数量，则执行 addWorker(command， false)，创建新的线程来执行任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">          <span class=\"comment\">// 线程池状态和线程数的整数</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">     <span class=\"comment\">// 如果当前线程数小于核心线程数，创建 Worker 线程并启动线程</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class=\"line\">         <span class=\"comment\">// 添加任务成功，那么就结束了 结果会包装到 FutureTask 中</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (addWorker(command， <span class=\"literal\">true</span>)) </span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         c = ctl.get();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 要么当前线程数大于等于核心线程数，要么刚刚 addWorker 失败了 ，如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 二次状态检查</span></span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get(); </span><br><span class=\"line\">           <span class=\"comment\">// 如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) </span><br><span class=\"line\">             reject(command);</span><br><span class=\"line\">           <span class=\"comment\">// 如果线程池还是 RUNNING 的，并且线程数为 0，重新创建一个新的线程 这里目的担心任务提交到队列中了，但是线程都关闭了</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>) </span><br><span class=\"line\">               <span class=\"comment\">// 创建Worker，并启动里面的Thread，为什么传null，线程启动后会自动从阻塞队列拉任务执行</span></span><br><span class=\"line\">             addWorker(<span class=\"literal\">null</span>， <span class=\"literal\">false</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">          <span class=\"comment\">// workQueue.offer(command)返回false，以 maximumPoolSize 为界创建新的 worker线程并启动线程，如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略</span></span><br><span class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command， <span class=\"literal\">false</span>)) </span><br><span class=\"line\">         reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一看这不就是 Tomcat 线程池处理流程吗，对比于原生 JUC 线程池提交任务流程</p>\n<p><strong>看下原生 JUC 线程池提交任务的流程</strong></p>\n<ul>\n<li>当前线程数小于核心线程数，则创建一个新的线程来执行任务</li>\n<li>当前线程数大于等于核心线程数，且阻塞队列未满，则将任务添加到队列中</li>\n<li>如果阻塞队列已满，当前线程数大于等于核心线程数，当前线程数小于最大线程数，则创建并启动一个线程来执行新提交的任务</li>\n<li>若当前线程数大于等于最大线程数，且阻塞队列已满，此时会执行拒绝策略</li>\n</ul>\n<p>来看下原生 JUC 线程池提交流程，引用美团线程池篇中的图<br><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png\" alt=\"img\"></a></p>\n<p>原生 JUC 线程池核心思想就是就是先让核心线程数的线程工作，多余的任务统统塞到阻塞队列，阻塞队列塞不下才再多创建线程来工作，这种情况下当大量请求提交时，大量的请求很有可能都会被阻塞在队列中，而线程还没有创建到最大线程数，导致用户请求处理很慢，用户体验很差，而且当我们的工作队列设置得很大时，最大线程数这个参数显得没有意义，因为队列很难满，或者到满的时候再去扩容线程池已经于事无补了。</p>\n<p><strong>那如何解决呢？</strong></p>\n<p>我们有没有办法让线程池更激进一点呢，优先开启更多的线程，而把队列当成一个后备方案。</p>\n<p>重写了execute()方法，当抛出拒绝策略了尝试一次往阻塞队列里插入任务，尽最大努力的去执行任务，新增阻塞队列继承了 LinkedBlockingQueue，重写了offer()方法，重写了offer()方法，每次向队列插入任务，判断如果当前线程数小于最大线程数则插入失败。进而让线程池创建新线程来处理任务。</p>\n<p><strong>如下图所示：</strong></p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png\" alt=\"img\"></a></p>\n<p>总结：知识是相通的，要学以致用</p>\n<h2 id=\"2-4-报警通知\"><a href=\"#2-4-报警通知\" class=\"headerlink\" title=\"2.4 报警通知\"></a>2.4 报警通知</h2><p>关于分析报警通知，可以从 AlarmManager 和 NoticeManager 这两个类入手，实际就是分别构造了一个报警通知责任链，在需要报警通知的时候，调用责任链执行。</p>\n<p>先来看 AlarmManager 的代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlarmManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ExecutorService</span> <span class=\"variable\">ALARM_EXECUTOR</span> <span class=\"operator\">=</span> ThreadPoolBuilder.newBuilder()</span><br><span class=\"line\">            .threadPoolName(<span class=\"string\">&quot;dtp-alarm&quot;</span>)</span><br><span class=\"line\">            .threadFactory(<span class=\"string\">&quot;dtp-alarm&quot;</span>)</span><br><span class=\"line\">            .corePoolSize(<span class=\"number\">2</span>)</span><br><span class=\"line\">            .maximumPoolSize(<span class=\"number\">4</span>)</span><br><span class=\"line\">            .workQueue(LINKED_BLOCKING_QUEUE.getName()， <span class=\"number\">2000</span>， <span class=\"literal\">false</span>， <span class=\"literal\">null</span>)</span><br><span class=\"line\">            .rejectedExecutionHandler(RejectedTypeEnum.DISCARD_OLDEST_POLICY.getName())</span><br><span class=\"line\">            .buildCommon();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> InvokerChain&lt;BaseNotifyCtx&gt; ALARM_INVOKER_CHAIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造责任链</span></span><br><span class=\"line\">        ALARM_INVOKER_CHAIN = NotifyFilterBuilder.getAlarmInvokerChain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">AlarmManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>责任链的构造</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotifyFilterBuilder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NotifyFilterBuilder</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InvokerChain&lt;BaseNotifyCtx&gt; <span class=\"title function_\">getAlarmInvokerChain</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">filters</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(NotifyFilter.class);</span><br><span class=\"line\">        Collection&lt;NotifyFilter&gt; alarmFilters = Lists.newArrayList(filters.values());</span><br><span class=\"line\">        alarmFilters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AlarmBaseFilter</span>());</span><br><span class=\"line\">        alarmFilters = alarmFilters.stream()</span><br><span class=\"line\">                .filter(x -&gt; x.supports(NotifyTypeEnum.ALARM))</span><br><span class=\"line\">                .sorted(Comparator.comparing(Filter::getOrder))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 构造ALARM_FILTER_CHAIN链</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> InvokerChainFactory.buildInvokerChain(<span class=\"keyword\">new</span> <span class=\"title class_\">AlarmInvoker</span>()， alarmFilters.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">NotifyFilter</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InvokerChain&lt;BaseNotifyCtx&gt; <span class=\"title function_\">getCommonInvokerChain</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">filters</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(NotifyFilter.class);</span><br><span class=\"line\">        Collection&lt;NotifyFilter&gt; noticeFilters = Lists.newArrayList(filters.values());</span><br><span class=\"line\">        noticeFilters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">NoticeBaseFilter</span>());</span><br><span class=\"line\">        noticeFilters = noticeFilters.stream()</span><br><span class=\"line\">                .filter(x -&gt; x.supports(NotifyTypeEnum.COMMON))</span><br><span class=\"line\">                .sorted(Comparator.comparing(Filter::getOrder))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InvokerChainFactory.buildInvokerChain(<span class=\"keyword\">new</span> <span class=\"title class_\">NoticeInvoker</span>()， noticeFilters.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">NotifyFilter</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InvokerChainFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">InvokerChainFactory</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SafeVarargs</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T&gt; InvokerChain&lt;T&gt; <span class=\"title function_\">buildInvokerChain</span><span class=\"params\">(Invoker&lt;T&gt; target， Filter&lt;T&gt;... filters)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerChain&lt;T&gt; invokerChain = <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerChain</span>&lt;&gt;();</span><br><span class=\"line\">        Invoker&lt;T&gt; last = target;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> filters.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; next = last;</span><br><span class=\"line\">            Filter&lt;T&gt; filter = filters[i];</span><br><span class=\"line\">            last = context -&gt; filter.doFilter(context， next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invokerChain.setHead(last);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokerChain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行报警方法调用如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAlarm</span><span class=\"params\">(ExecutorWrapper executorWrapper， NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据告警类型获取告警项配置，一个线程池可以配置多个NotifyItem，这里需要过滤</span></span><br><span class=\"line\">    NotifyHelper.getNotifyItem(executorWrapper， notifyItemEnum).ifPresent(notifyItem -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行责任链</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmCtx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlarmCtx</span>(executorWrapper， notifyItem);</span><br><span class=\"line\">        ALARM_INVOKER_CHAIN.proceed(alarmCtx);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行责任链，真正执行报警通知的代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlarmInvoker</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Invoker</span>&lt;BaseNotifyCtx&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(BaseNotifyCtx context)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmCtx</span> <span class=\"operator\">=</span> (AlarmCtx) context;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executorWrapper</span> <span class=\"operator\">=</span> alarmCtx.getExecutorWrapper();</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">notifyItem</span> <span class=\"operator\">=</span> alarmCtx.getNotifyItem();</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmInfo</span> <span class=\"operator\">=</span> AlarmCounter.getAlarmInfo(executorWrapper.getThreadPoolName()， notifyItem.getType());</span><br><span class=\"line\">        alarmCtx.setAlarmInfo(alarmInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">        DtpNotifyCtxHolder.set(context);</span><br><span class=\"line\">        <span class=\"comment\">// 真正的发送告警的逻辑</span></span><br><span class=\"line\">        NotifierHandler.getInstance().sendAlarm(NotifyItemEnum.of(notifyItem.getType()));</span><br><span class=\"line\">        AlarmCounter.reset(executorWrapper.getThreadPoolName()， notifyItem.getType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 NotifierHandler#sendAlarm()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotifierHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， DtpNotifier&gt; NOTIFIERS = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NotifierHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;DtpNotifier&gt; loader = ServiceLoader.load(DtpNotifier.class);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DtpNotifier notifier : loader) &#123;</span><br><span class=\"line\">            NOTIFIERS.put(notifier.platform()， notifier);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">dingNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpDingNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DingNotifier</span>());</span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">wechatNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpWechatNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WechatNotifier</span>());</span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">larkNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpLarkNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">LarkNotifier</span>());</span><br><span class=\"line\">        NOTIFIERS.put(dingNotifier.platform()， dingNotifier);</span><br><span class=\"line\">        NOTIFIERS.put(wechatNotifier.platform()， wechatNotifier);</span><br><span class=\"line\">        NOTIFIERS.put(larkNotifier.platform()， larkNotifier);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendAlarm</span><span class=\"params\">(NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">NotifyItem</span> <span class=\"variable\">notifyItem</span> <span class=\"operator\">=</span> DtpNotifyCtxHolder.get().getNotifyItem();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String platform : notifyItem.getPlatforms()) &#123;</span><br><span class=\"line\">                <span class=\"type\">DtpNotifier</span> <span class=\"variable\">notifier</span> <span class=\"operator\">=</span> NOTIFIERS.get(platform.toLowerCase());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (notifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    notifier.sendAlarmMsg(notifyItemEnum);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            DtpNotifyCtxHolder.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后调用 notifier.sendAlarmMsg(notifyItemEnum)发送消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendAlarmMsg</span><span class=\"params\">(NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\">    NotifyHelper.getPlatform(platform()).ifPresent(platform -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建报警信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> buildAlarmContent(platform， notifyItemEnum);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送</span></span><br><span class=\"line\">        notifier.send(platform， content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png\" alt=\"image-20230218132044086\"></a></p>\n<h2 id=\"2-5-监控\"><a href=\"#2-5-监控\" class=\"headerlink\" title=\"2.5 监控\"></a>2.5 监控</h2><p>入口 DtpMonitor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpMonitor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationRunner</span>， Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">MONITOR_EXECUTOR</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(</span><br><span class=\"line\">            <span class=\"number\">1</span>， <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadFactory</span>(<span class=\"string\">&quot;dtp-monitor&quot;</span>， <span class=\"literal\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每隔 monitorInterval（默认为5） 执行监控</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> &#123;</span><br><span class=\"line\">        MONITOR_EXECUTOR.scheduleWithFixedDelay(<span class=\"built_in\">this</span>::run，</span><br><span class=\"line\">                <span class=\"number\">0</span>， dtpProperties.getMonitorInterval()， TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 所有线程池的名称</span></span><br><span class=\"line\">        List&lt;String&gt; dtpNames = DtpRegistry.listAllDtpNames();</span><br><span class=\"line\">        <span class=\"comment\">// 所有标有DynamicTp注解的线程池</span></span><br><span class=\"line\">        List&lt;String&gt; commonNames = DtpRegistry.listAllCommonNames();</span><br><span class=\"line\">        <span class=\"comment\">// 检查告警</span></span><br><span class=\"line\">        checkAlarm(dtpNames);</span><br><span class=\"line\">        <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">        collect(dtpNames， commonNames);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">collect</span><span class=\"params\">(List&lt;String&gt; dtpNames， List&lt;String&gt; commonNames)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不收集指标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dtpProperties.isEnabledCollect()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿到所有的线程池对象，获取到线程池的各种属性统计指标</span></span><br><span class=\"line\">        dtpNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DtpRegistry.getDtpExecutor(x);</span><br><span class=\"line\">            <span class=\"type\">ThreadPoolStats</span> <span class=\"variable\">poolStats</span> <span class=\"operator\">=</span> MetricsConverter.convert(executor);</span><br><span class=\"line\">            <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">            doCollect(poolStats);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        commonNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">ExecutorWrapper</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> DtpRegistry.getCommonExecutor(x);</span><br><span class=\"line\">            <span class=\"comment\">// 转换 ThreadPoolStats</span></span><br><span class=\"line\">            <span class=\"type\">ThreadPoolStats</span> <span class=\"variable\">poolStats</span> <span class=\"operator\">=</span> MetricsConverter.convert(wrapper);</span><br><span class=\"line\">            <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">            doCollect(poolStats);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 发送一个CollectEvent事件</span></span><br><span class=\"line\">        publishCollectEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 针对每一个线程池，使用其名称从注册表中获取到线程池对象，然后触发告警</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dtpNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAlarm</span><span class=\"params\">(List&lt;String&gt; dtpNames)</span> &#123;</span><br><span class=\"line\">        dtpNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DtpRegistry.getDtpExecutor(x);</span><br><span class=\"line\">            AlarmManager.doAlarmAsync(executor， SCHEDULE_NOTIFY_ITEMS);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 发送告警AlarmCheckEvent事件</span></span><br><span class=\"line\">        publishAlarmCheckEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doCollect</span><span class=\"params\">(ThreadPoolStats threadPoolStats)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            CollectorHandler.getInstance().collect(threadPoolStats， dtpProperties.getCollectorTypes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp monitor， metrics collect error.&quot;</span>， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishCollectEvent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CollectEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CollectEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishAlarmCheckEvent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AlarmCheckEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlarmCheckEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png\" alt=\"image-20230218132312173\"></a></p>\n<p>代码比较易懂，这里就不在叙述了。</p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p><strong>dynamic-tp</strong> 设计巧妙，代码中设计模式先行，结构清晰易懂，代码规整，同时提供了很多扩展点，通过利用了 Spring 的扩展，和 JUC 原生线程池优势，功能强大。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"唐志远の博客","link":"https://fe32.top/","avatar":"https://bu.dusays.com/2022/01/14/cd5ffd485f867.jpg","descr":"古今之成大事者，不惟有超世之才，亦必有坚忍不拔之志。"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":false,"excerpt":"","more":"<h1 id=\"dynamic-tp核心流程源码解读篇\"><a href=\"#dynamic-tp核心流程源码解读篇\" class=\"headerlink\" title=\"dynamic-tp核心流程源码解读篇\"></a>dynamic-tp核心流程源码解读篇</h1><p>by MRyan, 2023-02-18</p>\n<h1 id=\"序-介绍\"><a href=\"#序-介绍\" class=\"headerlink\" title=\"序. 介绍\"></a>序. 介绍</h1><p><strong>dynamic-tp</strong> 是一款动态线程池组件，可以实现线程池的实时动态调参及监控报警，线程池配置放在配置中心统一管理，达成业务代码零侵入，支持多配置中心的选择和常见的第三方组件的线程池的集成管理。</p>\n<p><code>官网</code>: <a href=\"https://dynamictp.top/\">https://dynamictp.top/</a></p>\n<p><code>Gitee</code>: <a href=\"https://gitee.com/dromara/dynamic-tp\">https://gitee.com/dromara/dynamic-tp</a></p>\n<p><code>Github</code>: <a href=\"https://github.com/dromara/dynamic-tp\">https://github.com/dromara/dynamic-tp</a></p>\n<p>详细介绍及组件的基本使用，可以访问 dynamic-tp 官网。</p>\n<p>本文主要是对 dynamic-tp 版本 <code>1.1.0</code> 源码的分析，学习。</p>\n<h1 id=\"1-如何使用\"><a href=\"#1-如何使用\" class=\"headerlink\" title=\"1. 如何使用\"></a>1. 如何使用</h1><p>以选择配置中心 zookeeper 为例</p>\n<p><strong>引入 starter 实用</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.dynamictp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dynamic-tp-spring-boot-starter-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>application.yml</code> 需配置 zookeeper 地址节点信息</p>\n<p>ps: zookeeper 支持 properties &amp; json 配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"> <span class=\"attr\">port:</span> <span class=\"number\">8888</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">     <span class=\"attr\">application:</span></span><br><span class=\"line\">       <span class=\"attr\">name:</span> <span class=\"string\">dynamic-tp-zookeeper-demo</span></span><br><span class=\"line\">     <span class=\"attr\">dynamic:</span></span><br><span class=\"line\">       <span class=\"attr\">tp:</span></span><br><span class=\"line\">         <span class=\"attr\">config-type:</span> <span class=\"string\">properties</span>         </span><br><span class=\"line\">         <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">           <span class=\"attr\">config-version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br><span class=\"line\">           <span class=\"attr\">zk-connect-str:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:2181</span></span><br><span class=\"line\">           <span class=\"attr\">root-node:</span> <span class=\"string\">/configserver/dev</span></span><br><span class=\"line\">           <span class=\"attr\">node:</span> <span class=\"string\">dynamic-tp-zookeeper-demo</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置如下（详细配置相关可翻看官网学习）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.dynamic.tp.enabled=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.enabledBanner=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.enabledCollect=<span class=\"literal\">true</span></span><br><span class=\"line\">spring.dynamic.tp.collectorType=logging</span><br><span class=\"line\">spring.dynamic.tp.monitorInterval=<span class=\"number\">5</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].threadPoolName=tpExecutor</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].corePoolSize=<span class=\"number\">6</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].executorType=common</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].maximumPoolSize=<span class=\"number\">8</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].queueCapacity=<span class=\"number\">200</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].queueType=VariableLinkedBlockingQueue</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].rejectedHandlerType=CallerRunsPolicy</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].keepAliveTime=<span class=\"number\">50</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].allowCoreThreadTimeOut=<span class=\"literal\">false</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].threadNamePrefix=test</span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].waitForTasksToCompleteOnShutdown=<span class=\"literal\">false</span></span><br><span class=\"line\">spring.dynamic.tp.executors[<span class=\"number\">0</span>].preStartAllCoreThreads=<span class=\"literal\">false</span> </span><br></pre></td></tr></table></figure>\n\n<p>启动类加 @EnableDynamicTp 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE， ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DtpBeanDefinitionRegistrar.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableDynamicTp &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动项目，运行以下测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过依赖注入的方式获取</span></span><br><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ThreadPoolExecutor tpExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   tpExecutor.execute(() -&gt; System.out.println(<span class=\"string\">&quot;tpExecutor&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 通过 DtpRegistry 手动获取</span></span><br><span class=\"line\">   <span class=\"type\">DtpExecutor</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> DtpRegistry.getExecutor(<span class=\"string\">&quot;tpExecutor&quot;</span>);</span><br><span class=\"line\">   dtpExecutor.execute(() -&gt; System.out.println(<span class=\"string\">&quot;tpExecutor&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续在程序正常运行中，只需要修改配置客户端监听到节点变更，自动拉取最新的线程池配置并刷新，即可完成线程池的动态调参功能。</p>\n<p>如果想普通的 JUC 线程池集成在 dynamic-tp 监控体系中，可以 @Bean 定义时加 @DynamicTp 注解。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DynamicTp(&quot;tpExecutor&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ThreadPoolExecutor <span class=\"title function_\">tpExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>是不是非常容易上手，非常方便食用，那 dynamic-tp 是如何支持配置化，如何实现修改配置后线程池动态调参，它如何设计的呢，下面我们来分析下。</p>\n<h1 id=\"2-源码分析\"><a href=\"#2-源码分析\" class=\"headerlink\" title=\"2. 源码分析\"></a>2. 源码分析</h1><p><strong>前置知识点</strong>：对 Java 线程池不是很了解的可以看下这篇文章<a href=\"https://www.wormholestack.com/archives/668/\">《深入Java线程池》</a></p>\n<p>在分析源码之前，我们先来思考下如果是我们来实现 <code>动态线程池组件</code> 应该如何设计。</p>\n<p>@ 首先不论是硬编码的线程池还是通过配置化动态生成的线程池都是一类线程池（同一基类），而这一类线程池的参数可以抽象成<code>配置</code>，这个<code>配置</code>既可以是本项目中的文件；也可以是任意远程端口的文件，例如包括业界的配置中心们例如 nacos，zookeeper，apollo，etcd 等；当然它甚至可以不依赖配置中心，通过前端管理系统页面配置，走DB，通过刷新 API 接口中的 String 类型的文本配置，进而刷新线程池配置，这也是一种实现思路。</p>\n<p>@ 提供一个功能入口可以将<code>配置</code>构造成一个线程池对象，内部维护一个线程池注册表，将<code>配置</code>对应的线程池添加至注册表中。</p>\n<p>@ 实例化线程池对象，Spring 环境则注入依赖 Bean，以供 IOC 容器使用。</p>\n<p>@ 项目启动时首先先加载<code>配置</code>实例化线程池对象</p>\n<p>@ 如果<code>配置</code>指向的是远端配置中心，则注册监听器，当远端注册配置中心刷新时回调，当前系统监听到回调刷新<code>配置</code>，刷新线程池（动态调参），刷新本地线程池注册表。</p>\n<p>至此我们设计出来的<code>简易动态线程池组件</code>应该可以基本使用了。</p>\n<p>其实<code>简易动态线程池组件</code>还有很多进步的空间，例如线程池调参监控，异常报警等。</p>\n<p>当然以上说的这些基础功能以及额外的高级功能，dynamic-tp 都已经实现了，不过它目前没有提供支持我们刚刚所说通过管理系统页面配置走 DB 通过接口刷新的官方实现，且不支持除配置中心应用外的选择，也就是说无配置中心应用，目前不支持线程池动态调参（但支持监控）,但事实上你可以根据它提供的 SPI 自行实现。<br>这可能 dynamic-tp 定位是轻量级动态线程池组件，且配置中心是现在大多数互联网系统都会使用的组件有关。</p>\n<p>接下来我们来通过分析源码来看它是如何具体实现的。</p>\n<h2 id=\"2-1-配置\"><a href=\"#2-1-配置\" class=\"headerlink\" title=\"2.1 配置\"></a>2.1 配置</h2><p>dynamic-tp 通过 DtpProperties 来做<code>配置</code>的统一收口，这个配置包括本地文件或者配置中心中的文件(properties，json，yml，txt，xml)</p>\n<p>代码如下：</p>\n<p>可以看到目前已支持 Nacos、Apollo、Zookeeper、Consul、Etcd 配置中心</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = DynamicTpConst.MAIN_PROPERTIES_PREFIX)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enabled DynamicTp.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabled</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If print banner.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabledBanner</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Nacos config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Nacos nacos;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Apollo config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Apollo apollo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Zookeeper config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Zookeeper zookeeper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Etcd config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Etcd etcd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Config file type.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">configType</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;yml&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enabled metrics collect.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabledCollect</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Metrics collector types， default is logging.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; collectorTypes = Lists.newArrayList(MICROMETER.name());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Metrics log storage path， just for &quot;logging&quot; type.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String logPath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Monitor interval， time unit（s）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">monitorInterval</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ThreadPoolExecutor configs.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ThreadPoolProperties&gt; executors;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Tomcat worker thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties tomcatTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Jetty thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties jettyTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Undertow thread pool.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SimpleTpProperties undertowTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dubbo thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; dubboTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Hystrix thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; hystrixTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RocketMq thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; rocketMqTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Grpc thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; grpcTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Motan server thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; motanTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Okhttp3 thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; okhttp3Tp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Brpc thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; brpcTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Tars thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; tarsTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sofa thread pools.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;SimpleTpProperties&gt; sofaTp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Notify platform configs.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;NotifyPlatform&gt; platforms;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Nacos</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String dataId;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String group;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Apollo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Zookeeper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String zkConnectStr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String configVersion;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String node;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String configKey;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Etcd config.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Data</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Etcd</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String endpoints;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String user;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">charset</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;UTF-8&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">Boolean</span> <span class=\"variable\">authEnable</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">authority</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ssl&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中提供了一个配置解析接口 <code>ConfigParser</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ConfigParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 是否支持配置解析</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(ConfigFileTypeEnum type)</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\">// 解析支持的类型</span></span><br><span class=\"line\">    List&lt;ConfigFileTypeEnum&gt; <span class=\"title function_\">types</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 解析</span></span><br><span class=\"line\">    Map&lt;Object， Object&gt; doParse(String content) <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 解析指定前缀</span></span><br><span class=\"line\">    Map&lt;Object， Object&gt; doParse(String content， String prefix) <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ConfigFileTypeEnum 如下，覆盖了主流文件类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ConfigFileTypeEnum</span> &#123;</span><br><span class=\"line\">    PROPERTIES(<span class=\"string\">&quot;properties&quot;</span>)，</span><br><span class=\"line\">    XML(<span class=\"string\">&quot;xml&quot;</span>)，</span><br><span class=\"line\">    JSON(<span class=\"string\">&quot;json&quot;</span>)，</span><br><span class=\"line\">    YML(<span class=\"string\">&quot;yml&quot;</span>)，</span><br><span class=\"line\">    YAML(<span class=\"string\">&quot;yaml&quot;</span>)，</span><br><span class=\"line\">    TXT(<span class=\"string\">&quot;txt&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>项目中实现了配置解析基类，以及默认提供了 3 中文件类型配置解析类，json，properties以及yaml，使用者完全可以通过继承 AbstractConfigParser 来补充配置解析模式。</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132825.png\" alt=\"image-20230217231356426\"></a></p>\n<p>AbstractConfigParser 代码如下，模板方法由子类实现具体的解析逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractConfigParser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(ConfigFileTypeEnum type)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.types().contains(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;Object， Object&gt; doParse(String content， String prefix) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> doParse(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>子类的实现这里就不看了，大差不差就是通过读取文件，解析每一行配置项，最后将结果封装成Map&lt;Object， Object&gt; result 返回。</p>\n<p>接着通过 Spring-bind 提供的解析方法 将 Map&lt;Object， Object&gt; result 绑定到 DtpProperties 配置类上</p>\n<p>实现代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertiesBinder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">PropertiesBinder</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindDtpProperties</span><span class=\"params\">(Map&lt;?， Object&gt; properties， DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurationPropertySource</span> <span class=\"variable\">sources</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapConfigurationPropertySource</span>(properties);</span><br><span class=\"line\">        <span class=\"type\">Binder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Binder</span>(sources);</span><br><span class=\"line\">        <span class=\"type\">ResolvableType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ResolvableType.forClass(DtpProperties.class);</span><br><span class=\"line\">        Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(dtpProperties);</span><br><span class=\"line\">        binder.bind(MAIN_PROPERTIES_PREFIX， target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bindDtpProperties</span><span class=\"params\">(Environment environment， DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Binder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> Binder.get(environment);</span><br><span class=\"line\">        <span class=\"type\">ResolvableType</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ResolvableType.forClass(DtpProperties.class);</span><br><span class=\"line\">        Bindable&lt;?&gt; target = Bindable.of(type).withExistingValue(dtpProperties);</span><br><span class=\"line\">        binder.bind(MAIN_PROPERTIES_PREFIX， target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里已经拿到了<code>配置</code>，我们来看接下来的流程。</p>\n<h2 id=\"2-2-注册线程池\"><a href=\"#2-2-注册线程池\" class=\"headerlink\" title=\"2.2 注册线程池\"></a>2.2 注册线程池</h2><p>DtpBeanDefinitionRegistrar 实现了 ConfigurationClassPostProcessor 利用 Spring 的动态注册 bean 机制，在 bean 初始化 之前 注册 BeanDefinition 以达到注入 bean 的目的</p>\n<p><strong>ps</strong>：最终被 Spring ConfigurationClassPostProcessor 执行出来 对这块不熟悉的小伙伴可以去翻看 Spring 源码。</p>\n<p>来看下 DtpBeanDefinitionRegistrar 具体做了什么吧</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpBeanDefinitionRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>， EnvironmentAware &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.environment = environment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata， BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DtpProperties</span> <span class=\"variable\">dtpProperties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpProperties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 从 Environment 读取配置信息绑定到 DtpProperties</span></span><br><span class=\"line\">        PropertiesBinder.bindDtpProperties(environment， dtpProperties);</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executors</span> <span class=\"operator\">=</span> dtpProperties.getExecutors();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(executors)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp registrar， no executors are configured.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历并注册线程池 BeanDefinition</span></span><br><span class=\"line\">        executors.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 类型选择，common-&gt;DtpExecutor，eager-&gt;EagerDtpExecutor </span></span><br><span class=\"line\">            Class&lt;?&gt; executorTypeClass = ExecutorType.getClass(x.getExecutorType());</span><br><span class=\"line\">            <span class=\"comment\">// 通过 ThreadPoolProperties 来构造线程池所需要的属性</span></span><br><span class=\"line\">            Map&lt;String， Object&gt; properties = buildPropertyValues(x);</span><br><span class=\"line\">            Object[] args = buildConstructorArgs(executorTypeClass， x);</span><br><span class=\"line\">            <span class=\"comment\">// 工具类 BeanDefinition 注册 Bean 相当于手动用 @Bean 声明线程池对象</span></span><br><span class=\"line\">            BeanUtil.registerIfAbsent(registry， x.getThreadPoolName()， executorTypeClass， properties， args);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>registerBeanDefinitions 方法中主要做了这么几件事</p>\n<ol>\n<li>从 Environment 读取配置信息绑定到 DtpProperties</li>\n<li>获取配置文件中配置的线程池，如果没有则结束</li>\n<li>遍历线程池，绑定配置构造线程池所需要的属性，根据配置中的 executorType 注册不同类型的线程池 Bean(下面会说)</li>\n<li>BeanUtil#registerIfAbsent() 注册 Bean</li>\n</ol>\n<p><code>ExecutorType</code> 目前项目支持 3 种类型，分别对应 3 个线程池，这里先跳过，我们下文详细介绍</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132826.png\" alt=\"image-20230218092135653\"></a></p>\n<p>回到刚才的步骤，接下来通过 ThreadPoolProperties 来构造线程池所需要的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String， Object&gt; buildPropertyValues(ThreadPoolProperties tpp) &#123;</span><br><span class=\"line\">       Map&lt;String， Object&gt; properties = Maps.newHashMap();</span><br><span class=\"line\">       properties.put(THREAD_POOL_NAME， tpp.getThreadPoolName());</span><br><span class=\"line\">       properties.put(THREAD_POOL_ALIAS_NAME， tpp.getThreadPoolAliasName());</span><br><span class=\"line\">       properties.put(ALLOW_CORE_THREAD_TIMEOUT， tpp.isAllowCoreThreadTimeOut());</span><br><span class=\"line\">       properties.put(WAIT_FOR_TASKS_TO_COMPLETE_ON_SHUTDOWN， tpp.isWaitForTasksToCompleteOnShutdown());</span><br><span class=\"line\">       properties.put(AWAIT_TERMINATION_SECONDS， tpp.getAwaitTerminationSeconds());</span><br><span class=\"line\">       properties.put(PRE_START_ALL_CORE_THREADS， tpp.isPreStartAllCoreThreads());</span><br><span class=\"line\">       properties.put(RUN_TIMEOUT， tpp.getRunTimeout());</span><br><span class=\"line\">       properties.put(QUEUE_TIMEOUT， tpp.getQueueTimeout());</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">notifyItems</span> <span class=\"operator\">=</span> mergeAllNotifyItems(tpp.getNotifyItems());</span><br><span class=\"line\">       properties.put(NOTIFY_ITEMS， notifyItems);</span><br><span class=\"line\">       properties.put(NOTIFY_ENABLED， tpp.isNotifyEnabled());</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">taskWrappers</span> <span class=\"operator\">=</span> TaskWrappers.getInstance().getByNames(tpp.getTaskWrapperNames());</span><br><span class=\"line\">       properties.put(TASK_WRAPPERS， taskWrappers);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> properties;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>选择阻塞队列，这里针对 EagerDtpExecutor 做了单独处理，选择了 TaskQueue 作为阻塞队列(下文说明)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Object[] buildConstructorArgs(Class&lt;?&gt; clazz， ThreadPoolProperties tpp) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class=\"line\">     <span class=\"comment\">// 如果是 EagerDtpExecutor 的话，对工作队列就是 TaskQueue</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (clazz.equals(EagerDtpExecutor.class)) &#123;</span><br><span class=\"line\">         taskQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">TaskQueue</span>(tpp.getQueueCapacity());</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 不是 EagerDtpExecutor的话，就根据配置中的 queueType 来选择阻塞的队列</span></span><br><span class=\"line\">         taskQueue = buildLbq(tpp.getQueueType()， tpp.getQueueCapacity()， tpp.isFair()， tpp.getMaxFreeMemory());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;</span><br><span class=\"line\">             tpp.getCorePoolSize()，</span><br><span class=\"line\">             tpp.getMaximumPoolSize()，</span><br><span class=\"line\">             tpp.getKeepAliveTime()，</span><br><span class=\"line\">             tpp.getUnit()，</span><br><span class=\"line\">             taskQueue，</span><br><span class=\"line\">             <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadFactory</span>(tpp.getThreadNamePrefix())，</span><br><span class=\"line\">             RejectHandlerGetter.buildRejectedHandler(tpp.getRejectedHandlerType())</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>非 EagerDtpExecutor 则根据配置中的 queueType 来选择阻塞的队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BlockingQueue&lt;Runnable&gt; <span class=\"title function_\">buildLbq</span><span class=\"params\">(String name， <span class=\"type\">int</span> capacity， <span class=\"type\">boolean</span> fair， <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">    BlockingQueue&lt;Runnable&gt; blockingQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Objects.equals(name， ARRAY_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， PRIORITY_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， DELAY_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DelayQueue</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， SYNCHRONOUS_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;&gt;(fair);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_TRANSFER_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， LINKED_BLOCKING_DEQUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， VARIABLE_LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;&gt;(capacity);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Objects.equals(name， MEMORY_SAFE_LINKED_BLOCKING_QUEUE.getName())) &#123;</span><br><span class=\"line\">        blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">MemorySafeLinkedBlockingQueue</span>&lt;&gt;(capacity， maxFreeMemory * M_1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (blockingQueue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blockingQueue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    log.error(<span class=\"string\">&quot;Cannot find specified BlockingQueue &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find specified BlockingQueue &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里我们已经构造好了创建一个线程池需要的所有参数</p>\n<p>调用 BeanUtil#registerIfAbsent()，先判断是否同名 bean，如果同名先删除后注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BeanUtil</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerIfAbsent</span><span class=\"params\">(BeanDefinitionRegistry registry，</span></span><br><span class=\"line\"><span class=\"params\">                                        String beanName，</span></span><br><span class=\"line\"><span class=\"params\">                                        Class&lt;?&gt; clazz，</span></span><br><span class=\"line\"><span class=\"params\">                                        Map&lt;String， Object&gt; properties，</span></span><br><span class=\"line\"><span class=\"params\">                                        Object... constructorArgs)</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果存在同名bean，先删除后重新注入bean</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ifPresent(registry， beanName， clazz) || registry.containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp registrar， bean definition already exists， overrides with remote config， beanName: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                    beanName);</span><br><span class=\"line\">            registry.removeBeanDefinition(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doRegister(registry， beanName， clazz， properties， constructorArgs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注册Bean 相当于手动用 <span class=\"doctag\">@Bean</span> 声明线程池对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> registry</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> beanName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clazz</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> properties</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> constructorArgs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRegister</span><span class=\"params\">(BeanDefinitionRegistry registry，</span></span><br><span class=\"line\"><span class=\"params\">                                  String beanName，</span></span><br><span class=\"line\"><span class=\"params\">                                  Class&lt;?&gt; clazz，</span></span><br><span class=\"line\"><span class=\"params\">                                  Map&lt;String， Object&gt; properties，</span></span><br><span class=\"line\"><span class=\"params\">                                  Object... constructorArgs)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BeanDefinitionBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object constructorArg : constructorArgs) &#123;</span><br><span class=\"line\">            builder.addConstructorArgValue(constructorArg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MapUtils.isNotEmpty(properties)) &#123;</span><br><span class=\"line\">            properties.forEach(builder::addPropertyValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 注册 Bean </span></span><br><span class=\"line\">        registry.registerBeanDefinition(beanName， builder.getBeanDefinition());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此线程池对象已经交由 IOC 容器管理了。</p>\n<p>我们的线程池对象总不能无脑塞入 IOC 容器就不管了吧，肯定是要留根的，也就是需要一个线程池注册表，记录有哪些线程池是受 dynamic-tp 托管的，这样除了可以进行统计外，也就可以实现通知报警了。</p>\n<p>下面我们来看下项目是如何实现注册表的</p>\n<h2 id=\"2-3-注册表\"><a href=\"#2-3-注册表\" class=\"headerlink\" title=\"2.3 注册表\"></a>2.3 注册表</h2><p><code>DtpPostProcessor</code> 利用了 Spring 容器启动 BeanPostProcessor 机制增强机制，在 bean 初始化的时候调用 postProcessAfterInitialization，它实现了获取被 IOC 容器托管的线程池 bean 然后注册到本地的注册表中。</p>\n<p>代码实现如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Object bean， <span class=\"meta\">@NonNull</span> String beanName)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 只增强线程池相关的类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(bean <span class=\"keyword\">instanceof</span> ThreadPoolExecutor) &amp;&amp; !(bean <span class=\"keyword\">instanceof</span> ThreadPoolTaskExecutor)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果是 DtpExecutor 类型注册到注册表 DTP_REGISTRY</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> DtpExecutor) &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> (DtpExecutor) bean;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> EagerDtpExecutor) &#123;</span><br><span class=\"line\">                ((TaskQueue) dtpExecutor.getQueue()).setExecutor((EagerDtpExecutor) dtpExecutor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            registerDtp(dtpExecutor);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dtpExecutor;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取上下文</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> ApplicationContextHolder.getInstance();</span><br><span class=\"line\">        String dtpAnnotationVal;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 读取标注 @DynamicTp 注解的 bean 则为基本线程池，但受组件管理监控</span></span><br><span class=\"line\">            <span class=\"type\">DynamicTp</span> <span class=\"variable\">dynamicTp</span> <span class=\"operator\">=</span> applicationContext.findAnnotationOnBean(beanName， DynamicTp.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.nonNull(dynamicTp)) &#123;</span><br><span class=\"line\">                dtpAnnotationVal = dynamicTp.value();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">BeanDefinitionRegistry</span> <span class=\"variable\">registry</span> <span class=\"operator\">=</span> (BeanDefinitionRegistry) applicationContext;</span><br><span class=\"line\">                <span class=\"type\">AnnotatedBeanDefinition</span> <span class=\"variable\">annotatedBeanDefinition</span> <span class=\"operator\">=</span> (AnnotatedBeanDefinition) registry.getBeanDefinition(beanName);</span><br><span class=\"line\">                <span class=\"type\">MethodMetadata</span> <span class=\"variable\">methodMetadata</span> <span class=\"operator\">=</span> (MethodMetadata) annotatedBeanDefinition.getSource();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Objects.isNull(methodMetadata) || !methodMetadata.isAnnotated(DynamicTp.class.getName())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dtpAnnotationVal = Optional.ofNullable(methodMetadata.getAnnotationAttributes(DynamicTp.class.getName()))</span><br><span class=\"line\">                        .orElse(Collections.emptyMap())</span><br><span class=\"line\">                        .getOrDefault(<span class=\"string\">&quot;value&quot;</span>， <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        .toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;There is no bean with the given name &#123;&#125;&quot;</span>， beanName， e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果说bean上面的DynamicTp注解，使用注解的值作为线程池的名称，没有的话就使用bean的名称</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">poolName</span> <span class=\"operator\">=</span> StringUtils.isNotBlank(dtpAnnotationVal) ? dtpAnnotationVal : beanName;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ThreadPoolTaskExecutor) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 注册到注册表 COMMON_REGISTRY</span></span><br><span class=\"line\">            <span class=\"type\">ThreadPoolTaskExecutor</span> <span class=\"variable\">taskExecutor</span> <span class=\"operator\">=</span> (ThreadPoolTaskExecutor) bean;</span><br><span class=\"line\">            registerCommon(poolName， taskExecutor.getThreadPoolExecutor());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            registerCommon(poolName， (ThreadPoolExecutor) bean);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态线程池注册 向 Map 集合 put 元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDtp</span><span class=\"params\">(DtpExecutor executor)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.registerDtp(executor， <span class=\"string\">&quot;beanPostProcessor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 非动态线程池注册 向 Map 集合 put 元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> poolName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> executor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerCommon</span><span class=\"params\">(String poolName， ThreadPoolExecutor executor)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorWrapper</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExecutorWrapper</span>(poolName， executor);</span><br><span class=\"line\">        DtpRegistry.registerCommon(wrapper， <span class=\"string\">&quot;beanPostProcessor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单总结下，和刚刚我们分析完全一致</p>\n<ol>\n<li>获取到 bean 后，如果是非线程池类型则结束。</li>\n<li>如果是 DtpExecutor 则注册到 DTP_REGISTRY 注册表中</li>\n<li>如果是 非动态线程池且标注了 @DynamicTp 注解则注册到 COMMON_REGISTRY 注册表中</li>\n<li>如果是 非动态线程池且未标注 @DynamicTp 注解则结束不做增强</li>\n</ol>\n<p>DtpRegistry 主要负责 注册、获取、刷新某个动态线程池（刷新线程池我们会下文分析）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpRegistry</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationRunner</span>， Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Maintain all automatically registered and manually registered DtpExecutors.</span></span><br><span class=\"line\"><span class=\"comment\">     * 动态线程池 key为线程池name</span></span><br><span class=\"line\"><span class=\"comment\">     * DtpExecutor ThreadPoolExecutor加强版</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， DtpExecutor&gt; DTP_REGISTRY = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Maintain all automatically registered and manually registered JUC ThreadPoolExecutors.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 标有DynamicTp注解的线程池</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， ExecutorWrapper&gt; COMMON_REGISTRY = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Equator</span> <span class=\"variable\">EQUATOR</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GetterBaseEquator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置文件映射</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">listAllDtpNames</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lists.newArrayList(DTP_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">listAllCommonNames</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Lists.newArrayList(COMMON_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerDtp</span><span class=\"params\">(DtpExecutor executor， String source)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp register dtpExecutor， source: &#123;&#125;， executor: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                source， ExecutorConverter.convert(executor));</span><br><span class=\"line\">        DTP_REGISTRY.putIfAbsent(executor.getThreadPoolName()， executor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerCommon</span><span class=\"params\">(ExecutorWrapper wrapper， String source)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp register commonExecutor， source: &#123;&#125;， name: &#123;&#125;&quot;</span>， source， wrapper.getThreadPoolName());</span><br><span class=\"line\">        COMMON_REGISTRY.putIfAbsent(wrapper.getThreadPoolName()， wrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DtpExecutor <span class=\"title function_\">getDtpExecutor</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DTP_REGISTRY.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(executor)) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;Cannot find a specified dtpExecutor， name: &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find a specified dtpExecutor， name: &quot;</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorWrapper <span class=\"title function_\">getCommonExecutor</span><span class=\"params\">(<span class=\"keyword\">final</span> String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> COMMON_REGISTRY.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(executor)) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;Cannot find a specified commonExecutor， name: &#123;&#125;&quot;</span>， name);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpException</span>(<span class=\"string\">&quot;Cannot find a specified commonExecutor， name: &quot;</span> + name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDtpProperties</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.dtpProperties = dtpProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 线程池名称</span></span><br><span class=\"line\">        Set&lt;String&gt; remoteExecutors = Collections.emptySet();</span><br><span class=\"line\">        <span class=\"comment\">// 获取配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(dtpProperties.getExecutors())) &#123;</span><br><span class=\"line\">            remoteExecutors = dtpProperties.getExecutors().stream()</span><br><span class=\"line\">                    .map(ThreadPoolProperties::getThreadPoolName)</span><br><span class=\"line\">                    .collect(Collectors.toSet());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// DTP_REGISTRY 中已经注册的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">registeredDtpExecutors</span> <span class=\"operator\">=</span> Sets.newHashSet(DTP_REGISTRY.keySet());</span><br><span class=\"line\">        <span class=\"comment\">// 找出所有线程池中没有在配置文件中配置的线程池</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">localDtpExecutors</span> <span class=\"operator\">=</span> CollectionUtils.subtract(registeredDtpExecutors， remoteExecutors);</span><br><span class=\"line\">        <span class=\"comment\">// 日志</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DtpRegistry initialization is complete， remote dtpExecutors: &#123;&#125;， local dtpExecutors: &#123;&#125;， local commonExecutors: &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                remoteExecutors， localDtpExecutors， COMMON_REGISTRY.keySet());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码比较简单，这里不再说明了。</p>\n<p>流程至此，动态线程池，标注了 @DynamicTp 注解的线程池，都已经准备就绪了。</p>\n<p>你可能会问那配置刷新 配置刷新动态调参是如何实现的呢，别急，我们继续分析。</p>\n<h2 id=\"2-4-配置刷新-动态调参\"><a href=\"#2-4-配置刷新-动态调参\" class=\"headerlink\" title=\"2.4 配置刷新 动态调参\"></a>2.4 配置刷新 动态调参</h2><p>Dynamic-tp 提供了配置刷新接口 Refresher，和基类 AbstractRefresher，支持不同配置中心的刷新基类，甚至完全可以自行扩展，其原理其实就是当配置中心监听到配置文件的变动后，解析配置文件，刷新配置文件，最后通过 Spring ApplicationListener 机制发送 RefreshEvent 刷新事件，由对应的 Adapter 来处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Refresher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Refresh with specify content.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileType file type</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(String content， ConfigFileTypeEnum fileType)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132827.png\" alt=\"image-20230218103556728\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractRefresher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Refresher</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(String content， ConfigFileTypeEnum fileType)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content) || Objects.isNull(fileType)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty content or null fileType.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">configHandler</span> <span class=\"operator\">=</span> ConfigHandler.getInstance();</span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> configHandler.parseConfig(content， fileType);</span><br><span class=\"line\">            doRefresh(properties);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp refresh error， content: &#123;&#125;， fileType: &#123;&#125;&quot;</span>， content， fileType， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(Map&lt;Object， Object&gt; properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MapUtils.isEmpty(properties)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty properties.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将发生变化的属性绑定到DtpProperties对象上</span></span><br><span class=\"line\">        PropertiesBinder.bindDtpProperties(properties， dtpProperties);</span><br><span class=\"line\">        <span class=\"comment\">// 更新线程池属性</span></span><br><span class=\"line\">        doRefresh(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        DtpRegistry.refresh(dtpProperties);</span><br><span class=\"line\">        publishEvent(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RefreshEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RefreshEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们以 Zookeeper 为配置中心举例说明，代码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZookeeperRefresher</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRefresher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EnvironmentAware</span>， InitializingBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ConnectionStateListener</span> <span class=\"variable\">connectionStateListener</span> <span class=\"operator\">=</span> (client， newState) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 连接变更</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newState == ConnectionState.RECONNECTED) &#123;</span><br><span class=\"line\">                loadAndRefresh();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">CuratorListener</span> <span class=\"variable\">curatorListener</span> <span class=\"operator\">=</span> (client， curatorEvent) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">WatchedEvent</span> <span class=\"variable\">watchedEvent</span> <span class=\"operator\">=</span> curatorEvent.getWatchedEvent();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != watchedEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (watchedEvent.getType()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 监听节点变更</span></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> NodeChildrenChanged:</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> NodeDataChanged:</span><br><span class=\"line\">                        <span class=\"comment\">// 刷新</span></span><br><span class=\"line\">                        loadAndRefresh();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">CuratorFramework</span> <span class=\"variable\">curatorFramework</span> <span class=\"operator\">=</span> CuratorUtil.getCuratorFramework(dtpProperties);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">nodePath</span> <span class=\"operator\">=</span> CuratorUtil.nodePath(dtpProperties);</span><br><span class=\"line\"></span><br><span class=\"line\">        curatorFramework.getConnectionStateListenable().addListener(connectionStateListener);</span><br><span class=\"line\">        curatorFramework.getCuratorListenable().addListener(curatorListener);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp refresher， add listener success， nodePath: &#123;&#125;&quot;</span>， nodePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * load config and refresh</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadAndRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">env</span> <span class=\"operator\">=</span> ((ConfigurableEnvironment) environment);</span><br><span class=\"line\">        env.getPropertySources().remove(ZK_PROPERTY_SOURCE_NAME);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用了 Spring 机制，实现了 InitializingBean 并重写 afterPropertiesSet，在 Bean 实例化完成之后会被自动调用，在这期间针对 Zookeeper 连接，节点变更监听器进行注册，监听连接变更和节点变更后执行刷新操作。</p>\n<p><code>doRefresh(CuratorUtil.genPropertiesMap(dtpProperties));</code>实现由基类统一处理，解析配置并绑定 DtpProperties 上，执行 DtpRegistry#refresh() 刷新后发布一个 RefreshEvent 事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(Map&lt;Object， Object&gt; properties)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (MapUtils.isEmpty(properties)) &#123;</span><br><span class=\"line\">        log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty properties.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解析配置并绑定 DtpProperties 上</span></span><br><span class=\"line\">    PropertiesBinder.bindDtpProperties(properties， dtpProperties);</span><br><span class=\"line\">    <span class=\"comment\">// 更新线程池属性</span></span><br><span class=\"line\">    doRefresh(dtpProperties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">    DtpRegistry.refresh(dtpProperties);</span><br><span class=\"line\">    publishEvent(dtpProperties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">RefreshEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RefreshEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">    ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看 DtpRegistry#refresh() 的实现，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(DtpProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Objects.isNull(properties) || CollectionUtils.isEmpty(properties.getExecutors())) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， empty threadPoolProperties.&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 属性不为空 从属性中拿到所有的线程池属性配置</span></span><br><span class=\"line\">        properties.getExecutors().forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isBlank(x.getThreadPoolName())) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;DynamicTp refresh， threadPoolName must not be empty.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 从 DTP_REGISTRY 线程注册池表中拿到对应的线程池对象</span></span><br><span class=\"line\">            <span class=\"type\">val</span> <span class=\"variable\">dtpExecutor</span> <span class=\"operator\">=</span> DTP_REGISTRY.get(x.getThreadPoolName());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Objects.isNull(dtpExecutor)) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;DynamicTp refresh， cannot find specified dtpExecutor， name: &#123;&#125;.&quot;</span>， x.getThreadPoolName());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 刷新 更新线程池对象</span></span><br><span class=\"line\">            refresh(dtpExecutor， x);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">(DtpExecutor executor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 参数合法校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (properties.getCorePoolSize() &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                || properties.getMaximumPoolSize() &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">                || properties.getMaximumPoolSize() &lt; properties.getCorePoolSize()</span><br><span class=\"line\">                || properties.getKeepAliveTime() &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp refresh， invalid parameters exist， properties: &#123;&#125;&quot;</span>， properties);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 线程池旧配置</span></span><br><span class=\"line\">        <span class=\"type\">DtpMainProp</span> <span class=\"variable\">oldProp</span> <span class=\"operator\">=</span> ExecutorConverter.convert(executor);</span><br><span class=\"line\">        <span class=\"comment\">// 真正开始刷新</span></span><br><span class=\"line\">        doRefresh(executor， properties);</span><br><span class=\"line\">        <span class=\"comment\">// 线程池新配置</span></span><br><span class=\"line\">        <span class=\"type\">DtpMainProp</span> <span class=\"variable\">newProp</span> <span class=\"operator\">=</span> ExecutorConverter.convert(executor);</span><br><span class=\"line\">        <span class=\"comment\">// 相等不作处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldProp.equals(newProp)) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;DynamicTp refresh， main properties of [&#123;&#125;] have not changed.&quot;</span>， executor.getThreadPoolName());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;FieldInfo&gt; diffFields = EQUATOR.getDiffFields(oldProp， newProp);</span><br><span class=\"line\">        List&lt;String&gt; diffKeys = diffFields.stream().map(FieldInfo::getFieldName).collect(toList());</span><br><span class=\"line\">        <span class=\"comment\">// 线程池参数变更 平台提醒</span></span><br><span class=\"line\">        NoticeManager.doNoticeAsync(<span class=\"keyword\">new</span> <span class=\"title class_\">ExecutorWrapper</span>(executor)， oldProp， diffKeys);</span><br><span class=\"line\">        <span class=\"comment\">// 更新参数 日志打印</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;DynamicTp refresh， name: [&#123;&#125;]， changed keys: &#123;&#125;， corePoolSize: [&#123;&#125;]， maxPoolSize: [&#123;&#125;]， queueType: [&#123;&#125;]， &quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;queueCapacity: [&#123;&#125;]， keepAliveTime: [&#123;&#125;]， rejectedType: [&#123;&#125;]， allowsCoreThreadTimeOut: [&#123;&#125;]&quot;</span>，</span><br><span class=\"line\">                executor.getThreadPoolName()，</span><br><span class=\"line\">                diffKeys，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getCorePoolSize()， newProp.getCorePoolSize())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getMaxPoolSize()， newProp.getMaxPoolSize())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueType()， newProp.getQueueType())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getQueueCapacity()， newProp.getQueueCapacity())，</span><br><span class=\"line\">                String.format(<span class=\"string\">&quot;%ss =&gt; %ss&quot;</span>， oldProp.getKeepAliveTime()， newProp.getKeepAliveTime())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.getRejectType()， newProp.getRejectType())，</span><br><span class=\"line\">                String.format(PROPERTIES_CHANGE_SHOW_STYLE， oldProp.isAllowCoreThreadTimeOut()，</span><br><span class=\"line\">                        newProp.isAllowCoreThreadTimeOut()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结一下上述代码无非做了这么几件事</p>\n<ol>\n<li>参数合法校验</li>\n<li>获取到线程池旧配置</li>\n<li>执行刷新</li>\n<li>获取到线程池新配置</li>\n<li>如果新旧配置相同，则证明没有改动，不做处理</li>\n<li>否则线程池变更发送通知，并记录变更日志(ps：通知相关处理下文会说，这里先跳过)</li>\n</ol>\n<p>doRefresh 真正执行线程池的刷新，也依靠于 JUC 原生线程池支持动态属性变更。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpExecutor dtpExecutor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用相应的setXXX方法更新线程池参数</span></span><br><span class=\"line\">        doRefreshPoolSize(dtpExecutor， properties);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getKeepAliveTime(properties.getUnit())， properties.getKeepAliveTime())) &#123;</span><br><span class=\"line\">            dtpExecutor.setKeepAliveTime(properties.getKeepAliveTime()， properties.getUnit());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.allowsCoreThreadTimeOut()， properties.isAllowCoreThreadTimeOut())) &#123;</span><br><span class=\"line\">            dtpExecutor.allowCoreThreadTimeOut(properties.isAllowCoreThreadTimeOut());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update reject handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getRejectHandlerName()， properties.getRejectedHandlerType())) &#123;</span><br><span class=\"line\">            dtpExecutor.setRejectedExecutionHandler(RejectHandlerGetter.getProxy(properties.getRejectedHandlerType()));</span><br><span class=\"line\">            dtpExecutor.setRejectHandlerName(properties.getRejectedHandlerType());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update Alias Name</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getThreadPoolAliasName()， properties.getThreadPoolAliasName())) &#123;</span><br><span class=\"line\">            dtpExecutor.setThreadPoolAliasName(properties.getThreadPoolAliasName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        updateQueueProp(properties， dtpExecutor);</span><br><span class=\"line\">        dtpExecutor.setWaitForTasksToCompleteOnShutdown(properties.isWaitForTasksToCompleteOnShutdown());</span><br><span class=\"line\">        dtpExecutor.setAwaitTerminationSeconds(properties.getAwaitTerminationSeconds());</span><br><span class=\"line\">        dtpExecutor.setPreStartAllCoreThreads(properties.isPreStartAllCoreThreads());</span><br><span class=\"line\">        dtpExecutor.setRunTimeout(properties.getRunTimeout());</span><br><span class=\"line\">        dtpExecutor.setQueueTimeout(properties.getQueueTimeout());</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;TaskWrapper&gt; taskWrappers = TaskWrappers.getInstance().getByNames(properties.getTaskWrapperNames());</span><br><span class=\"line\">        dtpExecutor.setTaskWrappers(taskWrappers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// update notify items</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">allNotifyItems</span> <span class=\"operator\">=</span> mergeAllNotifyItems(properties.getNotifyItems());</span><br><span class=\"line\">        <span class=\"comment\">// 刷新通知平台</span></span><br><span class=\"line\">        NotifyHelper.refreshNotify(dtpExecutor.getThreadPoolName()， dtpProperties.getPlatforms()，</span><br><span class=\"line\">                dtpExecutor.getNotifyItems()， allNotifyItems);</span><br><span class=\"line\">        dtpExecutor.setNotifyItems(allNotifyItems);</span><br><span class=\"line\">        dtpExecutor.setNotifyEnabled(properties.isNotifyEnabled());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>doRefreshPoolSize 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefreshPoolSize</span><span class=\"params\">(ThreadPoolExecutor dtpExecutor， ThreadPoolProperties properties)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 调用ThreadPoolExecutor原生setXXX方法 支持在运行时动态修改</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (properties.getMaximumPoolSize() &lt; dtpExecutor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) &#123;</span><br><span class=\"line\">             dtpExecutor.setCorePoolSize(properties.getCorePoolSize());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) &#123;</span><br><span class=\"line\">             dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getMaximumPoolSize()， properties.getMaximumPoolSize())) &#123;</span><br><span class=\"line\">         dtpExecutor.setMaximumPoolSize(properties.getMaximumPoolSize());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getCorePoolSize()， properties.getCorePoolSize())) &#123;</span><br><span class=\"line\">         dtpExecutor.setCorePoolSize(properties.getCorePoolSize());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>updateQueueProp 更新线程池阻塞队列大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateQueueProp</span><span class=\"params\">(ThreadPoolProperties properties， DtpExecutor dtpExecutor)</span> &#123;</span><br><span class=\"line\">              <span class=\"comment\">// queueType 非 VariableLinkedBlockingQueue MemorySafeLinkedBlockingQueue 且executorType为EagerDtpExecutor 不刷新</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!canModifyQueueProp(properties)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 获取到线程池原来的队列</span></span><br><span class=\"line\">       <span class=\"type\">val</span> <span class=\"variable\">blockingQueue</span> <span class=\"operator\">=</span> dtpExecutor.getQueue();</span><br><span class=\"line\">       <span class=\"comment\">// 如果原来的队列容量和现在的不一样</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!Objects.equals(dtpExecutor.getQueueCapacity()， properties.getQueueCapacity())) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 并且原来的队列是 VariableLinkedBlockingQueue 类型的，那么就设置队列的容量</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (blockingQueue <span class=\"keyword\">instanceof</span> VariableLinkedBlockingQueue) &#123;</span><br><span class=\"line\">               ((VariableLinkedBlockingQueue&lt;Runnable&gt;) blockingQueue).setCapacity(properties.getQueueCapacity());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 否则不设置</span></span><br><span class=\"line\">               log.error(<span class=\"string\">&quot;DynamicTp refresh， the blockingqueue capacity cannot be reset， dtpName: &#123;&#125;， queueType &#123;&#125;&quot;</span>，</span><br><span class=\"line\">                       dtpExecutor.getThreadPoolName()， dtpExecutor.getQueueName());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 如果队列是 MemorySafeLinkedBlockingQueue，那么设置最大内存</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (blockingQueue <span class=\"keyword\">instanceof</span> MemorySafeLinkedBlockingQueue) &#123;</span><br><span class=\"line\">           ((MemorySafeLinkedBlockingQueue&lt;Runnable&gt;) blockingQueue).setMaxFreeMemory(properties.getMaxFreeMemory() * M_1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码提到了几个眼生的队列，他们都是 dynamic-tp 自行实现的阻塞队列，我们来看下</p>\n<p><code>VariableLinkedBlockingQueue</code>: 可以设置队列容量，且支持变更队列容量</p>\n<p><code>MemorySafeLinkedBlockingQueue</code>: 继承 VariableLinkedBlockingQueue，可以通过 maxFreeMemory 设置队列容量，在构造器中对容量有默认的大小限制</p>\n<p><strong>首先我们思考一下，为什么 dynamic-tp 要自行实现的阻塞队列？</strong></p>\n<p>当你翻看 Java 原生 LinkedBlockingQueue 队列时你就会发现，队列容量被定义为private final类型的，不能修改，那肯定是不符合我们修改阻塞队列大小还能实现刷新线程池的效果。</p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132828.png\" alt=\"image-20230218110508712\"></a></p>\n<p>其中着重说明下 MemorySafeLinkedBlockingQueue 队列，LinkedBlockingQueue的容量默认是Integer.MAX_VALUE，所以当我们不对其进行限制时，就有可能导致 OOM 问题，所以 MemorySafeLinkedBlockingQueue 构造函数设置了默认队列大小</p>\n<p>当我们往队列添加元素的时候，会先判断有没有足够的空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MemorySafeLinkedBlockingQueue</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;E&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">8032578371739960142L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THE_256_MB</span> <span class=\"operator\">=</span> <span class=\"number\">256</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列的容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> maxFreeMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 默认256MB</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>(THE_256_MB);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Integer.MAX_VALUE);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> capacity， <span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(capacity);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MemorySafeLinkedBlockingQueue</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;? extends E&gt; c， <span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(c);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * set the max free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maxFreeMemory the max free memory</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxFreeMemory</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">int</span> maxFreeMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxFreeMemory = maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * get the max free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the max free memory limit</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMaxFreeMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxFreeMemory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * determine if there is any remaining free memory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if has free memory</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasRemainedMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MemoryLimitCalculator.maxAvailable() &gt; maxFreeMemory) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;No more memory can be used.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(<span class=\"keyword\">final</span> E e)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 我们往队列添加元素的时候，会先判断有没有足够的空间</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasRemainedMemory()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.put(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"keyword\">final</span> E e， <span class=\"keyword\">final</span> <span class=\"type\">long</span> timeout， <span class=\"keyword\">final</span> TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasRemainedMemory() &amp;&amp; <span class=\"built_in\">super</span>.offer(e， timeout， unit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"keyword\">final</span> E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasRemainedMemory() &amp;&amp; <span class=\"built_in\">super</span>.offer(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>回到上文我们说刷新完线程池后，发送异步事件 RefreshEvent，来继续看下</p>\n<p>DtpAdapterListener 处于 adapter 模块，该模块主要是对些三方组件中的线程池进行管理（例如 Tomcat，Jetty 等），通过 spring 的事件发布监听机制来实现与核心流程解耦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpAdapterListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GenericApplicationListener</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsEventType</span><span class=\"params\">(ResolvableType resolvableType)</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; type = resolvableType.getRawClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> RefreshEvent.class.isAssignableFrom(type)</span><br><span class=\"line\">                    || CollectEvent.class.isAssignableFrom(type)</span><br><span class=\"line\">                    || AlarmCheckEvent.class.isAssignableFrom(type);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ApplicationEvent event)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> RefreshEvent) &#123;</span><br><span class=\"line\">                doRefresh(((RefreshEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> CollectEvent) &#123;</span><br><span class=\"line\">                doCollect(((CollectEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> AlarmCheckEvent) &#123;</span><br><span class=\"line\">                doAlarmCheck(((AlarmCheckEvent) event).getDtpProperties());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp adapter， event handle failed.&quot;</span>， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Do refresh.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dtpProperties dtpProperties</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doRefresh</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">handlerMap</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(DtpAdapter.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(handlerMap)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        handlerMap.forEach((k， v) -&gt; v.refresh(dtpProperties));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132829.png\" alt=\"image-20230218112109807\"></a></p>\n<h2 id=\"2-3-线程池类型\"><a href=\"#2-3-线程池类型\" class=\"headerlink\" title=\"2.3 线程池类型\"></a>2.3 线程池类型</h2><blockquote>\n<p>DtpLifecycleSupport</p>\n</blockquote>\n<p>DtpLifecycleSupport 继承了 JUC ThreadPoolExecutor，对原生线程池进行了增强</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpLifecycleSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ThreadPoolExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span>， DisposableBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String threadPoolName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Whether to wait for scheduled tasks to complete on shutdown，</span></span><br><span class=\"line\"><span class=\"comment\">     * not interrupting running tasks and executing all tasks in the queue.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在关闭线程池的时候是否等待任务执行完毕，不会打断运行中的任务，并且会执行队列中的所有任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"variable\">waitForTasksToCompleteOnShutdown</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The maximum number of seconds that this executor is supposed to block</span></span><br><span class=\"line\"><span class=\"comment\">     * on shutdown in order to wait for remaining tasks to complete their execution</span></span><br><span class=\"line\"><span class=\"comment\">     * before the rest of the container continues to shut down.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 在线程池关闭时等待的最大时间，目的就是等待线程池中的任务运行完毕。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">int</span> <span class=\"variable\">awaitTerminationSeconds</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DtpLifecycleSupport</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">int</span> maximumPoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">long</span> keepAliveTime，</span></span><br><span class=\"line\"><span class=\"params\">                               TimeUnit unit，</span></span><br><span class=\"line\"><span class=\"params\">                               BlockingQueue&lt;Runnable&gt; workQueue，</span></span><br><span class=\"line\"><span class=\"params\">                               ThreadFactory threadFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DtpProperties</span> <span class=\"variable\">dtpProperties</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBean(DtpProperties.class);</span><br><span class=\"line\">        <span class=\"comment\">// 子类实现</span></span><br><span class=\"line\">        initialize(dtpProperties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>提供了两个增强字段 <code>waitForTasksToCompleteOnShutdown</code> 和 <code>awaitTerminationSeconds</code></p>\n<p>我们以此来看下</p>\n<p><code>waitForTasksToCompleteOnShutdown</code> 作用在线程池销毁阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">internalShutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;Shutting down ExecutorService， poolName: &#123;&#125;&quot;</span>， threadPoolName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果需要等待任务执行完毕，则调用 shutdown()会执行先前已提交的任务，拒绝新任务提交，线程池状态变成 SHUTDOWN</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.waitForTasksToCompleteOnShutdown) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果不需要等待任务执行完毕，则直接调用shutdownNow()方法，尝试中断正在执行的任务，返回所有未执行的任务，线程池状态变成 STOP， 然后调用 Future 的 cancel 方法取消</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Runnable remainingTask : <span class=\"built_in\">this</span>.shutdownNow()) &#123;</span><br><span class=\"line\">                cancelRemainingTask(remainingTask);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awaitTerminationIfNecessary();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结下它的作用就是 在关闭线程池的时候看是否等待任务执行完毕，如果需要等待则会拒绝新任务的提交，执行先前已提交的任务，否则中断正在执行的任务。</p>\n<p>而 <code>awaitTerminationSeconds</code> 字段主要是配合 shutdown 使用，阻塞当前线程，等待已提交的任务执行完毕或者超时的最大时间，等待线程池中的任务运行结束。</p>\n<blockquote>\n<p>DtpExecutor</p>\n</blockquote>\n<p>DtpExecutor 也就是我们项目中横贯整个流程的动态线程池，它继承自 DtpLifecycleSupport，主要是也是实现对基本线程池的增强。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DtpLifecycleSupport</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SpringExecutor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Simple Business alias Name of Dynamic ThreadPool. Use for notify.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String threadPoolAliasName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * RejectHandler name.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String rejectHandlerName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If enable notify.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> notifyEnabled;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Notify items， see &#123;<span class=\"doctag\">@link</span> NotifyItemEnum&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 需要提醒的平台</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;NotifyItem&gt; notifyItems;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task wrappers， do sth enhanced.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;TaskWrapper&gt; taskWrappers = Lists.newArrayList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * If pre start all core threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 线程是否需要提前预热，真正调用的还是ThreadPoolExecutor的对应方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> preStartAllCoreThreads;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task execute timeout， unit (ms)， just for statistics.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> runTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Task queue wait timeout， unit (ms)， just for statistics.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> queueTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Total reject count.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">rejectCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Count run timeout tasks.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">runTimeoutCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Count queue wait timeout tasks.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">LongAdder</span> <span class=\"variable\">queueTimeoutCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongAdder</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DtpExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize， <span class=\"type\">int</span> maximumPoolSize， <span class=\"type\">long</span> keepAliveTime， TimeUnit unit， BlockingQueue&lt;Runnable&gt; workQueue， ThreadFactory threadFactory， RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rejectHandlerName = handler.getClass().getSimpleName();</span><br><span class=\"line\">        setRejectedExecutionHandler(RejectHandlerGetter.getProxy(handler));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable task， <span class=\"type\">long</span> startTimeout)</span> &#123;</span><br><span class=\"line\">        execute(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> command the runnable task</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">taskName</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command <span class=\"keyword\">instanceof</span> NamedRunnable) &#123;</span><br><span class=\"line\">            taskName = ((NamedRunnable) command).getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isNotEmpty(taskWrappers)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (TaskWrapper t : taskWrappers) &#123;</span><br><span class=\"line\">                command = t.wrap(command);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span> || queueTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            command = <span class=\"keyword\">new</span> <span class=\"title class_\">DtpRunnable</span>(command， taskName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.execute(command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the thread that will run task &#123;<span class=\"doctag\">@code</span> r&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the task that will be executed</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeExecute</span><span class=\"params\">(Thread t， Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(r <span class=\"keyword\">instanceof</span> DtpRunnable)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.beforeExecute(t， r);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">DtpRunnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> (DtpRunnable) r;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">currTime</span> <span class=\"operator\">=</span> TimeUtil.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            runnable.setStartTime(currTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queueTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">waitTime</span> <span class=\"operator\">=</span> currTime - runnable.getSubmitTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (waitTime &gt; queueTimeout) &#123;</span><br><span class=\"line\">                queueTimeoutCount.increment();</span><br><span class=\"line\">                AlarmManager.doAlarmAsync(<span class=\"built_in\">this</span>， QUEUE_TIMEOUT);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotBlank(runnable.getTaskName())) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">&quot;DynamicTp execute， queue timeout， poolName: &#123;&#125;， taskName: &#123;&#125;， waitTime: &#123;&#125;ms&quot;</span>， <span class=\"built_in\">this</span>.getThreadPoolName()， runnable.getTaskName()， waitTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.beforeExecute(t， r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 增强方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> r the runnable that has completed</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> t the exception that caused termination， or null if</span></span><br><span class=\"line\"><span class=\"comment\">     *          execution completed normally</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecute</span><span class=\"params\">(Runnable r， Throwable t)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (runTimeout &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpRunnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> (DtpRunnable) r;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">runTime</span> <span class=\"operator\">=</span> TimeUtil.currentTimeMillis() - runnable.getStartTime();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runTime &gt; runTimeout) &#123;</span><br><span class=\"line\">                runTimeoutCount.increment();</span><br><span class=\"line\">                AlarmManager.doAlarmAsync(<span class=\"built_in\">this</span>， RUN_TIMEOUT);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotBlank(runnable.getTaskName())) &#123;</span><br><span class=\"line\">                    log.warn(<span class=\"string\">&quot;DynamicTp execute， run timeout， poolName: &#123;&#125;， taskName: &#123;&#125;， runTime: &#123;&#125;ms&quot;</span>， <span class=\"built_in\">this</span>.getThreadPoolName()， runnable.getTaskName()， runTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.afterExecute(r， t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(DtpProperties dtpProperties)</span> &#123;</span><br><span class=\"line\">        NotifyHelper.initNotify(<span class=\"built_in\">this</span>， dtpProperties.getPlatforms());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preStartAllCoreThreads) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在没有任务到来之前就创建corePoolSize个线程或一个线程 因为在默认线程池启动的时候是不会启动核心线程的，只有来了新的任务时才会启动线程</span></span><br><span class=\"line\">            prestartAllCoreThreads();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>EagerDtpExecutor</p>\n</blockquote>\n<p>EagerDtpExecutor 继承了 DtpExecutor，专为 IO 密集场景提供，为什么这么说呢，请看下文分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EagerDtpExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DtpExecutor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of tasks submitted but not yet finished.</span></span><br><span class=\"line\"><span class=\"comment\">     * 已经提交的但还没有完成的任务数量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">submittedTaskCount</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">EagerDtpExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                            <span class=\"type\">int</span> maximumPoolSize，</span></span><br><span class=\"line\"><span class=\"params\">                            <span class=\"type\">long</span> keepAliveTime，</span></span><br><span class=\"line\"><span class=\"params\">                            TimeUnit unit，</span></span><br><span class=\"line\"><span class=\"params\">                            BlockingQueue&lt;Runnable&gt; workQueue，</span></span><br><span class=\"line\"><span class=\"params\">                            ThreadFactory threadFactory，</span></span><br><span class=\"line\"><span class=\"params\">                            RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(corePoolSize， maximumPoolSize， keepAliveTime， unit， workQueue， threadFactory， handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSubmittedTaskCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> submittedTaskCount.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterExecute</span><span class=\"params\">(Runnable r， Throwable t)</span> &#123;</span><br><span class=\"line\">        submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.afterExecute(r， t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        submittedTaskCount.incrementAndGet();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.execute(command);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 被拒绝时</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getQueue() <span class=\"keyword\">instanceof</span> TaskQueue) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the Executor is close to maximum pool size， concurrent</span></span><br><span class=\"line\">                <span class=\"comment\">// calls to execute() may result (due to use of TaskQueue) in</span></span><br><span class=\"line\">                <span class=\"comment\">// some tasks being rejected rather than queued.</span></span><br><span class=\"line\">                <span class=\"comment\">// If this happens， add them to the queue.</span></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">TaskQueue</span> <span class=\"variable\">queue</span> <span class=\"operator\">=</span> (TaskQueue) getQueue();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 加入队列中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!queue.force(command， <span class=\"number\">0</span>， TimeUnit.MILLISECONDS)) &#123;</span><br><span class=\"line\">                        submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;Queue capacity is full.&quot;</span>， rx);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                    submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                submittedTaskCount.decrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> rx;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看 execute 执行方法，当捕获住拒绝异常时，说明线程池队列已满且大于最大线程数，如果当前队列是</p>\n<p>TaskQueue 则重新将拒绝任务加入队列中，加入失败则抛出任务拒绝异常。</p>\n<p><strong>来看 TaskQueue 代码实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TaskQueue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">VariableLinkedBlockingQueue</span>&lt;Runnable&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> EagerDtpExecutor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TaskQueue</span><span class=\"params\">(<span class=\"type\">int</span> queueCapacity)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(queueCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setExecutor</span><span class=\"params\">(EagerDtpExecutor exec)</span> &#123;</span><br><span class=\"line\">        executor = exec;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">offer</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Runnable runnable)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RejectedExecutionException</span>(<span class=\"string\">&quot;The task queue does not have executor.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">currentPoolThreadSize</span> <span class=\"operator\">=</span> executor.getPoolSize();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池中的线程数等于最大线程数的时候，就将任务放进队列等待工作线程处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPoolThreadSize == executor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前未执行的任务数量小于等于当前线程数，还有剩余的worker线程，就将任务放进队列等待工作线程处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executor.getSubmittedTaskCount() &lt; currentPoolThreadSize) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程数大于核心线程，但小于最大线程数量，则直接返回false，外层逻辑线程池创建新的线程来执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentPoolThreadSize &lt; executor.getMaximumPoolSize()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// currentPoolThreadSize &gt;= max</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.offer(runnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码我们看到 currentPoolThreadSize &lt; executor.getMaximumPoolSize() 会返回 false</p>\n<p>底层实现 还是 JUC 的 ThreadPoolExecutor，来看 execute 方法，当前线程数大于核心线程，但小于最大线程数量，则执行 addWorker(command， false)，创建新的线程来执行任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">          <span class=\"comment\">// 线程池状态和线程数的整数</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">     <span class=\"comment\">// 如果当前线程数小于核心线程数，创建 Worker 线程并启动线程</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class=\"line\">         <span class=\"comment\">// 添加任务成功，那么就结束了 结果会包装到 FutureTask 中</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (addWorker(command， <span class=\"literal\">true</span>)) </span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         c = ctl.get();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 要么当前线程数大于等于核心线程数，要么刚刚 addWorker 失败了 ，如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 二次状态检查</span></span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get(); </span><br><span class=\"line\">           <span class=\"comment\">// 如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) </span><br><span class=\"line\">             reject(command);</span><br><span class=\"line\">           <span class=\"comment\">// 如果线程池还是 RUNNING 的，并且线程数为 0，重新创建一个新的线程 这里目的担心任务提交到队列中了，但是线程都关闭了</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>) </span><br><span class=\"line\">               <span class=\"comment\">// 创建Worker，并启动里面的Thread，为什么传null，线程启动后会自动从阻塞队列拉任务执行</span></span><br><span class=\"line\">             addWorker(<span class=\"literal\">null</span>， <span class=\"literal\">false</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">          <span class=\"comment\">// workQueue.offer(command)返回false，以 maximumPoolSize 为界创建新的 worker线程并启动线程，如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略</span></span><br><span class=\"line\">     <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command， <span class=\"literal\">false</span>)) </span><br><span class=\"line\">         reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一看这不就是 Tomcat 线程池处理流程吗，对比于原生 JUC 线程池提交任务流程</p>\n<p><strong>看下原生 JUC 线程池提交任务的流程</strong></p>\n<ul>\n<li>当前线程数小于核心线程数，则创建一个新的线程来执行任务</li>\n<li>当前线程数大于等于核心线程数，且阻塞队列未满，则将任务添加到队列中</li>\n<li>如果阻塞队列已满，当前线程数大于等于核心线程数，当前线程数小于最大线程数，则创建并启动一个线程来执行新提交的任务</li>\n<li>若当前线程数大于等于最大线程数，且阻塞队列已满，此时会执行拒绝策略</li>\n</ul>\n<p>来看下原生 JUC 线程池提交流程，引用美团线程池篇中的图<br><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230212235843.png\" alt=\"img\"></a></p>\n<p>原生 JUC 线程池核心思想就是就是先让核心线程数的线程工作，多余的任务统统塞到阻塞队列，阻塞队列塞不下才再多创建线程来工作，这种情况下当大量请求提交时，大量的请求很有可能都会被阻塞在队列中，而线程还没有创建到最大线程数，导致用户请求处理很慢，用户体验很差，而且当我们的工作队列设置得很大时，最大线程数这个参数显得没有意义，因为队列很难满，或者到满的时候再去扩容线程池已经于事无补了。</p>\n<p><strong>那如何解决呢？</strong></p>\n<p>我们有没有办法让线程池更激进一点呢，优先开启更多的线程，而把队列当成一个后备方案。</p>\n<p>重写了execute()方法，当抛出拒绝策略了尝试一次往阻塞队列里插入任务，尽最大努力的去执行任务，新增阻塞队列继承了 LinkedBlockingQueue，重写了offer()方法，重写了offer()方法，每次向队列插入任务，判断如果当前线程数小于最大线程数则插入失败。进而让线程池创建新线程来处理任务。</p>\n<p><strong>如下图所示：</strong></p>\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/1e05f50bf359e20b8e3d4ebf1407203.png\" alt=\"img\"></a></p>\n<p>总结：知识是相通的，要学以致用</p>\n<h2 id=\"2-4-报警通知\"><a href=\"#2-4-报警通知\" class=\"headerlink\" title=\"2.4 报警通知\"></a>2.4 报警通知</h2><p>关于分析报警通知，可以从 AlarmManager 和 NoticeManager 这两个类入手，实际就是分别构造了一个报警通知责任链，在需要报警通知的时候，调用责任链执行。</p>\n<p>先来看 AlarmManager 的代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlarmManager</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ExecutorService</span> <span class=\"variable\">ALARM_EXECUTOR</span> <span class=\"operator\">=</span> ThreadPoolBuilder.newBuilder()</span><br><span class=\"line\">            .threadPoolName(<span class=\"string\">&quot;dtp-alarm&quot;</span>)</span><br><span class=\"line\">            .threadFactory(<span class=\"string\">&quot;dtp-alarm&quot;</span>)</span><br><span class=\"line\">            .corePoolSize(<span class=\"number\">2</span>)</span><br><span class=\"line\">            .maximumPoolSize(<span class=\"number\">4</span>)</span><br><span class=\"line\">            .workQueue(LINKED_BLOCKING_QUEUE.getName()， <span class=\"number\">2000</span>， <span class=\"literal\">false</span>， <span class=\"literal\">null</span>)</span><br><span class=\"line\">            .rejectedExecutionHandler(RejectedTypeEnum.DISCARD_OLDEST_POLICY.getName())</span><br><span class=\"line\">            .buildCommon();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> InvokerChain&lt;BaseNotifyCtx&gt; ALARM_INVOKER_CHAIN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构造责任链</span></span><br><span class=\"line\">        ALARM_INVOKER_CHAIN = NotifyFilterBuilder.getAlarmInvokerChain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">AlarmManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>责任链的构造</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotifyFilterBuilder</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NotifyFilterBuilder</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InvokerChain&lt;BaseNotifyCtx&gt; <span class=\"title function_\">getAlarmInvokerChain</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">filters</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(NotifyFilter.class);</span><br><span class=\"line\">        Collection&lt;NotifyFilter&gt; alarmFilters = Lists.newArrayList(filters.values());</span><br><span class=\"line\">        alarmFilters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AlarmBaseFilter</span>());</span><br><span class=\"line\">        alarmFilters = alarmFilters.stream()</span><br><span class=\"line\">                .filter(x -&gt; x.supports(NotifyTypeEnum.ALARM))</span><br><span class=\"line\">                .sorted(Comparator.comparing(Filter::getOrder))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"comment\">// 构造ALARM_FILTER_CHAIN链</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> InvokerChainFactory.buildInvokerChain(<span class=\"keyword\">new</span> <span class=\"title class_\">AlarmInvoker</span>()， alarmFilters.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">NotifyFilter</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InvokerChain&lt;BaseNotifyCtx&gt; <span class=\"title function_\">getCommonInvokerChain</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">filters</span> <span class=\"operator\">=</span> ApplicationContextHolder.getBeansOfType(NotifyFilter.class);</span><br><span class=\"line\">        Collection&lt;NotifyFilter&gt; noticeFilters = Lists.newArrayList(filters.values());</span><br><span class=\"line\">        noticeFilters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">NoticeBaseFilter</span>());</span><br><span class=\"line\">        noticeFilters = noticeFilters.stream()</span><br><span class=\"line\">                .filter(x -&gt; x.supports(NotifyTypeEnum.COMMON))</span><br><span class=\"line\">                .sorted(Comparator.comparing(Filter::getOrder))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InvokerChainFactory.buildInvokerChain(<span class=\"keyword\">new</span> <span class=\"title class_\">NoticeInvoker</span>()， noticeFilters.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">NotifyFilter</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InvokerChainFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">InvokerChainFactory</span><span class=\"params\">()</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SafeVarargs</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span>&lt;T&gt; InvokerChain&lt;T&gt; <span class=\"title function_\">buildInvokerChain</span><span class=\"params\">(Invoker&lt;T&gt; target， Filter&lt;T&gt;... filters)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerChain&lt;T&gt; invokerChain = <span class=\"keyword\">new</span> <span class=\"title class_\">InvokerChain</span>&lt;&gt;();</span><br><span class=\"line\">        Invoker&lt;T&gt; last = target;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> filters.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            Invoker&lt;T&gt; next = last;</span><br><span class=\"line\">            Filter&lt;T&gt; filter = filters[i];</span><br><span class=\"line\">            last = context -&gt; filter.doFilter(context， next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invokerChain.setHead(last);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invokerChain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行报警方法调用如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAlarm</span><span class=\"params\">(ExecutorWrapper executorWrapper， NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据告警类型获取告警项配置，一个线程池可以配置多个NotifyItem，这里需要过滤</span></span><br><span class=\"line\">    NotifyHelper.getNotifyItem(executorWrapper， notifyItemEnum).ifPresent(notifyItem -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 执行责任链</span></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmCtx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlarmCtx</span>(executorWrapper， notifyItem);</span><br><span class=\"line\">        ALARM_INVOKER_CHAIN.proceed(alarmCtx);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行责任链，真正执行报警通知的代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AlarmInvoker</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Invoker</span>&lt;BaseNotifyCtx&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invoke</span><span class=\"params\">(BaseNotifyCtx context)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmCtx</span> <span class=\"operator\">=</span> (AlarmCtx) context;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">executorWrapper</span> <span class=\"operator\">=</span> alarmCtx.getExecutorWrapper();</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">notifyItem</span> <span class=\"operator\">=</span> alarmCtx.getNotifyItem();</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">alarmInfo</span> <span class=\"operator\">=</span> AlarmCounter.getAlarmInfo(executorWrapper.getThreadPoolName()， notifyItem.getType());</span><br><span class=\"line\">        alarmCtx.setAlarmInfo(alarmInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">        DtpNotifyCtxHolder.set(context);</span><br><span class=\"line\">        <span class=\"comment\">// 真正的发送告警的逻辑</span></span><br><span class=\"line\">        NotifierHandler.getInstance().sendAlarm(NotifyItemEnum.of(notifyItem.getType()));</span><br><span class=\"line\">        AlarmCounter.reset(executorWrapper.getThreadPoolName()， notifyItem.getType());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 NotifierHandler#sendAlarm()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotifierHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String， DtpNotifier&gt; NOTIFIERS = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">NotifierHandler</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;DtpNotifier&gt; loader = ServiceLoader.load(DtpNotifier.class);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (DtpNotifier notifier : loader) &#123;</span><br><span class=\"line\">            NOTIFIERS.put(notifier.platform()， notifier);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">dingNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpDingNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DingNotifier</span>());</span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">wechatNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpWechatNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WechatNotifier</span>());</span><br><span class=\"line\">        <span class=\"type\">DtpNotifier</span> <span class=\"variable\">larkNotifier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DtpLarkNotifier</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">LarkNotifier</span>());</span><br><span class=\"line\">        NOTIFIERS.put(dingNotifier.platform()， dingNotifier);</span><br><span class=\"line\">        NOTIFIERS.put(wechatNotifier.platform()， wechatNotifier);</span><br><span class=\"line\">        NOTIFIERS.put(larkNotifier.platform()， larkNotifier);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendAlarm</span><span class=\"params\">(NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">NotifyItem</span> <span class=\"variable\">notifyItem</span> <span class=\"operator\">=</span> DtpNotifyCtxHolder.get().getNotifyItem();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String platform : notifyItem.getPlatforms()) &#123;</span><br><span class=\"line\">                <span class=\"type\">DtpNotifier</span> <span class=\"variable\">notifier</span> <span class=\"operator\">=</span> NOTIFIERS.get(platform.toLowerCase());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (notifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    notifier.sendAlarmMsg(notifyItemEnum);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            DtpNotifyCtxHolder.remove();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后调用 notifier.sendAlarmMsg(notifyItemEnum)发送消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendAlarmMsg</span><span class=\"params\">(NotifyItemEnum notifyItemEnum)</span> &#123;</span><br><span class=\"line\">    NotifyHelper.getPlatform(platform()).ifPresent(platform -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建报警信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> buildAlarmContent(platform， notifyItemEnum);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送</span></span><br><span class=\"line\">        notifier.send(platform， content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132830.png\" alt=\"image-20230218132044086\"></a></p>\n<h2 id=\"2-5-监控\"><a href=\"#2-5-监控\" class=\"headerlink\" title=\"2.5 监控\"></a>2.5 监控</h2><p>入口 DtpMonitor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DtpMonitor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationRunner</span>， Ordered &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">MONITOR_EXECUTOR</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(</span><br><span class=\"line\">            <span class=\"number\">1</span>， <span class=\"keyword\">new</span> <span class=\"title class_\">NamedThreadFactory</span>(<span class=\"string\">&quot;dtp-monitor&quot;</span>， <span class=\"literal\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DtpProperties dtpProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 每隔 monitorInterval（默认为5） 执行监控</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> &#123;</span><br><span class=\"line\">        MONITOR_EXECUTOR.scheduleWithFixedDelay(<span class=\"built_in\">this</span>::run，</span><br><span class=\"line\">                <span class=\"number\">0</span>， dtpProperties.getMonitorInterval()， TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 所有线程池的名称</span></span><br><span class=\"line\">        List&lt;String&gt; dtpNames = DtpRegistry.listAllDtpNames();</span><br><span class=\"line\">        <span class=\"comment\">// 所有标有DynamicTp注解的线程池</span></span><br><span class=\"line\">        List&lt;String&gt; commonNames = DtpRegistry.listAllCommonNames();</span><br><span class=\"line\">        <span class=\"comment\">// 检查告警</span></span><br><span class=\"line\">        checkAlarm(dtpNames);</span><br><span class=\"line\">        <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">        collect(dtpNames， commonNames);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">collect</span><span class=\"params\">(List&lt;String&gt; dtpNames， List&lt;String&gt; commonNames)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不收集指标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dtpProperties.isEnabledCollect()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 拿到所有的线程池对象，获取到线程池的各种属性统计指标</span></span><br><span class=\"line\">        dtpNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DtpRegistry.getDtpExecutor(x);</span><br><span class=\"line\">            <span class=\"type\">ThreadPoolStats</span> <span class=\"variable\">poolStats</span> <span class=\"operator\">=</span> MetricsConverter.convert(executor);</span><br><span class=\"line\">            <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">            doCollect(poolStats);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        commonNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">ExecutorWrapper</span> <span class=\"variable\">wrapper</span> <span class=\"operator\">=</span> DtpRegistry.getCommonExecutor(x);</span><br><span class=\"line\">            <span class=\"comment\">// 转换 ThreadPoolStats</span></span><br><span class=\"line\">            <span class=\"type\">ThreadPoolStats</span> <span class=\"variable\">poolStats</span> <span class=\"operator\">=</span> MetricsConverter.convert(wrapper);</span><br><span class=\"line\">            <span class=\"comment\">// 指标收集</span></span><br><span class=\"line\">            doCollect(poolStats);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 发送一个CollectEvent事件</span></span><br><span class=\"line\">        publishCollectEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 针对每一个线程池，使用其名称从注册表中获取到线程池对象，然后触发告警</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dtpNames</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkAlarm</span><span class=\"params\">(List&lt;String&gt; dtpNames)</span> &#123;</span><br><span class=\"line\">        dtpNames.forEach(x -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">DtpExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> DtpRegistry.getDtpExecutor(x);</span><br><span class=\"line\">            AlarmManager.doAlarmAsync(executor， SCHEDULE_NOTIFY_ITEMS);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 发送告警AlarmCheckEvent事件</span></span><br><span class=\"line\">        publishAlarmCheckEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doCollect</span><span class=\"params\">(ThreadPoolStats threadPoolStats)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            CollectorHandler.getInstance().collect(threadPoolStats， dtpProperties.getCollectorTypes());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;DynamicTp monitor， metrics collect error.&quot;</span>， e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishCollectEvent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CollectEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CollectEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishAlarmCheckEvent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AlarmCheckEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AlarmCheckEvent</span>(<span class=\"built_in\">this</span>， dtpProperties);</span><br><span class=\"line\">        ApplicationContextHolder.publishEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png\"><img src=\"https://wormhole-img-1300857730.cos.ap-nanjing.myqcloud.com/blog/20230218132831.png\" alt=\"image-20230218132312173\"></a></p>\n<p>代码比较易懂，这里就不在叙述了。</p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p><strong>dynamic-tp</strong> 设计巧妙，代码中设计模式先行，结构清晰易懂，代码规整，同时提供了很多扩展点，通过利用了 Spring 的扩展，和 JUC 原生线程池优势，功能强大。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm2a95bsb000kucq5footgvtz","category_id":"cm2a95bsc000mucq52i4ncncb","_id":"cm2a95bsd000qucq5gf90exgn"}],"PostTag":[{"post_id":"cm2a95bs70007ucq515dmd06l","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bs9000aucq5hyyy9ptv"},{"post_id":"cm2a95bs20001ucq5e9c4e4if","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bs9000cucq50h3x3to6"},{"post_id":"cm2a95bs80008ucq5c7tddq04","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bsa000fucq53ohv88nn"},{"post_id":"cm2a95bs9000bucq56xrn6m25","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bsb000hucq50d9ydlg5"},{"post_id":"cm2a95bs40003ucq5gdgo8ybs","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bsb000jucq52e1v9s0y"},{"post_id":"cm2a95bs9000ducq58mo74ohg","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bsc000lucq5f36q3w9z"},{"post_id":"cm2a95bs70006ucq57kj82lgp","tag_id":"cm2a95bs50004ucq5hy218n6a","_id":"cm2a95bsd000oucq5bg96h3vn"},{"post_id":"cm2a95bsb000kucq5footgvtz","tag_id":"cm2a95bsd000nucq59mfxerlt","_id":"cm2a95bsd000pucq55hbn0ids"}],"Tag":[{"name":"php","_id":"cm2a95bs50004ucq5hy218n6a"},{"name":"mathjax","_id":"cm2a95bsd000nucq59mfxerlt"}]}}